
BluePillSelfBalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000820c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008320  08008320  00018320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008774  08008774  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008774  08008774  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008774  08008774  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800877c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001e0  0800895c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800895c  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c298  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c95  00000000  00000000  0002c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001873f  00000000  00000000  0002fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eac5  00000000  00000000  00048257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca0b  00000000  00000000  00056d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a90  00000000  00000000  000e3778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008304 	.word	0x08008304

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008304 	.word	0x08008304

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f023 030f 	bic.w	r3, r3, #15
 800112c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f043 030c 	orr.w	r3, r3, #12
 800113a:	b2db      	uxtb	r3, r3
 800113c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	b2db      	uxtb	r3, r3
 8001146:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001148:	7bbb      	ldrb	r3, [r7, #14]
 800114a:	f043 030c 	orr.w	r3, r3, #12
 800114e:	b2db      	uxtb	r3, r3
 8001150:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	b2db      	uxtb	r3, r3
 800115a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800115c:	f107 0208 	add.w	r2, r7, #8
 8001160:	2364      	movs	r3, #100	; 0x64
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2304      	movs	r3, #4
 8001166:	214e      	movs	r1, #78	; 0x4e
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <lcd_send_cmd+0x5c>)
 800116a:	f002 f829 	bl	80031c0 <HAL_I2C_Master_Transmit>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001fc 	.word	0x200001fc

0800117c <lcd_send_data>:

void lcd_send_data (char data)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f023 030f 	bic.w	r3, r3, #15
 800118c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f043 030d 	orr.w	r3, r3, #13
 800119a:	b2db      	uxtb	r3, r3
 800119c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f043 0309 	orr.w	r3, r3, #9
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	f043 030d 	orr.w	r3, r3, #13
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	f043 0309 	orr.w	r3, r3, #9
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2304      	movs	r3, #4
 80011c6:	214e      	movs	r1, #78	; 0x4e
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <lcd_send_data+0x5c>)
 80011ca:	f001 fff9 	bl	80031c0 <HAL_I2C_Master_Transmit>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001fc 	.word	0x200001fc

080011dc <lcd_clear>:

void lcd_clear (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff ff9a 	bl	800111c <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e005      	b.n	80011fa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80011ee:	2020      	movs	r0, #32
 80011f0:	f7ff ffc4 	bl	800117c <lcd_send_data>
	for (int i=0; i<100; i++)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b63      	cmp	r3, #99	; 0x63
 80011fe:	ddf6      	ble.n	80011ee <lcd_clear+0x12>
	}
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <lcd_init>:

void lcd_init (void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800120e:	2032      	movs	r0, #50	; 0x32
 8001210:	f001 fbaa 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001214:	2030      	movs	r0, #48	; 0x30
 8001216:	f7ff ff81 	bl	800111c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800121a:	2005      	movs	r0, #5
 800121c:	f001 fba4 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001220:	2030      	movs	r0, #48	; 0x30
 8001222:	f7ff ff7b 	bl	800111c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001226:	2001      	movs	r0, #1
 8001228:	f001 fb9e 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x30);
 800122c:	2030      	movs	r0, #48	; 0x30
 800122e:	f7ff ff75 	bl	800111c <lcd_send_cmd>
	HAL_Delay(10);
 8001232:	200a      	movs	r0, #10
 8001234:	f001 fb98 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001238:	2020      	movs	r0, #32
 800123a:	f7ff ff6f 	bl	800111c <lcd_send_cmd>
	HAL_Delay(10);
 800123e:	200a      	movs	r0, #10
 8001240:	f001 fb92 	bl	8002968 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001244:	2028      	movs	r0, #40	; 0x28
 8001246:	f7ff ff69 	bl	800111c <lcd_send_cmd>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f001 fb8c 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff ff63 	bl	800111c <lcd_send_cmd>
	HAL_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f001 fb86 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff ff5d 	bl	800111c <lcd_send_cmd>
	HAL_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f001 fb80 	bl	8002968 <HAL_Delay>
	HAL_Delay(1);
 8001268:	2001      	movs	r0, #1
 800126a:	f001 fb7d 	bl	8002968 <HAL_Delay>
	HAL_Delay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f001 fb7a 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001274:	2006      	movs	r0, #6
 8001276:	f7ff ff51 	bl	800111c <lcd_send_cmd>
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 fb74 	bl	8002968 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001280:	200c      	movs	r0, #12
 8001282:	f7ff ff4b 	bl	800111c <lcd_send_cmd>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001292:	e006      	b.n	80012a2 <lcd_send_string+0x18>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff6d 	bl	800117c <lcd_send_data>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f4      	bne.n	8001294 <lcd_send_string+0xa>
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ba:	f001 faf3 	bl	80028a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012be:	f000 f895 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c2:	f000 f9ef 	bl	80016a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012c6:	f000 f8d7 	bl	8001478 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012ca:	f000 f903 	bl	80014d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012ce:	f000 f951 	bl	8001574 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012d2:	f000 f99b 	bl	800160c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80012d6:	483b      	ldr	r0, [pc, #236]	; (80013c4 <main+0x110>)
 80012d8:	f003 fc04 	bl	8004ae4 <HAL_TIM_Base_Start>
  lcd_init();
 80012dc:	f7ff ff95 	bl	800120a <lcd_init>
  lcd_send_cmd(LCD_WRITE_DATA|LCD_CURSOR_ROW_ONE_COLUMN_ONE);
 80012e0:	2080      	movs	r0, #128	; 0x80
 80012e2:	f7ff ff1b 	bl	800111c <lcd_send_cmd>
  lcd_send_string("Initialized!");
 80012e6:	4838      	ldr	r0, [pc, #224]	; (80013c8 <main+0x114>)
 80012e8:	f7ff ffcf 	bl	800128a <lcd_send_string>
  lcd_send_cmd(LCD_WRITE_DATA|LCD_CURSOR_ROW_TWO_COLUMN_ONE);
 80012ec:	20c0      	movs	r0, #192	; 0xc0
 80012ee:	f7ff ff15 	bl	800111c <lcd_send_cmd>
  lcd_send_string("LCD");
 80012f2:	4836      	ldr	r0, [pc, #216]	; (80013cc <main+0x118>)
 80012f4:	f7ff ffc9 	bl	800128a <lcd_send_string>
  HAL_Delay(1000);
 80012f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012fc:	f001 fb34 	bl	8002968 <HAL_Delay>
  uint8_t success = MPU6050_Init();
 8001300:	f000 fec2 	bl	8002088 <MPU6050_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  if(!success){
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10f      	bne.n	800132e <main+0x7a>
	  lcd_send_cmd(LCD_WRITE_DATA|LCD_CURSOR_ROW_ONE_COLUMN_ONE);
 800130e:	2080      	movs	r0, #128	; 0x80
 8001310:	f7ff ff04 	bl	800111c <lcd_send_cmd>
	  lcd_send_string("Init Failed");
 8001314:	482e      	ldr	r0, [pc, #184]	; (80013d0 <main+0x11c>)
 8001316:	f7ff ffb8 	bl	800128a <lcd_send_string>
	  lcd_send_cmd(LCD_WRITE_DATA|LCD_CURSOR_ROW_TWO_COLUMN_ONE);
 800131a:	20c0      	movs	r0, #192	; 0xc0
 800131c:	f7ff fefe 	bl	800111c <lcd_send_cmd>
	  lcd_send_string("MPU6050 (-1)");
 8001320:	482c      	ldr	r0, [pc, #176]	; (80013d4 <main+0x120>)
 8001322:	f7ff ffb2 	bl	800128a <lcd_send_string>
	  errorBlink500ms = 1;
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <main+0x124>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	e01b      	b.n	8001366 <main+0xb2>

  } else{
	  lcd_send_cmd(LCD_WRITE_DATA|LCD_CURSOR_ROW_ONE_COLUMN_ONE);
 800132e:	2080      	movs	r0, #128	; 0x80
 8001330:	f7ff fef4 	bl	800111c <lcd_send_cmd>
	  lcd_send_string("Initialized!");
 8001334:	4824      	ldr	r0, [pc, #144]	; (80013c8 <main+0x114>)
 8001336:	f7ff ffa8 	bl	800128a <lcd_send_string>
	  lcd_send_cmd(LCD_WRITE_DATA|LCD_CURSOR_ROW_TWO_COLUMN_ONE);
 800133a:	20c0      	movs	r0, #192	; 0xc0
 800133c:	f7ff feee 	bl	800111c <lcd_send_cmd>
	  lcd_send_string("MPU6050");
 8001340:	4826      	ldr	r0, [pc, #152]	; (80013dc <main+0x128>)
 8001342:	f7ff ffa2 	bl	800128a <lcd_send_string>
	  HAL_Delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134a:	f001 fb0d 	bl	8002968 <HAL_Delay>
	  lcd_clear();
 800134e:	f7ff ff45 	bl	80011dc <lcd_clear>
	  MPU6050_GyroInitializationCalibration();
 8001352:	f001 f813 	bl	800237c <MPU6050_GyroInitializationCalibration>
	  lcd_clear();
 8001356:	f7ff ff41 	bl	80011dc <lcd_clear>

	  HAL_TIM_Base_Start_IT(&htim2);
 800135a:	4821      	ldr	r0, [pc, #132]	; (80013e0 <main+0x12c>)
 800135c:	f003 fc0c 	bl	8004b78 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim3);
 8001360:	4820      	ldr	r0, [pc, #128]	; (80013e4 <main+0x130>)
 8001362:	f003 fc09 	bl	8004b78 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(errorBlink500ms){
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <main+0x124>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d014      	beq.n	8001398 <main+0xe4>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <main+0x134>)
 8001376:	f001 fdad 	bl	8002ed4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800137a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137e:	f001 faf3 	bl	8002968 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001388:	4817      	ldr	r0, [pc, #92]	; (80013e8 <main+0x134>)
 800138a:	f001 fda3 	bl	8002ed4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800138e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001392:	f001 fae9 	bl	8002968 <HAL_Delay>
 8001396:	e7e6      	b.n	8001366 <main+0xb2>

	  } else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <main+0x134>)
 80013a0:	f001 fd98 	bl	8002ed4 <HAL_GPIO_WritePin>
		  HAL_Delay(4000);
 80013a4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80013a8:	f001 fade 	bl	8002968 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <main+0x134>)
 80013b4:	f001 fd8e 	bl	8002ed4 <HAL_GPIO_WritePin>
		  HAL_Delay(4000);
 80013b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80013bc:	f001 fad4 	bl	8002968 <HAL_Delay>
	  if(errorBlink500ms){
 80013c0:	e7d1      	b.n	8001366 <main+0xb2>
 80013c2:	bf00      	nop
 80013c4:	20000250 	.word	0x20000250
 80013c8:	08008320 	.word	0x08008320
 80013cc:	08008330 	.word	0x08008330
 80013d0:	08008334 	.word	0x08008334
 80013d4:	08008340 	.word	0x08008340
 80013d8:	20000328 	.word	0x20000328
 80013dc:	08008350 	.word	0x08008350
 80013e0:	20000298 	.word	0x20000298
 80013e4:	200002e0 	.word	0x200002e0
 80013e8:	40011000 	.word	0x40011000

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b090      	sub	sp, #64	; 0x40
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	2228      	movs	r2, #40	; 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 ff90 	bl	8005320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001420:	2302      	movs	r3, #2
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800142a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	4618      	mov	r0, r3
 8001436:	f002 feff 	bl	8004238 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001440:	f001 f83e 	bl	80024c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2102      	movs	r1, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f96c 	bl	800473c <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800146a:	f001 f829 	bl	80024c0 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	3740      	adds	r7, #64	; 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C1_Init+0x50>)
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_I2C1_Init+0x54>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C1_Init+0x50>)
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x58>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_I2C1_Init+0x50>)
 8001496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2C1_Init+0x50>)
 80014b6:	f001 fd3f 	bl	8002f38 <HAL_I2C_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014c0:	f000 fffe 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200001fc 	.word	0x200001fc
 80014cc:	40005400 	.word	0x40005400
 80014d0:	00061a80 	.word	0x00061a80

080014d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM1_Init+0x98>)
 80014f2:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <MX_TIM1_Init+0x9c>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM1_Init+0x98>)
 80014f8:	2247      	movs	r2, #71	; 0x47
 80014fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_TIM1_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM1_Init+0x98>)
 8001504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001508:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM1_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_TIM1_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM1_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <MX_TIM1_Init+0x98>)
 800151e:	f003 fa91 	bl	8004a44 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001528:	f000 ffca 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM1_Init+0x98>)
 800153a:	f003 fc77 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001544:	f000 ffbc 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM1_Init+0x98>)
 8001556:	f003 fe49 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001560:	f000 ffae 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000250 	.word	0x20000250
 8001570:	40012c00 	.word	0x40012c00

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM2_Init+0x94>)
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_TIM2_Init+0x94>)
 800159a:	228f      	movs	r2, #143	; 0x8f
 800159c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM2_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_TIM2_Init+0x94>)
 80015a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_TIM2_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_TIM2_Init+0x94>)
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b8:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_TIM2_Init+0x94>)
 80015ba:	f003 fa43 	bl	8004a44 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c4:	f000 ff7c 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_TIM2_Init+0x94>)
 80015d6:	f003 fc29 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015e0:	f000 ff6e 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_TIM2_Init+0x94>)
 80015f2:	f003 fdfb 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 ff60 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000298 	.word	0x20000298

0800160c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_TIM3_Init+0x90>)
 800162a:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <MX_TIM3_Init+0x94>)
 800162c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_TIM3_Init+0x90>)
 8001630:	2247      	movs	r2, #71	; 0x47
 8001632:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_TIM3_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM3_Init+0x90>)
 800163c:	224f      	movs	r2, #79	; 0x4f
 800163e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_TIM3_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM3_Init+0x90>)
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM3_Init+0x90>)
 800164e:	f003 f9f9 	bl	8004a44 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001658:	f000 ff32 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM3_Init+0x90>)
 800166a:	f003 fbdf 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001674:	f000 ff24 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM3_Init+0x90>)
 8001686:	f003 fdb1 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001690:	f000 ff16 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002e0 	.word	0x200002e0
 80016a0:	40000400 	.word	0x40000400

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a2c      	ldr	r2, [pc, #176]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a20      	ldr	r2, [pc, #128]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_GPIO_Init+0xcc>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_GPIO_Init+0xcc>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <MX_GPIO_Init+0xcc>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_GPIO_Init+0xcc>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171e:	4815      	ldr	r0, [pc, #84]	; (8001774 <MX_GPIO_Init+0xd0>)
 8001720:	f001 fbd8 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	211e      	movs	r1, #30
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_GPIO_Init+0xd4>)
 800172a:	f001 fbd3 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <MX_GPIO_Init+0xd0>)
 8001748:	f001 fa40 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800174c:	231e      	movs	r3, #30
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_GPIO_Init+0xd4>)
 8001764:	f001 fa32 	bl	8002bcc <HAL_GPIO_Init>

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	40011000 	.word	0x40011000
 8001778:	40010800 	.word	0x40010800
 800177c:	00000000 	.word	0x00000000

08001780 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	//REFACTOR EVERYTHING HERE
	if (htim->Instance == TIM2) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	f040 83e0 	bne.w	8001f54 <HAL_TIM_PeriodElapsedCallback+0x7d4>
		//4ms main looping
		 //__HAL_TIM_SET_COUNTER(&htim1, 0);
		 MPU6050_GetAccelData();
 8001794:	f000 fd70 	bl	8002278 <MPU6050_GetAccelData>
		 accelRawValues[2] -= ACCEL_BALANCE_VALUE;
 8001798:	4ba7      	ldr	r3, [pc, #668]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800179a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f5a3 5368 	sub.w	r3, r3, #14848	; 0x3a00
 80017a4:	3b34      	subs	r3, #52	; 0x34
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4ba3      	ldr	r3, [pc, #652]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017ac:	809a      	strh	r2, [r3, #4]
		 if(accelRawValues[2] > 8200){
 80017ae:	4ba2      	ldr	r3, [pc, #648]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017b4:	f242 0208 	movw	r2, #8200	; 0x2008
 80017b8:	4293      	cmp	r3, r2
 80017ba:	dd03      	ble.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x44>
			 accelRawValues[2]  = 8200;
 80017bc:	4b9e      	ldr	r3, [pc, #632]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017be:	f242 0208 	movw	r2, #8200	; 0x2008
 80017c2:	809a      	strh	r2, [r3, #4]
		 }
		 if(accelRawValues[2] < -8200){
 80017c4:	4b9c      	ldr	r3, [pc, #624]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ca:	4a9c      	ldr	r2, [pc, #624]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	da03      	bge.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0x58>
			 accelRawValues[2] = -8200;
 80017d0:	4b99      	ldr	r3, [pc, #612]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017d2:	f64d 72f8 	movw	r2, #57336	; 0xdff8
 80017d6:	809a      	strh	r2, [r3, #4]
		 }

		 angleFromAccel = asin((float)accelRawValues[2]/8200.0) * RAD_TO_DEG;
 80017d8:	4b97      	ldr	r3, [pc, #604]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa5c 	bl	8000c9c <__aeabi_i2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe1e 	bl	8000428 <__aeabi_f2d>
 80017ec:	a388      	add	r3, pc, #544	; (adr r3, 8001a10 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe ff9b 	bl	800072c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f006 faa3 	bl	8007d48 <asin>
 8001802:	a385      	add	r3, pc, #532	; (adr r3, 8001a18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fe66 	bl	80004d8 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f938 	bl	8000a88 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	4a89      	ldr	r2, [pc, #548]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800181c:	6013      	str	r3, [r2, #0]

		 if(balance == 0 && angleFromAccel > -0.5f && angleFromAccel < 0.5f){
 800181e:	4b89      	ldr	r3, [pc, #548]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d120      	bne.n	8001868 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8001826:	4b86      	ldr	r3, [pc, #536]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc44 	bl	80010bc <__aeabi_fcmpgt>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d016      	beq.n	8001868 <HAL_TIM_PeriodElapsedCallback+0xe8>
 800183a:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc1c 	bl	8001080 <__aeabi_fcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <HAL_TIM_PeriodElapsedCallback+0xe8>
			 balance = 1;
 800184e:	4b7d      	ldr	r3, [pc, #500]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
			 gyroAngle = angleFromAccel;
 8001854:	4b7a      	ldr	r3, [pc, #488]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a7b      	ldr	r2, [pc, #492]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800185a:	6013      	str	r3, [r2, #0]
			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001862:	487a      	ldr	r0, [pc, #488]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001864:	f001 fb36 	bl	8002ed4 <HAL_GPIO_WritePin>
			 //errorBlink500ms = 0;
		 }

		 MPU6050_GetGyroData();
 8001868:	f000 fd80 	bl	800236c <MPU6050_GetGyroData>
		 gyroRawValues[1] -= gyroCalibrationValuePitch;
 800186c:	4b78      	ldr	r3, [pc, #480]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800186e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fa12 	bl	8000c9c <__aeabi_i2f>
 8001878:	4602      	mov	r2, r0
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff f955 	bl	8000b30 <__aeabi_fsub>
 8001886:	4603      	mov	r3, r0
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fc21 	bl	80010d0 <__aeabi_f2iz>
 800188e:	4603      	mov	r3, r0
 8001890:	b21a      	sxth	r2, r3
 8001892:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001894:	805a      	strh	r2, [r3, #2]
		 gyroAngle += gyroRawValues[1] * RAD_PER_SEC_TRAVELED_4MS;
 8001896:	4b6e      	ldr	r3, [pc, #440]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001898:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff f9fd 	bl	8000c9c <__aeabi_i2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	496c      	ldr	r1, [pc, #432]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa4c 	bl	8000d44 <__aeabi_fmul>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f7ff f93c 	bl	8000b34 <__addsf3>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018c2:	601a      	str	r2, [r3, #0]

		 gyroRawValues[2] -= gyroCalibrationValueYaw;
 80018c4:	4b62      	ldr	r3, [pc, #392]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f9e6 	bl	8000c9c <__aeabi_i2f>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4610      	mov	r0, r2
 80018da:	f7ff f929 	bl	8000b30 <__aeabi_fsub>
 80018de:	4603      	mov	r3, r0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fbf5 	bl	80010d0 <__aeabi_f2iz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018ec:	809a      	strh	r2, [r3, #4]

		 gyroAngle = gyroAngle * 0.9995 + angleFromAccel * 0.0005;
 80018ee:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fd98 	bl	8000428 <__aeabi_f2d>
 80018f8:	a349      	add	r3, pc, #292	; (adr r3, 8001a20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fdeb 	bl	80004d8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4614      	mov	r4, r2
 8001908:	461d      	mov	r5, r3
 800190a:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd8a 	bl	8000428 <__aeabi_f2d>
 8001914:	a344      	add	r3, pc, #272	; (adr r3, 8001a28 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fddd 	bl	80004d8 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe fc21 	bl	800016c <__adddf3>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff f8a9 	bl	8000a88 <__aeabi_d2f>
 8001936:	4603      	mov	r3, r0
 8001938:	4a43      	ldr	r2, [pc, #268]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800193a:	6013      	str	r3, [r2, #0]

		 /*PID calculations*/

		 errorTempPID = gyroAngle - selfBalancePIDSetpoint - setpointPID;
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f8f2 	bl	8000b30 <__aeabi_fsub>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7ff f8ea 	bl	8000b30 <__aeabi_fsub>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001962:	601a      	str	r2, [r3, #0]
		 if (outputPIDValue > 10  || outputPIDValue < -10){
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4941      	ldr	r1, [pc, #260]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fba6 	bl	80010bc <__aeabi_fcmpgt>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d108      	bne.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x208>
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	493e      	ldr	r1, [pc, #248]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb7f 	bl	8001080 <__aeabi_fcmplt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d021      	beq.n	80019cc <HAL_TIM_PeriodElapsedCallback+0x24c>
			 errorTempPID += outputPIDValue * 0.015;
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fd4b 	bl	8000428 <__aeabi_f2d>
 8001992:	a327      	add	r3, pc, #156	; (adr r3, 8001a30 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fd9e 	bl	80004d8 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	461d      	mov	r5, r3
 80019a4:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fd3d 	bl	8000428 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fbd9 	bl	800016c <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f861 	bl	8000a88 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019ca:	6013      	str	r3, [r2, #0]
		 }

		 integralMemoryPID += Ki * errorTempPID;
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f9b4 	bl	8000d44 <__aeabi_fmul>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f7ff f8a4 	bl	8000b34 <__addsf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80019f2:	601a      	str	r2, [r3, #0]
		 if(integralMemoryPID > MAXIMUM_CONTROLLER_VALUE){
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4921      	ldr	r1, [pc, #132]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb5e 	bl	80010bc <__aeabi_fcmpgt>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03e      	beq.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0x304>
			 integralMemoryPID = MAXIMUM_CONTROLLER_VALUE;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e046      	b.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0x31c>
 8001a0e:	bf00      	nop
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40c00400 	.word	0x40c00400
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	404ca5dc 	.word	0x404ca5dc
 8001a20:	6c8b4396 	.word	0x6c8b4396
 8001a24:	3feffbe7 	.word	0x3feffbe7
 8001a28:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a2c:	3f40624d 	.word	0x3f40624d
 8001a30:	eb851eb8 	.word	0xeb851eb8
 8001a34:	3f8eb851 	.word	0x3f8eb851
 8001a38:	2000034c 	.word	0x2000034c
 8001a3c:	ffffdff8 	.word	0xffffdff8
 8001a40:	20000364 	.word	0x20000364
 8001a44:	2000037c 	.word	0x2000037c
 8001a48:	20000368 	.word	0x20000368
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	2000035c 	.word	0x2000035c
 8001a54:	2000036c 	.word	0x2000036c
 8001a58:	380205ff 	.word	0x380205ff
 8001a5c:	20000370 	.word	0x20000370
 8001a60:	20000380 	.word	0x20000380
 8001a64:	2000038c 	.word	0x2000038c
 8001a68:	20000384 	.word	0x20000384
 8001a6c:	20000390 	.word	0x20000390
 8001a70:	41200000 	.word	0x41200000
 8001a74:	c1200000 	.word	0xc1200000
 8001a78:	20000378 	.word	0x20000378
 8001a7c:	20000388 	.word	0x20000388
 8001a80:	43c80000 	.word	0x43c80000
		 } else if (integralMemoryPID < -MAXIMUM_CONTROLLER_VALUE){
 8001a84:	4b6c      	ldr	r3, [pc, #432]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	496c      	ldr	r1, [pc, #432]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff faf8 	bl	8001080 <__aeabi_fcmplt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0x31c>
			 integralMemoryPID = -MAXIMUM_CONTROLLER_VALUE;
 8001a96:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001a98:	4a68      	ldr	r2, [pc, #416]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001a9a:	601a      	str	r2, [r3, #0]
		 }

		 outputPIDValue = Kp * errorTempPID + integralMemoryPID + Kd * (errorTempPID - derivativeErrorPreviousPID);
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a68      	ldr	r2, [pc, #416]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f94c 	bl	8000d44 <__aeabi_fmul>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f7ff f83c 	bl	8000b34 <__addsf3>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461c      	mov	r4, r3
 8001ac0:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a60      	ldr	r2, [pc, #384]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f830 	bl	8000b30 <__aeabi_fsub>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7ff f932 	bl	8000d44 <__aeabi_fmul>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff f825 	bl	8000b34 <__addsf3>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001af0:	601a      	str	r2, [r3, #0]
		 if(outputPIDValue > MAXIMUM_CONTROLLER_VALUE){
 8001af2:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4957      	ldr	r1, [pc, #348]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fadf 	bl	80010bc <__aeabi_fcmpgt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x38c>
			 outputPIDValue = MAXIMUM_CONTROLLER_VALUE;
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b06:	4a53      	ldr	r2, [pc, #332]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x3a4>
		 } else if(outputPIDValue < -MAXIMUM_CONTROLLER_VALUE){
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	494a      	ldr	r1, [pc, #296]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fab4 	bl	8001080 <__aeabi_fcmplt>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x3a4>
			 outputPIDValue = -MAXIMUM_CONTROLLER_VALUE;
 8001b1e:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b20:	4a46      	ldr	r2, [pc, #280]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001b22:	601a      	str	r2, [r3, #0]
		 }

		 derivativeErrorPreviousPID = errorTempPID;
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a47      	ldr	r2, [pc, #284]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001b2a:	6013      	str	r3, [r2, #0]

		 if(outputPIDValue < 5 && outputPIDValue > -5){
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4949      	ldr	r1, [pc, #292]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff faa4 	bl	8001080 <__aeabi_fcmplt>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00c      	beq.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4946      	ldr	r1, [pc, #280]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fab9 	bl	80010bc <__aeabi_fcmpgt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x3d8>
			 outputPIDValue = 0;
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
		 }

		 if(gyroAngle > MAX_ANGLE_FOR_REACTION || gyroAngle < -MAX_ANGLE_FOR_REACTION || balance == 0 ){
 8001b58:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4941      	ldr	r1, [pc, #260]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff faac 	bl	80010bc <__aeabi_fcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x404>
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	493e      	ldr	r1, [pc, #248]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fa85 	bl	8001080 <__aeabi_fcmplt>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x404>
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10e      	bne.n	8001ba2 <HAL_TIM_PeriodElapsedCallback+0x422>
			 outputPIDValue = 0;
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
			 balance = 0;
 8001b8c:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
			 integralMemoryPID = 0;
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
			 selfBalancePIDSetpoint = 0;
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
		 }

		 leftStepperOutputPID = outputPIDValue;
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001ba8:	6013      	str	r3, [r2, #0]
		 rightStepperOutputPID = outputPIDValue;
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001bb0:	6013      	str	r3, [r2, #0]

		 /*Controller Calculations*/
		 /*TODO implement controller controls*/

		 if(setpointPID > 0.5){
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fa7e 	bl	80010bc <__aeabi_fcmpgt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d013      	beq.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x46e>
			 setpointPID -=0.05;
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc2c 	bl	8000428 <__aeabi_f2d>
 8001bd0:	a317      	add	r3, pc, #92	; (adr r3, 8001c30 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fac7 	bl	8000168 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7fe ff51 	bl	8000a88 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e04c      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x508>
		 } else if(setpointPID < -0.5){
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fa42 	bl	8001080 <__aeabi_fcmplt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d03e      	beq.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x500>
			 setpointPID += 0.05;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc0e 	bl	8000428 <__aeabi_f2d>
 8001c0c:	a308      	add	r3, pc, #32	; (adr r3, 8001c30 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe faab 	bl	800016c <__adddf3>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff33 	bl	8000a88 <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x508>
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	9999999a 	.word	0x9999999a
 8001c34:	3fa99999 	.word	0x3fa99999
 8001c38:	20000388 	.word	0x20000388
 8001c3c:	c3c80000 	.word	0xc3c80000
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000384 	.word	0x20000384
 8001c48:	20000394 	.word	0x20000394
 8001c4c:	20000374 	.word	0x20000374
 8001c50:	20000390 	.word	0x20000390
 8001c54:	43c80000 	.word	0x43c80000
 8001c58:	40a00000 	.word	0x40a00000
 8001c5c:	c0a00000 	.word	0xc0a00000
 8001c60:	20000368 	.word	0x20000368
 8001c64:	41f00000 	.word	0x41f00000
 8001c68:	c1f00000 	.word	0xc1f00000
 8001c6c:	2000037c 	.word	0x2000037c
 8001c70:	20000380 	.word	0x20000380
 8001c74:	20000398 	.word	0x20000398
 8001c78:	2000039c 	.word	0x2000039c
 8001c7c:	2000038c 	.word	0x2000038c
		 } else{
			 setpointPID = 0;
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
		 }

		 if (setpointPID == 0){
 8001c88:	4b9f      	ldr	r3, [pc, #636]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f9eb 	bl	800106c <__aeabi_fcmpeq>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d039      	beq.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x590>
			 if(outputPIDValue < 0 ){
 8001c9c:	4b9b      	ldr	r3, [pc, #620]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f9eb 	bl	8001080 <__aeabi_fcmplt>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d012      	beq.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x556>
				 selfBalancePIDSetpoint += 0.0015;
 8001cb0:	4b97      	ldr	r3, [pc, #604]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fbb7 	bl	8000428 <__aeabi_f2d>
 8001cba:	a391      	add	r3, pc, #580	; (adr r3, 8001f00 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fa54 	bl	800016c <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7fe fedc 	bl	8000a88 <__aeabi_d2f>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a8f      	ldr	r2, [pc, #572]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001cd4:	6013      	str	r3, [r2, #0]
			 }
			 if (outputPIDValue > 0){
 8001cd6:	4b8d      	ldr	r3, [pc, #564]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f9ec 	bl	80010bc <__aeabi_fcmpgt>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d012      	beq.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x590>
				 selfBalancePIDSetpoint -= 0.0015;
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fb9a 	bl	8000428 <__aeabi_f2d>
 8001cf4:	a382      	add	r3, pc, #520	; (adr r3, 8001f00 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fa35 	bl	8000168 <__aeabi_dsub>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe febf 	bl	8000a88 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a80      	ldr	r2, [pc, #512]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001d0e:	6013      	str	r3, [r2, #0]
			 }
		 }

		 /*Motor Step Calculations*/
		 /*Compensating for non-linear behaviour of stepper motors to get a linear speed response*/
		 if(leftStepperOutputPID > 0){
 8001d10:	4b80      	ldr	r3, [pc, #512]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff f9cf 	bl	80010bc <__aeabi_fcmpgt>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0x5da>
			 leftStepperOutputPID = 405 - (1/(leftStepperOutputPID + 9)) * 5500;
 8001d24:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	497b      	ldr	r1, [pc, #492]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff02 	bl	8000b34 <__addsf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4619      	mov	r1, r3
 8001d34:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d38:	f7ff f8b8 	bl	8000eac <__aeabi_fdiv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4977      	ldr	r1, [pc, #476]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ffff 	bl	8000d44 <__aeabi_fmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4875      	ldr	r0, [pc, #468]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8001d4c:	f7fe fef0 	bl	8000b30 <__aeabi_fsub>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e023      	b.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0x622>
		 } else if(leftStepperOutputPID  < 0){
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f98c 	bl	8001080 <__aeabi_fcmplt>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0x622>
			 leftStepperOutputPID = -405 - (1/(leftStepperOutputPID - 9)) * 5500;
 8001d6e:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4969      	ldr	r1, [pc, #420]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fedb 	bl	8000b30 <__aeabi_fsub>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d82:	f7ff f893 	bl	8000eac <__aeabi_fdiv>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4964      	ldr	r1, [pc, #400]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe ffda 	bl	8000d44 <__aeabi_fmul>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4619      	mov	r1, r3
 8001d94:	4863      	ldr	r0, [pc, #396]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8001d96:	f7fe fecb 	bl	8000b30 <__aeabi_fsub>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001da0:	601a      	str	r2, [r3, #0]
		 }

		 if(rightStepperOutputPID > 0){
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f986 	bl	80010bc <__aeabi_fcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01a      	beq.n	8001dec <HAL_TIM_PeriodElapsedCallback+0x66c>
			 rightStepperOutputPID = 405 - (1/(rightStepperOutputPID + 9)) * 5500;
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4957      	ldr	r1, [pc, #348]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe feb9 	bl	8000b34 <__addsf3>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001dca:	f7ff f86f 	bl	8000eac <__aeabi_fdiv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4952      	ldr	r1, [pc, #328]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ffb6 	bl	8000d44 <__aeabi_fmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4850      	ldr	r0, [pc, #320]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8001dde:	f7fe fea7 	bl	8000b30 <__aeabi_fsub>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e023      	b.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x6b4>
		 } else if (rightStepperOutputPID < 0){
 8001dec:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f943 	bl	8001080 <__aeabi_fcmplt>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d019      	beq.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x6b4>
			 rightStepperOutputPID =  -405 - (1/(rightStepperOutputPID - 9)) * 5500;
 8001e00:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4944      	ldr	r1, [pc, #272]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fe92 	bl	8000b30 <__aeabi_fsub>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001e14:	f7ff f84a 	bl	8000eac <__aeabi_fdiv>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4940      	ldr	r1, [pc, #256]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe ff91 	bl	8000d44 <__aeabi_fmul>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4619      	mov	r1, r3
 8001e26:	483f      	ldr	r0, [pc, #252]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8001e28:	f7fe fe82 	bl	8000b30 <__aeabi_fsub>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001e32:	601a      	str	r2, [r3, #0]
		 }

		 /*Calculate step time*/
		 if(leftStepperOutputPID > 0){
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f93d 	bl	80010bc <__aeabi_fcmpgt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_TIM_PeriodElapsedCallback+0x6e4>
			 leftStepperOutput = MAXIMUM_CONTROLLER_VALUE - leftStepperOutputPID;
 8001e48:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4837      	ldr	r0, [pc, #220]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 8001e50:	f7fe fe6e 	bl	8000b30 <__aeabi_fsub>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f93a 	bl	80010d0 <__aeabi_f2iz>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01a      	b.n	8001e9a <HAL_TIM_PeriodElapsedCallback+0x71a>
		 } else if(leftStepperOutputPID < 0){
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f907 	bl	8001080 <__aeabi_fcmplt>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0x714>
			 leftStepperOutput = -MAXIMUM_CONTROLLER_VALUE - leftStepperOutputPID;
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	482d      	ldr	r0, [pc, #180]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 8001e80:	f7fe fe56 	bl	8000b30 <__aeabi_fsub>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f922 	bl	80010d0 <__aeabi_f2iz>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e002      	b.n	8001e9a <HAL_TIM_PeriodElapsedCallback+0x71a>
		 } else{
			 leftStepperOutput = 0;
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
		 }

		 if(rightStepperOutputPID > 0){
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f90a 	bl	80010bc <__aeabi_fcmpgt>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <HAL_TIM_PeriodElapsedCallback+0x74a>
			 rightStepperOutput = MAXIMUM_CONTROLLER_VALUE - rightStepperOutputPID;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481d      	ldr	r0, [pc, #116]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 8001eb6:	f7fe fe3b 	bl	8000b30 <__aeabi_fsub>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f907 	bl	80010d0 <__aeabi_f2iz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e03b      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x7c2>
		 } else if(rightStepperOutputPID < 0){
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f8d4 	bl	8001080 <__aeabi_fcmplt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d02e      	beq.n	8001f3c <HAL_TIM_PeriodElapsedCallback+0x7bc>
			 rightStepperOutput = -MAXIMUM_CONTROLLER_VALUE - rightStepperOutputPID;
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4813      	ldr	r0, [pc, #76]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 8001ee6:	f7fe fe23 	bl	8000b30 <__aeabi_fsub>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f8ef 	bl	80010d0 <__aeabi_f2iz>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e023      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x7c2>
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	bc6a7efa 	.word	0xbc6a7efa
 8001f04:	3f589374 	.word	0x3f589374
 8001f08:	2000038c 	.word	0x2000038c
 8001f0c:	20000390 	.word	0x20000390
 8001f10:	20000380 	.word	0x20000380
 8001f14:	20000398 	.word	0x20000398
 8001f18:	41100000 	.word	0x41100000
 8001f1c:	45abe000 	.word	0x45abe000
 8001f20:	43ca8000 	.word	0x43ca8000
 8001f24:	c3ca8000 	.word	0xc3ca8000
 8001f28:	2000039c 	.word	0x2000039c
 8001f2c:	43c80000 	.word	0x43c80000
 8001f30:	200003a0 	.word	0x200003a0
 8001f34:	c3c80000 	.word	0xc3c80000
 8001f38:	200003a4 	.word	0x200003a4
		 } else{
			 rightStepperOutput = 0;
 8001f3c:	4b48      	ldr	r3, [pc, #288]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
		 }

		 leftStepperPulseControl = leftStepperOutput;
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8001f48:	6013      	str	r3, [r2, #0]
		 rightStepperPulseControl = rightStepperOutput;
 8001f4a:	4b45      	ldr	r3, [pc, #276]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8001f50:	6013      	str	r3, [r2, #0]
		} else if(leftStepperOutputCount == 2){
			//HAL_GPIO_WritePin(STEP_PORT_LEFT, STEP_PIN_LEFT, GPIO_PIN_RESET);
			GPIOA->BSRR |= (STEP_PIN_LEFT) << 16;
		}
  	}
}
 8001f52:	e080      	b.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x8d6>
  	} else if(htim->Instance == TIM3){
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a45      	ldr	r2, [pc, #276]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d17b      	bne.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x8d6>
  		rightStepperOutputCount++;
 8001f5e:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a43      	ldr	r2, [pc, #268]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8001f66:	6013      	str	r3, [r2, #0]
  		if(rightStepperOutputCount > rightStepperOutputMemory){
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d91d      	bls.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x830>
  			rightStepperOutputMemory = rightStepperPulseControl;
 8001f74:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3f      	ldr	r2, [pc, #252]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8001f7a:	6013      	str	r3, [r2, #0]
  			rightStepperOutputCount = 0;
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  			if(rightStepperOutputMemory < 0){
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da0b      	bge.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x822>
  				GPIOA->BSRR |= (DIRECTION_PIN_RIGHT);
 8001f8a:	4b3c      	ldr	r3, [pc, #240]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	4a3b      	ldr	r2, [pc, #236]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6113      	str	r3, [r2, #16]
  				rightStepperOutputMemory *= -1;
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	4a36      	ldr	r2, [pc, #216]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e01b      	b.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x85a>
  				GPIOA->BSRR |= (DIRECTION_PIN_RIGHT) << 16;
 8001fa2:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	4a35      	ldr	r2, [pc, #212]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	6113      	str	r3, [r2, #16]
 8001fae:	e014      	b.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x85a>
  		} else if(rightStepperOutputCount == 1){
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <HAL_TIM_PeriodElapsedCallback+0x846>
  			GPIOA->BSRR |= (STEP_PIN_RIGHT);
 8001fb8:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6113      	str	r3, [r2, #16]
 8001fc4:	e009      	b.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x85a>
  		} else if(rightStepperOutputCount == 2){
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d105      	bne.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x85a>
  			GPIOA->BSRR |= (STEP_PIN_RIGHT) << 16;
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4a2a      	ldr	r2, [pc, #168]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6113      	str	r3, [r2, #16]
		leftStepperOutputCount++;
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8001fe2:	6013      	str	r3, [r2, #0]
		if(leftStepperOutputCount > leftStepperOutputMemory){
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d91d      	bls.n	800202c <HAL_TIM_PeriodElapsedCallback+0x8ac>
			leftStepperOutputMemory = leftStepperPulseControl;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a23      	ldr	r2, [pc, #140]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8001ff6:	6013      	str	r3, [r2, #0]
			leftStepperOutputCount = 0;
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
			if(leftStepperOutputMemory < 0){
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da0b      	bge.n	800201e <HAL_TIM_PeriodElapsedCallback+0x89e>
				GPIOA->BSRR |= (DIRECTION_PIN_LEFT)  << 16;
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800200c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002010:	6113      	str	r3, [r2, #16]
				leftStepperOutputMemory *= -1;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	425b      	negs	r3, r3
 8002018:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	e01b      	b.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x8d6>
				GPIOA->BSRR |= (DIRECTION_PIN_LEFT);
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6113      	str	r3, [r2, #16]
}
 800202a:	e014      	b.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x8d6>
		} else if(leftStepperOutputCount == 1){
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_TIM_PeriodElapsedCallback+0x8c2>
			GPIOA->BSRR |= (STEP_PIN_LEFT);
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6113      	str	r3, [r2, #16]
}
 8002040:	e009      	b.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x8d6>
		} else if(leftStepperOutputCount == 2){
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d105      	bne.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x8d6>
			GPIOA->BSRR |= (STEP_PIN_LEFT) << 16;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8002050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002054:	6113      	str	r3, [r2, #16]
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	bf00      	nop
 8002060:	200003a4 	.word	0x200003a4
 8002064:	200003a0 	.word	0x200003a0
 8002068:	200003b8 	.word	0x200003b8
 800206c:	200003bc 	.word	0x200003bc
 8002070:	40000400 	.word	0x40000400
 8002074:	200003b4 	.word	0x200003b4
 8002078:	200003ac 	.word	0x200003ac
 800207c:	40010800 	.word	0x40010800
 8002080:	200003b0 	.word	0x200003b0
 8002084:	200003a8 	.word	0x200003a8

08002088 <MPU6050_Init>:

/*MPU6050*/
uint8_t MPU6050_Init(void){
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af04      	add	r7, sp, #16
	uint8_t dataBuffer;
	//WHO AM I check
	HAL_I2C_Mem_Read(&hi2c1, MPU_DEVICE_ADDRESS, MPU_WHO_AM_I_REG, 1, &dataBuffer, 1, 1000);
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	9302      	str	r3, [sp, #8]
 8002094:	2301      	movs	r3, #1
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	1cfb      	adds	r3, r7, #3
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	2275      	movs	r2, #117	; 0x75
 80020a0:	21d0      	movs	r1, #208	; 0xd0
 80020a2:	483a      	ldr	r0, [pc, #232]	; (800218c <MPU6050_Init+0x104>)
 80020a4:	f001 fa84 	bl	80035b0 <HAL_I2C_Mem_Read>
	if (dataBuffer != MPU_WHO_AM_I_SUCCESS_VALUE){
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	2b68      	cmp	r3, #104	; 0x68
 80020ac:	d01e      	beq.n	80020ec <MPU6050_Init+0x64>
		for(int i = 0; i<3; i++){
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	e016      	b.n	80020e2 <MPU6050_Init+0x5a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ba:	4835      	ldr	r0, [pc, #212]	; (8002190 <MPU6050_Init+0x108>)
 80020bc:	f000 ff0a 	bl	8002ed4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80020c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020c4:	f000 fc50 	bl	8002968 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ce:	4830      	ldr	r0, [pc, #192]	; (8002190 <MPU6050_Init+0x108>)
 80020d0:	f000 ff00 	bl	8002ed4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80020d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d8:	f000 fc46 	bl	8002968 <HAL_Delay>
		for(int i = 0; i<3; i++){
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3301      	adds	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	dde5      	ble.n	80020b4 <MPU6050_Init+0x2c>
		}

		return 0u;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e04b      	b.n	8002184 <MPU6050_Init+0xfc>

	} else{
		//Write all 0's to Power Management 1 register to wake the sensor up
		dataBuffer = MPU_WAKE_UP_VALUE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU_DEVICE_ADDRESS, MPU_POWER_MANAGEMENT_ONE_REG, 1, &dataBuffer, 1, 1000);
 80020f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2301      	movs	r3, #1
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	1cfb      	adds	r3, r7, #3
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2301      	movs	r3, #1
 8002100:	226b      	movs	r2, #107	; 0x6b
 8002102:	21d0      	movs	r1, #208	; 0xd0
 8002104:	4821      	ldr	r0, [pc, #132]	; (800218c <MPU6050_Init+0x104>)
 8002106:	f001 f959 	bl	80033bc <HAL_I2C_Mem_Write>

		//Set Data Rate
		dataBuffer = MPU_DATA_RATE;
 800210a:	2307      	movs	r3, #7
 800210c:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU_DEVICE_ADDRESS, MPU_SAMPLE_RATE_DIV_REG, 1, &dataBuffer, 1, 1000);
 800210e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	2301      	movs	r3, #1
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	1cfb      	adds	r3, r7, #3
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2301      	movs	r3, #1
 800211e:	2219      	movs	r2, #25
 8002120:	21d0      	movs	r1, #208	; 0xd0
 8002122:	481a      	ldr	r0, [pc, #104]	; (800218c <MPU6050_Init+0x104>)
 8002124:	f001 f94a 	bl	80033bc <HAL_I2C_Mem_Write>

		//Configure GYRO (+- 250 deg/s)
		dataBuffer = MPU_GYRO_CONFIG_VALUE;
 8002128:	2300      	movs	r3, #0
 800212a:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU_DEVICE_ADDRESS, MPU_GYRO_CONFIG_REG, 1, &dataBuffer, 1, 1000);
 800212c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	2301      	movs	r3, #1
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	1cfb      	adds	r3, r7, #3
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2301      	movs	r3, #1
 800213c:	221b      	movs	r2, #27
 800213e:	21d0      	movs	r1, #208	; 0xd0
 8002140:	4812      	ldr	r0, [pc, #72]	; (800218c <MPU6050_Init+0x104>)
 8002142:	f001 f93b 	bl	80033bc <HAL_I2C_Mem_Write>

		//Configure ACCEL (+- 2g)
		dataBuffer = MPU_ACCEL_CONFIG_VALUE;
 8002146:	2300      	movs	r3, #0
 8002148:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU_DEVICE_ADDRESS, MPU_ACCEL_CONFIG_REG, 1, &dataBuffer, 1, 1000);
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	2301      	movs	r3, #1
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	1cfb      	adds	r3, r7, #3
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2301      	movs	r3, #1
 800215a:	221c      	movs	r2, #28
 800215c:	21d0      	movs	r1, #208	; 0xd0
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <MPU6050_Init+0x104>)
 8002160:	f001 f92c 	bl	80033bc <HAL_I2C_Mem_Write>

		//Improve raw data by setting up filtering
		dataBuffer = MPU_FILTERING_CONFIG_VALUE;
 8002164:	2303      	movs	r3, #3
 8002166:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU_DEVICE_ADDRESS, MPU_FILTERING_CONFIG_REG, 1, &dataBuffer, 1, 1000);
 8002168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	2301      	movs	r3, #1
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	1cfb      	adds	r3, r7, #3
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	221a      	movs	r2, #26
 800217a:	21d0      	movs	r1, #208	; 0xd0
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <MPU6050_Init+0x104>)
 800217e:	f001 f91d 	bl	80033bc <HAL_I2C_Mem_Write>
		return 1u;
 8002182:	2301      	movs	r3, #1

	}
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200001fc 	.word	0x200001fc
 8002190:	40011000 	.word	0x40011000

08002194 <MPU6050_ReadAccelRaw>:
void MPU6050_ReadAccelRaw(){
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af04      	add	r7, sp, #16

	//Read Accel Data for all 3 axis (2 bytes per axis)

	HAL_I2C_Mem_Read(&hi2c1, MPU_DEVICE_ADDRESS, MPU_ACCEL_DATA_START, 1, accelRaw, 6, 1000);
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	2306      	movs	r3, #6
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MPU6050_ReadAccelRaw+0x68>)
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2301      	movs	r3, #1
 80021aa:	223b      	movs	r2, #59	; 0x3b
 80021ac:	21d0      	movs	r1, #208	; 0xd0
 80021ae:	4814      	ldr	r0, [pc, #80]	; (8002200 <MPU6050_ReadAccelRaw+0x6c>)
 80021b0:	f001 f9fe 	bl	80035b0 <HAL_I2C_Mem_Read>


	accelRawValues[0] = (((uint16_t)accelRaw[0] << 8u) | accelRaw[1]);
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MPU6050_ReadAccelRaw+0x68>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MPU6050_ReadAccelRaw+0x68>)
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MPU6050_ReadAccelRaw+0x70>)
 80021c8:	801a      	strh	r2, [r3, #0]
	accelRawValues[1] = (((uint16_t)accelRaw[2] << 8u) | accelRaw[3]);
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MPU6050_ReadAccelRaw+0x68>)
 80021cc:	789b      	ldrb	r3, [r3, #2]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MPU6050_ReadAccelRaw+0x68>)
 80021d4:	78db      	ldrb	r3, [r3, #3]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21a      	sxth	r2, r3
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MPU6050_ReadAccelRaw+0x70>)
 80021de:	805a      	strh	r2, [r3, #2]
	accelRawValues[2] = (((uint16_t)accelRaw[4] << 8u) | accelRaw[5]);
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MPU6050_ReadAccelRaw+0x68>)
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <MPU6050_ReadAccelRaw+0x68>)
 80021ea:	795b      	ldrb	r3, [r3, #5]
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <MPU6050_ReadAccelRaw+0x70>)
 80021f4:	809a      	strh	r2, [r3, #4]

}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000344 	.word	0x20000344
 8002200:	200001fc 	.word	0x200001fc
 8002204:	2000034c 	.word	0x2000034c

08002208 <MPU6050_ConvertRawToGravityConstantValues>:

void MPU6050_ConvertRawToGravityConstantValues(){
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0

	accelData[0] = accelRawValues[0] / MPU_ACCEL_DATA_CONVERSION_FACT;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <MPU6050_ConvertRawToGravityConstantValues+0x68>)
 800220e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fd42 	bl	8000c9c <__aeabi_i2f>
 8002218:	4603      	mov	r3, r0
 800221a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fe44 	bl	8000eac <__aeabi_fdiv>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <MPU6050_ConvertRawToGravityConstantValues+0x6c>)
 800222a:	601a      	str	r2, [r3, #0]
	accelData[1] = accelRawValues[1] / MPU_ACCEL_DATA_CONVERSION_FACT;
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MPU6050_ConvertRawToGravityConstantValues+0x68>)
 800222e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fd32 	bl	8000c9c <__aeabi_i2f>
 8002238:	4603      	mov	r3, r0
 800223a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fe34 	bl	8000eac <__aeabi_fdiv>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <MPU6050_ConvertRawToGravityConstantValues+0x6c>)
 800224a:	605a      	str	r2, [r3, #4]
	accelData[2] = accelRawValues[2] / MPU_ACCEL_DATA_CONVERSION_FACT;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MPU6050_ConvertRawToGravityConstantValues+0x68>)
 800224e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fd22 	bl	8000c9c <__aeabi_i2f>
 8002258:	4603      	mov	r3, r0
 800225a:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fe24 	bl	8000eac <__aeabi_fdiv>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <MPU6050_ConvertRawToGravityConstantValues+0x6c>)
 800226a:	609a      	str	r2, [r3, #8]

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000034c 	.word	0x2000034c
 8002274:	2000032c 	.word	0x2000032c

08002278 <MPU6050_GetAccelData>:

void MPU6050_GetAccelData(){
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	MPU6050_ReadAccelRaw();
 800227c:	f7ff ff8a 	bl	8002194 <MPU6050_ReadAccelRaw>
	MPU6050_ConvertRawToGravityConstantValues();
 8002280:	f7ff ffc2 	bl	8002208 <MPU6050_ConvertRawToGravityConstantValues>

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <MPU6050_ReadGyroRaw>:

void MPU6050_ReadGyroRaw(){
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU_DEVICE_ADDRESS, MPU_GYRO_DATA_START, 1, gyroRaw, 6, 1000);
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	9302      	str	r3, [sp, #8]
 8002294:	2306      	movs	r3, #6
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MPU6050_ReadGyroRaw+0x68>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2301      	movs	r3, #1
 800229e:	2243      	movs	r2, #67	; 0x43
 80022a0:	21d0      	movs	r1, #208	; 0xd0
 80022a2:	4814      	ldr	r0, [pc, #80]	; (80022f4 <MPU6050_ReadGyroRaw+0x6c>)
 80022a4:	f001 f984 	bl	80035b0 <HAL_I2C_Mem_Read>


	gyroRawValues[0] = (((uint16_t)gyroRaw[0] << 8u) | gyroRaw[1]);
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MPU6050_ReadGyroRaw+0x68>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MPU6050_ReadGyroRaw+0x68>)
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MPU6050_ReadGyroRaw+0x70>)
 80022bc:	801a      	strh	r2, [r3, #0]
	gyroRawValues[1] = (((uint16_t)gyroRaw[2] << 8u) | gyroRaw[3]);
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MPU6050_ReadGyroRaw+0x68>)
 80022c0:	789b      	ldrb	r3, [r3, #2]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <MPU6050_ReadGyroRaw+0x68>)
 80022c8:	78db      	ldrb	r3, [r3, #3]
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MPU6050_ReadGyroRaw+0x70>)
 80022d2:	805a      	strh	r2, [r3, #2]
	gyroRawValues[2] = (((uint16_t)gyroRaw[4] << 8u) | gyroRaw[5]);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MPU6050_ReadGyroRaw+0x68>)
 80022d6:	791b      	ldrb	r3, [r3, #4]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <MPU6050_ReadGyroRaw+0x68>)
 80022de:	795b      	ldrb	r3, [r3, #5]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <MPU6050_ReadGyroRaw+0x70>)
 80022e8:	809a      	strh	r2, [r3, #4]

}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000354 	.word	0x20000354
 80022f4:	200001fc 	.word	0x200001fc
 80022f8:	2000035c 	.word	0x2000035c

080022fc <MPU6050_ConvertRawToDegPerSecValues>:

void MPU6050_ConvertRawToDegPerSecValues(){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	gyroData[0] = gyroRawValues[0] / MPU_GYRO_DATA_CONVERSION_FACT;
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <MPU6050_ConvertRawToDegPerSecValues+0x64>)
 8002302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fcc8 	bl	8000c9c <__aeabi_i2f>
 800230c:	4603      	mov	r3, r0
 800230e:	4915      	ldr	r1, [pc, #84]	; (8002364 <MPU6050_ConvertRawToDegPerSecValues+0x68>)
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fdcb 	bl	8000eac <__aeabi_fdiv>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MPU6050_ConvertRawToDegPerSecValues+0x6c>)
 800231c:	601a      	str	r2, [r3, #0]
	gyroData[1] = gyroRawValues[1] / MPU_GYRO_DATA_CONVERSION_FACT;
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <MPU6050_ConvertRawToDegPerSecValues+0x64>)
 8002320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fcb9 	bl	8000c9c <__aeabi_i2f>
 800232a:	4603      	mov	r3, r0
 800232c:	490d      	ldr	r1, [pc, #52]	; (8002364 <MPU6050_ConvertRawToDegPerSecValues+0x68>)
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fdbc 	bl	8000eac <__aeabi_fdiv>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MPU6050_ConvertRawToDegPerSecValues+0x6c>)
 800233a:	605a      	str	r2, [r3, #4]
	gyroData[2] = gyroRawValues[2] / MPU_GYRO_DATA_CONVERSION_FACT;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <MPU6050_ConvertRawToDegPerSecValues+0x64>)
 800233e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fcaa 	bl	8000c9c <__aeabi_i2f>
 8002348:	4603      	mov	r3, r0
 800234a:	4906      	ldr	r1, [pc, #24]	; (8002364 <MPU6050_ConvertRawToDegPerSecValues+0x68>)
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fdad 	bl	8000eac <__aeabi_fdiv>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <MPU6050_ConvertRawToDegPerSecValues+0x6c>)
 8002358:	609a      	str	r2, [r3, #8]

}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000035c 	.word	0x2000035c
 8002364:	43030000 	.word	0x43030000
 8002368:	20000338 	.word	0x20000338

0800236c <MPU6050_GetGyroData>:

void MPU6050_GetGyroData(){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0

	MPU6050_ReadGyroRaw();
 8002370:	f7ff ff8a 	bl	8002288 <MPU6050_ReadGyroRaw>
	MPU6050_ConvertRawToDegPerSecValues();
 8002374:	f7ff ffc2 	bl	80022fc <MPU6050_ConvertRawToDegPerSecValues>

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <MPU6050_GyroInitializationCalibration>:


void MPU6050_GyroInitializationCalibration(){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002388:	4839      	ldr	r0, [pc, #228]	; (8002470 <MPU6050_GyroInitializationCalibration+0xf4>)
 800238a:	f000 fda3 	bl	8002ed4 <HAL_GPIO_WritePin>
	int calCounter = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
	lcd_send_cmd (0x80|0x00);
 8002392:	2080      	movs	r0, #128	; 0x80
 8002394:	f7fe fec2 	bl	800111c <lcd_send_cmd>
	lcd_send_string("Calibrating Gyro");
 8002398:	4836      	ldr	r0, [pc, #216]	; (8002474 <MPU6050_GyroInitializationCalibration+0xf8>)
 800239a:	f7fe ff76 	bl	800128a <lcd_send_string>
	lcd_send_cmd (0x80|0x40);
 800239e:	20c0      	movs	r0, #192	; 0xc0
 80023a0:	f7fe febc 	bl	800111c <lcd_send_cmd>
	for(calCounter = 0; calCounter < 1000; calCounter++){
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	e03f      	b.n	800242a <MPU6050_GyroInitializationCalibration+0xae>
		if(calCounter % 100 == 0){
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <MPU6050_GyroInitializationCalibration+0xfc>)
 80023ae:	fb83 1302 	smull	r1, r3, r3, r2
 80023b2:	1159      	asrs	r1, r3, #5
 80023b4:	17d3      	asrs	r3, r2, #31
 80023b6:	1acb      	subs	r3, r1, r3
 80023b8:	2164      	movs	r1, #100	; 0x64
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <MPU6050_GyroInitializationCalibration+0x58>
			lcd_send_string(".");
 80023c4:	482d      	ldr	r0, [pc, #180]	; (800247c <MPU6050_GyroInitializationCalibration+0x100>)
 80023c6:	f7fe ff60 	bl	800128a <lcd_send_string>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80023ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ce:	4828      	ldr	r0, [pc, #160]	; (8002470 <MPU6050_GyroInitializationCalibration+0xf4>)
 80023d0:	f000 fd98 	bl	8002f04 <HAL_GPIO_TogglePin>

		}
		MPU6050_GetGyroData();
 80023d4:	f7ff ffca 	bl	800236c <MPU6050_GetGyroData>
		gyroCalibrationValueYaw += gyroRawValues[2];
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <MPU6050_GyroInitializationCalibration+0x104>)
 80023da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fc5c 	bl	8000c9c <__aeabi_i2f>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <MPU6050_GyroInitializationCalibration+0x108>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7fe fba1 	bl	8000b34 <__addsf3>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MPU6050_GyroInitializationCalibration+0x108>)
 80023f8:	601a      	str	r2, [r3, #0]
		gyroCalibrationValuePitch += gyroRawValues[1];
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <MPU6050_GyroInitializationCalibration+0x104>)
 80023fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fc4b 	bl	8000c9c <__aeabi_i2f>
 8002406:	4602      	mov	r2, r0
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <MPU6050_GyroInitializationCalibration+0x10c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f7fe fb90 	bl	8000b34 <__addsf3>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MPU6050_GyroInitializationCalibration+0x10c>)
 800241a:	601a      	str	r2, [r3, #0]
		microDelay(3000);
 800241c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002420:	f000 f836 	bl	8002490 <microDelay>
	for(calCounter = 0; calCounter < 1000; calCounter++){
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3301      	adds	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002430:	dbbb      	blt.n	80023aa <MPU6050_GyroInitializationCalibration+0x2e>
	}


	gyroCalibrationValuePitch /= 1000;
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <MPU6050_GyroInitializationCalibration+0x10c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4915      	ldr	r1, [pc, #84]	; (800248c <MPU6050_GyroInitializationCalibration+0x110>)
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fd37 	bl	8000eac <__aeabi_fdiv>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MPU6050_GyroInitializationCalibration+0x10c>)
 8002444:	601a      	str	r2, [r3, #0]
	gyroCalibrationValueYaw /=  1000;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MPU6050_GyroInitializationCalibration+0x108>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4910      	ldr	r1, [pc, #64]	; (800248c <MPU6050_GyroInitializationCalibration+0x110>)
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fd2d 	bl	8000eac <__aeabi_fdiv>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MPU6050_GyroInitializationCalibration+0x108>)
 8002458:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <MPU6050_GyroInitializationCalibration+0xf4>)
 8002462:	f000 fd37 	bl	8002ed4 <HAL_GPIO_WritePin>

}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40011000 	.word	0x40011000
 8002474:	08008358 	.word	0x08008358
 8002478:	51eb851f 	.word	0x51eb851f
 800247c:	0800836c 	.word	0x0800836c
 8002480:	2000035c 	.word	0x2000035c
 8002484:	20000370 	.word	0x20000370
 8002488:	2000036c 	.word	0x2000036c
 800248c:	447a0000 	.word	0x447a0000

08002490 <microDelay>:

void microDelay (uint16_t delay)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <microDelay+0x2c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay){
 80024a2:	bf00      	nop
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <microDelay+0x2c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d3f9      	bcc.n	80024a4 <microDelay+0x14>
	  //wait until timer counter goes to desired delay
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	20000250 	.word	0x20000250

080024c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c4:	b672      	cpsid	i
}
 80024c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <Error_Handler+0x8>
	...

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_MspInit+0x5c>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_MspInit+0x5c>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6193      	str	r3, [r2, #24]
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_MspInit+0x5c>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_MspInit+0x5c>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_MspInit+0x5c>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_MspInit+0x5c>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_MspInit+0x60>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_MspInit+0x60>)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40021000 	.word	0x40021000
 800252c:	40010000 	.word	0x40010000

08002530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <HAL_I2C_MspInit+0x70>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d123      	bne.n	8002598 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_I2C_MspInit+0x74>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <HAL_I2C_MspInit+0x74>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_I2C_MspInit+0x74>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002568:	23c0      	movs	r3, #192	; 0xc0
 800256a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256c:	2312      	movs	r3, #18
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4619      	mov	r1, r3
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <HAL_I2C_MspInit+0x78>)
 800257c:	f000 fb26 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_I2C_MspInit+0x74>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_I2C_MspInit+0x74>)
 8002586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800258a:	61d3      	str	r3, [r2, #28]
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_I2C_MspInit+0x74>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40005400 	.word	0x40005400
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010c00 	.word	0x40010c00

080025ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <HAL_TIM_Base_MspInit+0x9c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10c      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4a22      	ldr	r2, [pc, #136]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c8:	6193      	str	r3, [r2, #24]
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025d6:	e032      	b.n	800263e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d114      	bne.n	800260c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	201c      	movs	r0, #28
 8002600:	f000 faad 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002604:	201c      	movs	r0, #28
 8002606:	f000 fac6 	bl	8002b96 <HAL_NVIC_EnableIRQ>
}
 800260a:	e018      	b.n	800263e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_TIM_Base_MspInit+0xa4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d113      	bne.n	800263e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	61d3      	str	r3, [r2, #28]
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	201d      	movs	r0, #29
 8002634:	f000 fa93 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002638:	201d      	movs	r0, #29
 800263a:	f000 faac 	bl	8002b96 <HAL_NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40021000 	.word	0x40021000
 8002650:	40000400 	.word	0x40000400

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269a:	f000 f949 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM2_IRQHandler+0x10>)
 80026aa:	f002 fab7 	bl	8004c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000298 	.word	0x20000298

080026b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM3_IRQHandler+0x10>)
 80026be:	f002 faad 	bl	8004c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002e0 	.word	0x200002e0

080026cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <_kill>:

int _kill(int pid, int sig)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026e4:	f002 fdf2 	bl	80052cc <__errno>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2216      	movs	r2, #22
 80026ec:	601a      	str	r2, [r3, #0]
	return -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_exit>:

void _exit (int status)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002702:	f04f 31ff 	mov.w	r1, #4294967295
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffe7 	bl	80026da <_kill>
	while (1) {}		/* Make sure we hang here */
 800270c:	e7fe      	b.n	800270c <_exit+0x12>

0800270e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e00a      	b.n	8002736 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002720:	f3af 8000 	nop.w
 8002724:	4601      	mov	r1, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60ba      	str	r2, [r7, #8]
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbf0      	blt.n	8002720 <_read+0x12>
	}

return len;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e009      	b.n	800276e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	60ba      	str	r2, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	dbf1      	blt.n	800275a <_write+0x12>
	}
	return len;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_close>:

int _close(int file)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	return -1;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a6:	605a      	str	r2, [r3, #4]
	return 0;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <_isatty>:

int _isatty(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	return 1;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f002 fd5c 	bl	80052cc <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20005000 	.word	0x20005000
 8002840:	00000400 	.word	0x00000400
 8002844:	200003c0 	.word	0x200003c0
 8002848:	200003d8 	.word	0x200003d8

0800284c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002858:	480c      	ldr	r0, [pc, #48]	; (800288c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800285a:	490d      	ldr	r1, [pc, #52]	; (8002890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002860:	e002      	b.n	8002868 <LoopCopyDataInit>

08002862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002866:	3304      	adds	r3, #4

08002868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800286a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800286c:	d3f9      	bcc.n	8002862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002870:	4c0a      	ldr	r4, [pc, #40]	; (800289c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002874:	e001      	b.n	800287a <LoopFillZerobss>

08002876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002878:	3204      	adds	r2, #4

0800287a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800287a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800287c:	d3fb      	bcc.n	8002876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800287e:	f7ff ffe5 	bl	800284c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002882:	f002 fd29 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002886:	f7fe fd15 	bl	80012b4 <main>
  bx lr
 800288a:	4770      	bx	lr
  ldr r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002890:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002894:	0800877c 	.word	0x0800877c
  ldr r2, =_sbss
 8002898:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800289c:	200003d8 	.word	0x200003d8

080028a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028a0:	e7fe      	b.n	80028a0 <ADC1_2_IRQHandler>
	...

080028a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_Init+0x28>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_Init+0x28>)
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f000 f947 	bl	8002b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ba:	200f      	movs	r0, #15
 80028bc:	f000 f808 	bl	80028d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c0:	f7ff fe04 	bl	80024cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_InitTick+0x54>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_InitTick+0x58>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f95f 	bl	8002bb2 <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00e      	b.n	800291c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d80a      	bhi.n	800291a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f000 f927 	bl	8002b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002910:	4a06      	ldr	r2, [pc, #24]	; (800292c <HAL_InitTick+0x5c>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000004 	.word	0x20000004
 8002928:	2000000c 	.word	0x2000000c
 800292c:	20000008 	.word	0x20000008

08002930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_IncTick+0x1c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_IncTick+0x20>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a03      	ldr	r2, [pc, #12]	; (8002950 <HAL_IncTick+0x20>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	2000000c 	.word	0x2000000c
 8002950:	200003c4 	.word	0x200003c4

08002954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return uwTick;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_GetTick+0x10>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	200003c4 	.word	0x200003c4

08002968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff fff0 	bl	8002954 <HAL_GetTick>
 8002974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d005      	beq.n	800298e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_Delay+0x44>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800298e:	bf00      	nop
 8002990:	f7ff ffe0 	bl	8002954 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d8f7      	bhi.n	8002990 <HAL_Delay+0x28>
  {
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	2000000c 	.word	0x2000000c

080029b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0b      	blt.n	8002a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4906      	ldr	r1, [pc, #24]	; (8002a48 <__NVIC_EnableIRQ+0x34>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
         );
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b14:	d301      	bcc.n	8002b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00f      	b.n	8002b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <SysTick_Config+0x40>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b22:	210f      	movs	r1, #15
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	f7ff ff90 	bl	8002a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <SysTick_Config+0x40>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <SysTick_Config+0x40>)
 8002b34:	2207      	movs	r2, #7
 8002b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000e010 	.word	0xe000e010

08002b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff2d 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b70:	f7ff ff42 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f7ff ff90 	bl	8002aa0 <NVIC_EncodePriority>
 8002b80:	4602      	mov	r2, r0
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff5f 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff35 	bl	8002a14 <__NVIC_EnableIRQ>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ffa2 	bl	8002b04 <SysTick_Config>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b08b      	sub	sp, #44	; 0x2c
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	e169      	b.n	8002eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002be0:	2201      	movs	r2, #1
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f040 8158 	bne.w	8002eae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a9a      	ldr	r2, [pc, #616]	; (8002e6c <HAL_GPIO_Init+0x2a0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d05e      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c08:	4a98      	ldr	r2, [pc, #608]	; (8002e6c <HAL_GPIO_Init+0x2a0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d875      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c0e:	4a98      	ldr	r2, [pc, #608]	; (8002e70 <HAL_GPIO_Init+0x2a4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d058      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c14:	4a96      	ldr	r2, [pc, #600]	; (8002e70 <HAL_GPIO_Init+0x2a4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d86f      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c1a:	4a96      	ldr	r2, [pc, #600]	; (8002e74 <HAL_GPIO_Init+0x2a8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d052      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c20:	4a94      	ldr	r2, [pc, #592]	; (8002e74 <HAL_GPIO_Init+0x2a8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d869      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c26:	4a94      	ldr	r2, [pc, #592]	; (8002e78 <HAL_GPIO_Init+0x2ac>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d04c      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c2c:	4a92      	ldr	r2, [pc, #584]	; (8002e78 <HAL_GPIO_Init+0x2ac>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d863      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c32:	4a92      	ldr	r2, [pc, #584]	; (8002e7c <HAL_GPIO_Init+0x2b0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d046      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c38:	4a90      	ldr	r2, [pc, #576]	; (8002e7c <HAL_GPIO_Init+0x2b0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d85d      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c3e:	2b12      	cmp	r3, #18
 8002c40:	d82a      	bhi.n	8002c98 <HAL_GPIO_Init+0xcc>
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	d859      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <HAL_GPIO_Init+0x80>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002cc7 	.word	0x08002cc7
 8002c50:	08002ca1 	.word	0x08002ca1
 8002c54:	08002cb3 	.word	0x08002cb3
 8002c58:	08002cf5 	.word	0x08002cf5
 8002c5c:	08002cfb 	.word	0x08002cfb
 8002c60:	08002cfb 	.word	0x08002cfb
 8002c64:	08002cfb 	.word	0x08002cfb
 8002c68:	08002cfb 	.word	0x08002cfb
 8002c6c:	08002cfb 	.word	0x08002cfb
 8002c70:	08002cfb 	.word	0x08002cfb
 8002c74:	08002cfb 	.word	0x08002cfb
 8002c78:	08002cfb 	.word	0x08002cfb
 8002c7c:	08002cfb 	.word	0x08002cfb
 8002c80:	08002cfb 	.word	0x08002cfb
 8002c84:	08002cfb 	.word	0x08002cfb
 8002c88:	08002cfb 	.word	0x08002cfb
 8002c8c:	08002cfb 	.word	0x08002cfb
 8002c90:	08002ca9 	.word	0x08002ca9
 8002c94:	08002cbd 	.word	0x08002cbd
 8002c98:	4a79      	ldr	r2, [pc, #484]	; (8002e80 <HAL_GPIO_Init+0x2b4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c9e:	e02c      	b.n	8002cfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	623b      	str	r3, [r7, #32]
          break;
 8002ca6:	e029      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	3304      	adds	r3, #4
 8002cae:	623b      	str	r3, [r7, #32]
          break;
 8002cb0:	e024      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	623b      	str	r3, [r7, #32]
          break;
 8002cba:	e01f      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	623b      	str	r3, [r7, #32]
          break;
 8002cc4:	e01a      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	623b      	str	r3, [r7, #32]
          break;
 8002cd2:	e013      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cdc:	2308      	movs	r3, #8
 8002cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	611a      	str	r2, [r3, #16]
          break;
 8002ce6:	e009      	b.n	8002cfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce8:	2308      	movs	r3, #8
 8002cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	615a      	str	r2, [r3, #20]
          break;
 8002cf2:	e003      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
          break;
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          break;
 8002cfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2bff      	cmp	r3, #255	; 0xff
 8002d00:	d801      	bhi.n	8002d06 <HAL_GPIO_Init+0x13a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	e001      	b.n	8002d0a <HAL_GPIO_Init+0x13e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2bff      	cmp	r3, #255	; 0xff
 8002d10:	d802      	bhi.n	8002d18 <HAL_GPIO_Init+0x14c>
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	e002      	b.n	8002d1e <HAL_GPIO_Init+0x152>
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	3b08      	subs	r3, #8
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	210f      	movs	r1, #15
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	401a      	ands	r2, r3
 8002d30:	6a39      	ldr	r1, [r7, #32]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80b1 	beq.w	8002eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_GPIO_Init+0x2b8>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	4a4c      	ldr	r2, [pc, #304]	; (8002e84 <HAL_GPIO_Init+0x2b8>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6193      	str	r3, [r2, #24]
 8002d58:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_GPIO_Init+0x2b8>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d64:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <HAL_GPIO_Init+0x2bc>)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <HAL_GPIO_Init+0x2c0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <HAL_GPIO_Init+0x1ec>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a3f      	ldr	r2, [pc, #252]	; (8002e90 <HAL_GPIO_Init+0x2c4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00d      	beq.n	8002db4 <HAL_GPIO_Init+0x1e8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3e      	ldr	r2, [pc, #248]	; (8002e94 <HAL_GPIO_Init+0x2c8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <HAL_GPIO_Init+0x1e4>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3d      	ldr	r2, [pc, #244]	; (8002e98 <HAL_GPIO_Init+0x2cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_GPIO_Init+0x1e0>
 8002da8:	2303      	movs	r3, #3
 8002daa:	e006      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002dac:	2304      	movs	r3, #4
 8002dae:	e004      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db8:	2300      	movs	r3, #0
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	f002 0203 	and.w	r2, r2, #3
 8002dc0:	0092      	lsls	r2, r2, #2
 8002dc2:	4093      	lsls	r3, r2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dca:	492f      	ldr	r1, [pc, #188]	; (8002e88 <HAL_GPIO_Init+0x2bc>)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	492c      	ldr	r1, [pc, #176]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	4928      	ldr	r1, [pc, #160]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4922      	ldr	r1, [pc, #136]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	491e      	ldr	r1, [pc, #120]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4918      	ldr	r1, [pc, #96]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	4914      	ldr	r1, [pc, #80]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d021      	beq.n	8002ea0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	490e      	ldr	r1, [pc, #56]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60cb      	str	r3, [r1, #12]
 8002e68:	e021      	b.n	8002eae <HAL_GPIO_Init+0x2e2>
 8002e6a:	bf00      	nop
 8002e6c:	10320000 	.word	0x10320000
 8002e70:	10310000 	.word	0x10310000
 8002e74:	10220000 	.word	0x10220000
 8002e78:	10210000 	.word	0x10210000
 8002e7c:	10120000 	.word	0x10120000
 8002e80:	10110000 	.word	0x10110000
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40010800 	.word	0x40010800
 8002e90:	40010c00 	.word	0x40010c00
 8002e94:	40011000 	.word	0x40011000
 8002e98:	40011400 	.word	0x40011400
 8002e9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4909      	ldr	r1, [pc, #36]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f47f ae8e 	bne.w	8002be0 <HAL_GPIO_Init+0x14>
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	372c      	adds	r7, #44	; 0x2c
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	611a      	str	r2, [r3, #16]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	041a      	lsls	r2, r3, #16
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	43d9      	mvns	r1, r3
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	400b      	ands	r3, r1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	611a      	str	r2, [r3, #16]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e12b      	b.n	80031a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fae6 	bl	8002530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f001 fd20 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8002fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a81      	ldr	r2, [pc, #516]	; (80031ac <HAL_I2C_Init+0x274>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d807      	bhi.n	8002fbc <HAL_I2C_Init+0x84>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a80      	ldr	r2, [pc, #512]	; (80031b0 <HAL_I2C_Init+0x278>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e006      	b.n	8002fca <HAL_I2C_Init+0x92>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a7d      	ldr	r2, [pc, #500]	; (80031b4 <HAL_I2C_Init+0x27c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0e7      	b.n	80031a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a78      	ldr	r2, [pc, #480]	; (80031b8 <HAL_I2C_Init+0x280>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0c9b      	lsrs	r3, r3, #18
 8002fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a6a      	ldr	r2, [pc, #424]	; (80031ac <HAL_I2C_Init+0x274>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d802      	bhi.n	800300c <HAL_I2C_Init+0xd4>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3301      	adds	r3, #1
 800300a:	e009      	b.n	8003020 <HAL_I2C_Init+0xe8>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	4a69      	ldr	r2, [pc, #420]	; (80031bc <HAL_I2C_Init+0x284>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	3301      	adds	r3, #1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	430b      	orrs	r3, r1
 8003026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	495c      	ldr	r1, [pc, #368]	; (80031ac <HAL_I2C_Init+0x274>)
 800303c:	428b      	cmp	r3, r1
 800303e:	d819      	bhi.n	8003074 <HAL_I2C_Init+0x13c>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e59      	subs	r1, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fbb1 f3f3 	udiv	r3, r1, r3
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003054:	400b      	ands	r3, r1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_I2C_Init+0x138>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e59      	subs	r1, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fbb1 f3f3 	udiv	r3, r1, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306e:	e051      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 8003070:	2304      	movs	r3, #4
 8003072:	e04f      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d111      	bne.n	80030a0 <HAL_I2C_Init+0x168>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e012      	b.n	80030c6 <HAL_I2C_Init+0x18e>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e58      	subs	r0, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	0099      	lsls	r1, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Init+0x196>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e022      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10e      	bne.n	80030f4 <HAL_I2C_Init+0x1bc>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e58      	subs	r0, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	440b      	add	r3, r1
 80030e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f2:	e00f      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	0099      	lsls	r1, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	6809      	ldr	r1, [r1, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6911      	ldr	r1, [r2, #16]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	000186a0 	.word	0x000186a0
 80031b0:	001e847f 	.word	0x001e847f
 80031b4:	003d08ff 	.word	0x003d08ff
 80031b8:	431bde83 	.word	0x431bde83
 80031bc:	10624dd3 	.word	0x10624dd3

080031c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	461a      	mov	r2, r3
 80031cc:	460b      	mov	r3, r1
 80031ce:	817b      	strh	r3, [r7, #10]
 80031d0:	4613      	mov	r3, r2
 80031d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff fbbe 	bl	8002954 <HAL_GetTick>
 80031d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	f040 80e0 	bne.w	80033a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2319      	movs	r3, #25
 80031ee:	2201      	movs	r2, #1
 80031f0:	4970      	ldr	r1, [pc, #448]	; (80033b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fe44 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	e0d3      	b.n	80033aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_I2C_Master_Transmit+0x50>
 800320c:	2302      	movs	r3, #2
 800320e:	e0cc      	b.n	80033aa <HAL_I2C_Master_Transmit+0x1ea>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d007      	beq.n	8003236 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003244:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2221      	movs	r2, #33	; 0x21
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2210      	movs	r2, #16
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	893a      	ldrh	r2, [r7, #8]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a50      	ldr	r2, [pc, #320]	; (80033b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003278:	8979      	ldrh	r1, [r7, #10]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fbfe 	bl	8003a80 <I2C_MasterRequestWrite>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e08d      	b.n	80033aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032a4:	e066      	b.n	8003374 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	6a39      	ldr	r1, [r7, #32]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 febe 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d107      	bne.n	80032ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06b      	b.n	80033aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d11b      	bne.n	8003348 <HAL_I2C_Master_Transmit+0x188>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d017      	beq.n	8003348 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	6a39      	ldr	r1, [r7, #32]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 feae 	bl	80040ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	2b04      	cmp	r3, #4
 800335e:	d107      	bne.n	8003370 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e01a      	b.n	80033aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d194      	bne.n	80032a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	00100002 	.word	0x00100002
 80033b8:	ffff0000 	.word	0xffff0000

080033bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	460b      	mov	r3, r1
 80033d0:	813b      	strh	r3, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033d6:	f7ff fabd 	bl	8002954 <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	f040 80d9 	bne.w	800359c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2319      	movs	r3, #25
 80033f0:	2201      	movs	r2, #1
 80033f2:	496d      	ldr	r1, [pc, #436]	; (80035a8 <HAL_I2C_Mem_Write+0x1ec>)
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fd43 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
 8003402:	e0cc      	b.n	800359e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_I2C_Mem_Write+0x56>
 800340e:	2302      	movs	r3, #2
 8003410:	e0c5      	b.n	800359e <HAL_I2C_Mem_Write+0x1e2>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d007      	beq.n	8003438 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2221      	movs	r2, #33	; 0x21
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2240      	movs	r2, #64	; 0x40
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a4d      	ldr	r2, [pc, #308]	; (80035ac <HAL_I2C_Mem_Write+0x1f0>)
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800347a:	88f8      	ldrh	r0, [r7, #6]
 800347c:	893a      	ldrh	r2, [r7, #8]
 800347e:	8979      	ldrh	r1, [r7, #10]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4603      	mov	r3, r0
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fb7a 	bl	8003b84 <I2C_RequestMemoryWrite>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d052      	beq.n	800353c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e081      	b.n	800359e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fdc4 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d107      	bne.n	80034c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06b      	b.n	800359e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d11b      	bne.n	800353c <HAL_I2C_Mem_Write+0x180>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d017      	beq.n	800353c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1aa      	bne.n	800349a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fdb0 	bl	80040ae <I2C_WaitOnBTFFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2b04      	cmp	r3, #4
 800355a:	d107      	bne.n	800356c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e016      	b.n	800359e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	00100002 	.word	0x00100002
 80035ac:	ffff0000 	.word	0xffff0000

080035b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	; 0x30
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	817b      	strh	r3, [r7, #10]
 80035c2:	460b      	mov	r3, r1
 80035c4:	813b      	strh	r3, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ce:	f7ff f9c1 	bl	8002954 <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	f040 8244 	bne.w	8003a6a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2319      	movs	r3, #25
 80035e8:	2201      	movs	r2, #1
 80035ea:	4982      	ldr	r1, [pc, #520]	; (80037f4 <HAL_I2C_Mem_Read+0x244>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fc47 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e237      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_I2C_Mem_Read+0x5a>
 8003606:	2302      	movs	r3, #2
 8003608:	e230      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d007      	beq.n	8003630 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2222      	movs	r2, #34	; 0x22
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a62      	ldr	r2, [pc, #392]	; (80037f8 <HAL_I2C_Mem_Read+0x248>)
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003672:	88f8      	ldrh	r0, [r7, #6]
 8003674:	893a      	ldrh	r2, [r7, #8]
 8003676:	8979      	ldrh	r1, [r7, #10]
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4603      	mov	r3, r0
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fb14 	bl	8003cb0 <I2C_RequestMemoryRead>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e1ec      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d113      	bne.n	80036c2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e1c0      	b.n	8003a44 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d11e      	bne.n	8003708 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036da:	b672      	cpsid	i
}
 80036dc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003702:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003704:	b662      	cpsie	i
}
 8003706:	e035      	b.n	8003774 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b02      	cmp	r3, #2
 800370e:	d11e      	bne.n	800374e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003720:	b672      	cpsid	i
}
 8003722:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800374a:	b662      	cpsie	i
}
 800374c:	e012      	b.n	8003774 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800375c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003774:	e166      	b.n	8003a44 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	2b03      	cmp	r3, #3
 800377c:	f200 811f 	bhi.w	80039be <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	2b01      	cmp	r3, #1
 8003786:	d123      	bne.n	80037d0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fccf 	bl	8004130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e167      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ce:	e139      	b.n	8003a44 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d152      	bne.n	800387e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	2200      	movs	r2, #0
 80037e0:	4906      	ldr	r1, [pc, #24]	; (80037fc <HAL_I2C_Mem_Read+0x24c>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fb4c 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e13c      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
 80037f2:	bf00      	nop
 80037f4:	00100002 	.word	0x00100002
 80037f8:	ffff0000 	.word	0xffff0000
 80037fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003800:	b672      	cpsid	i
}
 8003802:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003846:	b662      	cpsie	i
}
 8003848:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800387c:	e0e2      	b.n	8003a44 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	497b      	ldr	r1, [pc, #492]	; (8003a74 <HAL_I2C_Mem_Read+0x4c4>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 faf9 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0e9      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038de:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <HAL_I2C_Mem_Read+0x4c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	08db      	lsrs	r3, r3, #3
 80038e4:	4a65      	ldr	r2, [pc, #404]	; (8003a7c <HAL_I2C_Mem_Read+0x4cc>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0a1a      	lsrs	r2, r3, #8
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00da      	lsls	r2, r3, #3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d118      	bne.n	8003936 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003926:	b662      	cpsie	i
}
 8003928:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e09a      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d1d9      	bne.n	80038f8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003986:	b662      	cpsie	i
}
 8003988:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039bc:	e042      	b.n	8003a44 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fbb4 	bl	8004130 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e04c      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d118      	bne.n	8003a44 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f ae94 	bne.w	8003776 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	00010004 	.word	0x00010004
 8003a78:	20000004 	.word	0x20000004
 8003a7c:	14f8b589 	.word	0x14f8b589

08003a80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d006      	beq.n	8003aaa <I2C_MasterRequestWrite+0x2a>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d003      	beq.n	8003aaa <I2C_MasterRequestWrite+0x2a>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa8:	d108      	bne.n	8003abc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e00b      	b.n	8003ad4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	2b12      	cmp	r3, #18
 8003ac2:	d107      	bne.n	8003ad4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f9cd 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afa:	d103      	bne.n	8003b04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e035      	b.n	8003b74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b10:	d108      	bne.n	8003b24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b12:	897b      	ldrh	r3, [r7, #10]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b20:	611a      	str	r2, [r3, #16]
 8003b22:	e01b      	b.n	8003b5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b24:	897b      	ldrh	r3, [r7, #10]
 8003b26:	11db      	asrs	r3, r3, #7
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0306 	and.w	r3, r3, #6
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f063 030f 	orn	r3, r3, #15
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <I2C_MasterRequestWrite+0xfc>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f9f3 	bl	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e010      	b.n	8003b74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4907      	ldr	r1, [pc, #28]	; (8003b80 <I2C_MasterRequestWrite+0x100>)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f9e3 	bl	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	00010008 	.word	0x00010008
 8003b80:	00010002 	.word	0x00010002

08003b84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	460b      	mov	r3, r1
 8003b98:	813b      	strh	r3, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f960 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd4:	d103      	bne.n	8003bde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e05f      	b.n	8003ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	492d      	ldr	r1, [pc, #180]	; (8003cac <I2C_RequestMemoryWrite+0x128>)
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f998 	bl	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e04c      	b.n	8003ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	6a39      	ldr	r1, [r7, #32]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fa02 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d107      	bne.n	8003c46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e02b      	b.n	8003ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	e021      	b.n	8003ca0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	6a39      	ldr	r1, [r7, #32]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f9dc 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d107      	bne.n	8003c92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e005      	b.n	8003ca2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c96:	893b      	ldrh	r3, [r7, #8]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	00010002 	.word	0x00010002

08003cb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	817b      	strh	r3, [r7, #10]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	813b      	strh	r3, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f8c2 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d10:	d103      	bne.n	8003d1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0aa      	b.n	8003e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	6a3a      	ldr	r2, [r7, #32]
 8003d32:	4952      	ldr	r1, [pc, #328]	; (8003e7c <I2C_RequestMemoryRead+0x1cc>)
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f8fa 	bl	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e097      	b.n	8003e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	6a39      	ldr	r1, [r7, #32]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f964 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d107      	bne.n	8003d82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e076      	b.n	8003e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	611a      	str	r2, [r3, #16]
 8003d96:	e021      	b.n	8003ddc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	6a39      	ldr	r1, [r7, #32]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f93e 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00d      	beq.n	8003dd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d107      	bne.n	8003dce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e050      	b.n	8003e74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd2:	893b      	ldrh	r3, [r7, #8]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dde:	6a39      	ldr	r1, [r7, #32]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f923 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d107      	bne.n	8003e04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e035      	b.n	8003e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f82b 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3e:	d103      	bne.n	8003e48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e013      	b.n	8003e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e4c:	897b      	ldrh	r3, [r7, #10]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	4906      	ldr	r1, [pc, #24]	; (8003e7c <I2C_RequestMemoryRead+0x1cc>)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f863 	bl	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	00010002 	.word	0x00010002

08003e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e90:	e025      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d021      	beq.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fe fd5b 	bl	8002954 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d116      	bne.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e023      	b.n	8003f26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10d      	bne.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf0c      	ite	eq
 8003efa:	2301      	moveq	r3, #1
 8003efc:	2300      	movne	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	e00c      	b.n	8003f1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d0b6      	beq.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f3c:	e051      	b.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4c:	d123      	bne.n	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f043 0204 	orr.w	r2, r3, #4
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e046      	b.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d021      	beq.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe fcd9 	bl	8002954 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e020      	b.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d10c      	bne.n	8004006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e00b      	b.n	800401e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	43da      	mvns	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d18d      	bne.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004038:	e02d      	b.n	8004096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8ce 	bl	80041dc <I2C_IsAcknowledgeFailed>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e02d      	b.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d021      	beq.n	8004096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fe fc7f 	bl	8002954 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d116      	bne.n	8004096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e007      	b.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d1ca      	bne.n	800403a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ba:	e02d      	b.n	8004118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f88d 	bl	80041dc <I2C_IsAcknowledgeFailed>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e02d      	b.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d021      	beq.n	8004118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7fe fc3e 	bl	8002954 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f043 0220 	orr.w	r2, r3, #32
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e007      	b.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d1ca      	bne.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800413c:	e042      	b.n	80041c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b10      	cmp	r3, #16
 800414a:	d119      	bne.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0210 	mvn.w	r2, #16
 8004154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e029      	b.n	80041d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fe fbe8 	bl	8002954 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e007      	b.n	80041d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d1b5      	bne.n	800413e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f2:	d11b      	bne.n	800422c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f043 0204 	orr.w	r2, r3, #4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e272      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8087 	beq.w	8004366 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b92      	ldr	r3, [pc, #584]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b04      	cmp	r3, #4
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004264:	4b8f      	ldr	r3, [pc, #572]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d112      	bne.n	8004296 <HAL_RCC_OscConfig+0x5e>
 8004270:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b89      	ldr	r3, [pc, #548]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06c      	beq.n	8004364 <HAL_RCC_OscConfig+0x12c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d168      	bne.n	8004364 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e24c      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x76>
 80042a0:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a7f      	ldr	r2, [pc, #508]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x98>
 80042b6:	4b7b      	ldr	r3, [pc, #492]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7a      	ldr	r2, [pc, #488]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b78      	ldr	r3, [pc, #480]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a77      	ldr	r2, [pc, #476]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xbc>
 80042da:	4b72      	ldr	r3, [pc, #456]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a71      	ldr	r2, [pc, #452]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b6f      	ldr	r3, [pc, #444]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6e      	ldr	r2, [pc, #440]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042f4:	4b6b      	ldr	r3, [pc, #428]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6a      	ldr	r2, [pc, #424]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a67      	ldr	r2, [pc, #412]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe fb1e 	bl	8002954 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe fb1a 	bl	8002954 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e200      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xe4>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe fb0a 	bl	8002954 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe fb06 	bl	8002954 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e1ec      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b53      	ldr	r3, [pc, #332]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x10c>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d063      	beq.n	800443a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004372:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	d11c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x18c>
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x176>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1c0      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4939      	ldr	r1, [pc, #228]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	e03a      	b.n	800443a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d020      	beq.n	800440e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCC_OscConfig+0x270>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fe fabf 	bl	8002954 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043da:	f7fe fabb 	bl	8002954 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1a1      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4927      	ldr	r1, [pc, #156]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]
 800440c:	e015      	b.n	800443a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_OscConfig+0x270>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe fa9e 	bl	8002954 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441c:	f7fe fa9a 	bl	8002954 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e180      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d03a      	beq.n	80044bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d019      	beq.n	8004482 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_RCC_OscConfig+0x274>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004454:	f7fe fa7e 	bl	8002954 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445c:	f7fe fa7a 	bl	8002954 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e160      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800447a:	2001      	movs	r0, #1
 800447c:	f000 fac4 	bl	8004a08 <RCC_Delay>
 8004480:	e01c      	b.n	80044bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <HAL_RCC_OscConfig+0x274>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004488:	f7fe fa64 	bl	8002954 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448e:	e00f      	b.n	80044b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fe fa60 	bl	8002954 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d908      	bls.n	80044b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e146      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	42420000 	.word	0x42420000
 80044ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	4b92      	ldr	r3, [pc, #584]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e9      	bne.n	8004490 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a6 	beq.w	8004616 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	4b88      	ldr	r3, [pc, #544]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a87      	ldr	r2, [pc, #540]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	61d3      	str	r3, [r2, #28]
 80044e6:	4b85      	ldr	r3, [pc, #532]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f6:	4b82      	ldr	r3, [pc, #520]	; (8004700 <HAL_RCC_OscConfig+0x4c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d118      	bne.n	8004534 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004502:	4b7f      	ldr	r3, [pc, #508]	; (8004700 <HAL_RCC_OscConfig+0x4c8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7e      	ldr	r2, [pc, #504]	; (8004700 <HAL_RCC_OscConfig+0x4c8>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450e:	f7fe fa21 	bl	8002954 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004516:	f7fe fa1d 	bl	8002954 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b64      	cmp	r3, #100	; 0x64
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e103      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b75      	ldr	r3, [pc, #468]	; (8004700 <HAL_RCC_OscConfig+0x4c8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x312>
 800453c:	4b6f      	ldr	r3, [pc, #444]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4a6e      	ldr	r2, [pc, #440]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6213      	str	r3, [r2, #32]
 8004548:	e02d      	b.n	80045a6 <HAL_RCC_OscConfig+0x36e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x334>
 8004552:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a69      	ldr	r2, [pc, #420]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	4b67      	ldr	r3, [pc, #412]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	4a66      	ldr	r2, [pc, #408]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	6213      	str	r3, [r2, #32]
 800456a:	e01c      	b.n	80045a6 <HAL_RCC_OscConfig+0x36e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b05      	cmp	r3, #5
 8004572:	d10c      	bne.n	800458e <HAL_RCC_OscConfig+0x356>
 8004574:	4b61      	ldr	r3, [pc, #388]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a60      	ldr	r2, [pc, #384]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 800457a:	f043 0304 	orr.w	r3, r3, #4
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	4b5e      	ldr	r3, [pc, #376]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	4a5d      	ldr	r2, [pc, #372]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6213      	str	r3, [r2, #32]
 800458c:	e00b      	b.n	80045a6 <HAL_RCC_OscConfig+0x36e>
 800458e:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a5a      	ldr	r2, [pc, #360]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	6213      	str	r3, [r2, #32]
 800459a:	4b58      	ldr	r3, [pc, #352]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	4a57      	ldr	r2, [pc, #348]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	f023 0304 	bic.w	r3, r3, #4
 80045a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fe f9d1 	bl	8002954 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fe f9cd 	bl	8002954 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0b1      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045cc:	4b4b      	ldr	r3, [pc, #300]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ee      	beq.n	80045b6 <HAL_RCC_OscConfig+0x37e>
 80045d8:	e014      	b.n	8004604 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045da:	f7fe f9bb 	bl	8002954 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe f9b7 	bl	8002954 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e09b      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f8:	4b40      	ldr	r3, [pc, #256]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ee      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460a:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4a3b      	ldr	r2, [pc, #236]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004614:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8087 	beq.w	800472e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004620:	4b36      	ldr	r3, [pc, #216]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b08      	cmp	r3, #8
 800462a:	d061      	beq.n	80046f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d146      	bne.n	80046c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_RCC_OscConfig+0x4cc>)
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463a:	f7fe f98b 	bl	8002954 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004642:	f7fe f987 	bl	8002954 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e06d      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004654:	4b29      	ldr	r3, [pc, #164]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d108      	bne.n	800467c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4921      	ldr	r1, [pc, #132]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467c:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a19      	ldr	r1, [r3, #32]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	430b      	orrs	r3, r1
 800468e:	491b      	ldr	r1, [pc, #108]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4cc>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fe f95b 	bl	8002954 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe f957 	bl	8002954 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e03d      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x46a>
 80046c0:	e035      	b.n	800472e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCC_OscConfig+0x4cc>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe f944 	bl	8002954 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fe f940 	bl	8002954 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e026      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x498>
 80046ee:	e01e      	b.n	800472e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e019      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
 80046fc:	40021000 	.word	0x40021000
 8004700:	40007000 	.word	0x40007000
 8004704:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_OscConfig+0x500>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	429a      	cmp	r2, r3
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d001      	beq.n	800472e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000

0800473c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0d0      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	4b6a      	ldr	r3, [pc, #424]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d910      	bls.n	8004780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b67      	ldr	r3, [pc, #412]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 0207 	bic.w	r2, r3, #7
 8004766:	4965      	ldr	r1, [pc, #404]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b63      	ldr	r3, [pc, #396]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0b8      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004798:	4b59      	ldr	r3, [pc, #356]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a58      	ldr	r2, [pc, #352]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b0:	4b53      	ldr	r3, [pc, #332]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047bc:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	494d      	ldr	r1, [pc, #308]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d040      	beq.n	800485c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d115      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e07f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e073      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480a:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06b      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481a:	4b39      	ldr	r3, [pc, #228]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4936      	ldr	r1, [pc, #216]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800482c:	f7fe f892 	bl	8002954 <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	e00a      	b.n	800484a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fe f88e 	bl	8002954 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e053      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 020c 	and.w	r2, r3, #12
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	429a      	cmp	r2, r3
 800485a:	d1eb      	bne.n	8004834 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d210      	bcs.n	800488c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 0207 	bic.w	r2, r3, #7
 8004872:	4922      	ldr	r1, [pc, #136]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b20      	ldr	r3, [pc, #128]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e032      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4916      	ldr	r1, [pc, #88]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	490e      	ldr	r1, [pc, #56]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ca:	f000 f821 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	490a      	ldr	r1, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x1c8>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
 80048de:	fa22 f303 	lsr.w	r3, r2, r3
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1cc>)
 80048e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1d0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd fff0 	bl	80028d0 <HAL_InitTick>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40022000 	.word	0x40022000
 8004900:	40021000 	.word	0x40021000
 8004904:	08008380 	.word	0x08008380
 8004908:	20000004 	.word	0x20000004
 800490c:	20000008 	.word	0x20000008

08004910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b490      	push	{r4, r7}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004916:	4b29      	ldr	r3, [pc, #164]	; (80049bc <HAL_RCC_GetSysClockFreq+0xac>)
 8004918:	1d3c      	adds	r4, r7, #4
 800491a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800491c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004920:	f240 2301 	movw	r3, #513	; 0x201
 8004924:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	2300      	movs	r3, #0
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b04      	cmp	r3, #4
 8004948:	d002      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x40>
 800494a:	2b08      	cmp	r3, #8
 800494c:	d003      	beq.n	8004956 <HAL_RCC_GetSysClockFreq+0x46>
 800494e:	e02b      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004952:	623b      	str	r3, [r7, #32]
      break;
 8004954:	e02b      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	0c9b      	lsrs	r3, r3, #18
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	3328      	adds	r3, #40	; 0x28
 8004960:	443b      	add	r3, r7
 8004962:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004966:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d012      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	0c5b      	lsrs	r3, r3, #17
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	3328      	adds	r3, #40	; 0x28
 800497e:	443b      	add	r3, r7
 8004980:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004984:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	4a0e      	ldr	r2, [pc, #56]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800498a:	fb03 f202 	mul.w	r2, r3, r2
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e004      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4a0b      	ldr	r2, [pc, #44]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499c:	fb02 f303 	mul.w	r3, r2, r3
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	623b      	str	r3, [r7, #32]
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049aa:	623b      	str	r3, [r7, #32]
      break;
 80049ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ae:	6a3b      	ldr	r3, [r7, #32]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc90      	pop	{r4, r7}
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	08008370 	.word	0x08008370
 80049c0:	40021000 	.word	0x40021000
 80049c4:	007a1200 	.word	0x007a1200
 80049c8:	003d0900 	.word	0x003d0900

080049cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d0:	4b02      	ldr	r3, [pc, #8]	; (80049dc <HAL_RCC_GetHCLKFreq+0x10>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	20000004 	.word	0x20000004

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e4:	f7ff fff2 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4903      	ldr	r1, [pc, #12]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40021000 	.word	0x40021000
 8004a04:	08008390 	.word	0x08008390

08004a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <RCC_Delay+0x34>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <RCC_Delay+0x38>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0a5b      	lsrs	r3, r3, #9
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a24:	bf00      	nop
  }
  while (Delay --);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	60fa      	str	r2, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f9      	bne.n	8004a24 <RCC_Delay+0x1c>
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	20000004 	.word	0x20000004
 8004a40:	10624dd3 	.word	0x10624dd3

08004a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e041      	b.n	8004ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fd fd9e 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 faba 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e032      	b.n	8004b62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_TIM_Base_Start+0x88>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00e      	beq.n	8004b2c <HAL_TIM_Base_Start+0x48>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d009      	beq.n	8004b2c <HAL_TIM_Base_Start+0x48>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <HAL_TIM_Base_Start+0x8c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_TIM_Base_Start+0x48>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <HAL_TIM_Base_Start+0x90>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d111      	bne.n	8004b50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d010      	beq.n	8004b60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	e007      	b.n	8004b60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800

08004b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d001      	beq.n	8004b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e03a      	b.n	8004c06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_TIM_Base_Start_IT+0x98>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x58>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bba:	d009      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x58>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <HAL_TIM_Base_Start_IT+0x9c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x58>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <HAL_TIM_Base_Start_IT+0xa0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d111      	bne.n	8004bf4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d010      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf2:	e007      	b.n	8004c04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800

08004c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0202 	mvn.w	r2, #2
 8004c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f9b1 	bl	8004fc6 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f9a4 	bl	8004fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f9b3 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0204 	mvn.w	r2, #4
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f987 	bl	8004fc6 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f97a 	bl	8004fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f989 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0208 	mvn.w	r2, #8
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f95d 	bl	8004fc6 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f950 	bl	8004fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f95f 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0210 	mvn.w	r2, #16
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f933 	bl	8004fc6 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f926 	bl	8004fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f935 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0201 	mvn.w	r2, #1
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fc fcf0 	bl	8001780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b80      	cmp	r3, #128	; 0x80
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa77 	bl	80052ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d10e      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d107      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8f9 	bl	8004fea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d10e      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d107      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0220 	mvn.w	r2, #32
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa42 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIM_ConfigClockSource+0x18>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e0b3      	b.n	8004fac <HAL_TIM_ConfigClockSource+0x180>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7c:	d03e      	beq.n	8004efc <HAL_TIM_ConfigClockSource+0xd0>
 8004e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e82:	f200 8087 	bhi.w	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8a:	f000 8085 	beq.w	8004f98 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e92:	d87f      	bhi.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004e94:	2b70      	cmp	r3, #112	; 0x70
 8004e96:	d01a      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0xa2>
 8004e98:	2b70      	cmp	r3, #112	; 0x70
 8004e9a:	d87b      	bhi.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004e9c:	2b60      	cmp	r3, #96	; 0x60
 8004e9e:	d050      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x116>
 8004ea0:	2b60      	cmp	r3, #96	; 0x60
 8004ea2:	d877      	bhi.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004ea4:	2b50      	cmp	r3, #80	; 0x50
 8004ea6:	d03c      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xf6>
 8004ea8:	2b50      	cmp	r3, #80	; 0x50
 8004eaa:	d873      	bhi.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d058      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x136>
 8004eb0:	2b40      	cmp	r3, #64	; 0x40
 8004eb2:	d86f      	bhi.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004eb4:	2b30      	cmp	r3, #48	; 0x30
 8004eb6:	d064      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x156>
 8004eb8:	2b30      	cmp	r3, #48	; 0x30
 8004eba:	d86b      	bhi.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d060      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x156>
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d867      	bhi.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d05c      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x156>
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d05a      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ecc:	e062      	b.n	8004f94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6899      	ldr	r1, [r3, #8]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f000 f966 	bl	80051ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ef0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	609a      	str	r2, [r3, #8]
      break;
 8004efa:	e04e      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6899      	ldr	r1, [r3, #8]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f000 f94f 	bl	80051ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f1e:	609a      	str	r2, [r3, #8]
      break;
 8004f20:	e03b      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6859      	ldr	r1, [r3, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f000 f8c6 	bl	80050c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2150      	movs	r1, #80	; 0x50
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f91d 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004f40:	e02b      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f000 f8e4 	bl	800511c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2160      	movs	r1, #96	; 0x60
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 f90d 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004f60:	e01b      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 f8a6 	bl	80050c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2140      	movs	r1, #64	; 0x40
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f8fd 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004f80:	e00b      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f000 f8f4 	bl	800517a <TIM_ITRx_SetConfig>
        break;
 8004f92:	e002      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <TIM_Base_SetConfig+0xb8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <TIM_Base_SetConfig+0xbc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a25      	ldr	r2, [pc, #148]	; (80050bc <TIM_Base_SetConfig+0xc0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <TIM_Base_SetConfig+0xb8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <TIM_Base_SetConfig+0xbc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a18      	ldr	r2, [pc, #96]	; (80050bc <TIM_Base_SetConfig+0xc0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a07      	ldr	r2, [pc, #28]	; (80050b4 <TIM_Base_SetConfig+0xb8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800

080050c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 030a 	bic.w	r3, r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f023 0210 	bic.w	r2, r3, #16
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005146:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	031b      	lsls	r3, r3, #12
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005158:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	f043 0307 	orr.w	r3, r3, #7
 800519c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	021a      	lsls	r2, r3, #8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	609a      	str	r2, [r3, #8]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e046      	b.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d009      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10c      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	4313      	orrs	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	2600      	movs	r6, #0
 80052dc:	4d0c      	ldr	r5, [pc, #48]	; (8005310 <__libc_init_array+0x38>)
 80052de:	4c0d      	ldr	r4, [pc, #52]	; (8005314 <__libc_init_array+0x3c>)
 80052e0:	1b64      	subs	r4, r4, r5
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	f003 f80c 	bl	8008304 <_init>
 80052ec:	2600      	movs	r6, #0
 80052ee:	4d0a      	ldr	r5, [pc, #40]	; (8005318 <__libc_init_array+0x40>)
 80052f0:	4c0a      	ldr	r4, [pc, #40]	; (800531c <__libc_init_array+0x44>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08008774 	.word	0x08008774
 8005314:	08008774 	.word	0x08008774
 8005318:	08008774 	.word	0x08008774
 800531c:	08008778 	.word	0x08008778

08005320 <memset>:
 8005320:	4603      	mov	r3, r0
 8005322:	4402      	add	r2, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	d100      	bne.n	800532a <memset+0xa>
 8005328:	4770      	bx	lr
 800532a:	f803 1b01 	strb.w	r1, [r3], #1
 800532e:	e7f9      	b.n	8005324 <memset+0x4>

08005330 <__cvt>:
 8005330:	2b00      	cmp	r3, #0
 8005332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005336:	461f      	mov	r7, r3
 8005338:	bfbb      	ittet	lt
 800533a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800533e:	461f      	movlt	r7, r3
 8005340:	2300      	movge	r3, #0
 8005342:	232d      	movlt	r3, #45	; 0x2d
 8005344:	b088      	sub	sp, #32
 8005346:	4614      	mov	r4, r2
 8005348:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800534a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800534c:	7013      	strb	r3, [r2, #0]
 800534e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005350:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005354:	f023 0820 	bic.w	r8, r3, #32
 8005358:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800535c:	d005      	beq.n	800536a <__cvt+0x3a>
 800535e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005362:	d100      	bne.n	8005366 <__cvt+0x36>
 8005364:	3501      	adds	r5, #1
 8005366:	2302      	movs	r3, #2
 8005368:	e000      	b.n	800536c <__cvt+0x3c>
 800536a:	2303      	movs	r3, #3
 800536c:	aa07      	add	r2, sp, #28
 800536e:	9204      	str	r2, [sp, #16]
 8005370:	aa06      	add	r2, sp, #24
 8005372:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005376:	e9cd 3500 	strd	r3, r5, [sp]
 800537a:	4622      	mov	r2, r4
 800537c:	463b      	mov	r3, r7
 800537e:	f000 fcc3 	bl	8005d08 <_dtoa_r>
 8005382:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005386:	4606      	mov	r6, r0
 8005388:	d102      	bne.n	8005390 <__cvt+0x60>
 800538a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800538c:	07db      	lsls	r3, r3, #31
 800538e:	d522      	bpl.n	80053d6 <__cvt+0xa6>
 8005390:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005394:	eb06 0905 	add.w	r9, r6, r5
 8005398:	d110      	bne.n	80053bc <__cvt+0x8c>
 800539a:	7833      	ldrb	r3, [r6, #0]
 800539c:	2b30      	cmp	r3, #48	; 0x30
 800539e:	d10a      	bne.n	80053b6 <__cvt+0x86>
 80053a0:	2200      	movs	r2, #0
 80053a2:	2300      	movs	r3, #0
 80053a4:	4620      	mov	r0, r4
 80053a6:	4639      	mov	r1, r7
 80053a8:	f7fb fafe 	bl	80009a8 <__aeabi_dcmpeq>
 80053ac:	b918      	cbnz	r0, 80053b6 <__cvt+0x86>
 80053ae:	f1c5 0501 	rsb	r5, r5, #1
 80053b2:	f8ca 5000 	str.w	r5, [sl]
 80053b6:	f8da 3000 	ldr.w	r3, [sl]
 80053ba:	4499      	add	r9, r3
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	4620      	mov	r0, r4
 80053c2:	4639      	mov	r1, r7
 80053c4:	f7fb faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80053c8:	b108      	cbz	r0, 80053ce <__cvt+0x9e>
 80053ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80053ce:	2230      	movs	r2, #48	; 0x30
 80053d0:	9b07      	ldr	r3, [sp, #28]
 80053d2:	454b      	cmp	r3, r9
 80053d4:	d307      	bcc.n	80053e6 <__cvt+0xb6>
 80053d6:	4630      	mov	r0, r6
 80053d8:	9b07      	ldr	r3, [sp, #28]
 80053da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053dc:	1b9b      	subs	r3, r3, r6
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	b008      	add	sp, #32
 80053e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	9107      	str	r1, [sp, #28]
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e7f0      	b.n	80053d0 <__cvt+0xa0>

080053ee <__exponent>:
 80053ee:	4603      	mov	r3, r0
 80053f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f2:	2900      	cmp	r1, #0
 80053f4:	f803 2b02 	strb.w	r2, [r3], #2
 80053f8:	bfb6      	itet	lt
 80053fa:	222d      	movlt	r2, #45	; 0x2d
 80053fc:	222b      	movge	r2, #43	; 0x2b
 80053fe:	4249      	neglt	r1, r1
 8005400:	2909      	cmp	r1, #9
 8005402:	7042      	strb	r2, [r0, #1]
 8005404:	dd2b      	ble.n	800545e <__exponent+0x70>
 8005406:	f10d 0407 	add.w	r4, sp, #7
 800540a:	46a4      	mov	ip, r4
 800540c:	270a      	movs	r7, #10
 800540e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005412:	460a      	mov	r2, r1
 8005414:	46a6      	mov	lr, r4
 8005416:	fb07 1516 	mls	r5, r7, r6, r1
 800541a:	2a63      	cmp	r2, #99	; 0x63
 800541c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005420:	4631      	mov	r1, r6
 8005422:	f104 34ff 	add.w	r4, r4, #4294967295
 8005426:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800542a:	dcf0      	bgt.n	800540e <__exponent+0x20>
 800542c:	3130      	adds	r1, #48	; 0x30
 800542e:	f1ae 0502 	sub.w	r5, lr, #2
 8005432:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005436:	4629      	mov	r1, r5
 8005438:	1c44      	adds	r4, r0, #1
 800543a:	4561      	cmp	r1, ip
 800543c:	d30a      	bcc.n	8005454 <__exponent+0x66>
 800543e:	f10d 0209 	add.w	r2, sp, #9
 8005442:	eba2 020e 	sub.w	r2, r2, lr
 8005446:	4565      	cmp	r5, ip
 8005448:	bf88      	it	hi
 800544a:	2200      	movhi	r2, #0
 800544c:	4413      	add	r3, r2
 800544e:	1a18      	subs	r0, r3, r0
 8005450:	b003      	add	sp, #12
 8005452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005454:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005458:	f804 2f01 	strb.w	r2, [r4, #1]!
 800545c:	e7ed      	b.n	800543a <__exponent+0x4c>
 800545e:	2330      	movs	r3, #48	; 0x30
 8005460:	3130      	adds	r1, #48	; 0x30
 8005462:	7083      	strb	r3, [r0, #2]
 8005464:	70c1      	strb	r1, [r0, #3]
 8005466:	1d03      	adds	r3, r0, #4
 8005468:	e7f1      	b.n	800544e <__exponent+0x60>
	...

0800546c <_printf_float>:
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	b091      	sub	sp, #68	; 0x44
 8005472:	460c      	mov	r4, r1
 8005474:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005478:	4616      	mov	r6, r2
 800547a:	461f      	mov	r7, r3
 800547c:	4605      	mov	r5, r0
 800547e:	f001 fa31 	bl	80068e4 <_localeconv_r>
 8005482:	6803      	ldr	r3, [r0, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	9309      	str	r3, [sp, #36]	; 0x24
 8005488:	f7fa fe62 	bl	8000150 <strlen>
 800548c:	2300      	movs	r3, #0
 800548e:	930e      	str	r3, [sp, #56]	; 0x38
 8005490:	f8d8 3000 	ldr.w	r3, [r8]
 8005494:	900a      	str	r0, [sp, #40]	; 0x28
 8005496:	3307      	adds	r3, #7
 8005498:	f023 0307 	bic.w	r3, r3, #7
 800549c:	f103 0208 	add.w	r2, r3, #8
 80054a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80054a4:	f8d4 b000 	ldr.w	fp, [r4]
 80054a8:	f8c8 2000 	str.w	r2, [r8]
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054b4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80054b8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80054bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054be:	f04f 32ff 	mov.w	r2, #4294967295
 80054c2:	4640      	mov	r0, r8
 80054c4:	4b9c      	ldr	r3, [pc, #624]	; (8005738 <_printf_float+0x2cc>)
 80054c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054c8:	f7fb faa0 	bl	8000a0c <__aeabi_dcmpun>
 80054cc:	bb70      	cbnz	r0, 800552c <_printf_float+0xc0>
 80054ce:	f04f 32ff 	mov.w	r2, #4294967295
 80054d2:	4640      	mov	r0, r8
 80054d4:	4b98      	ldr	r3, [pc, #608]	; (8005738 <_printf_float+0x2cc>)
 80054d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054d8:	f7fb fa7a 	bl	80009d0 <__aeabi_dcmple>
 80054dc:	bb30      	cbnz	r0, 800552c <_printf_float+0xc0>
 80054de:	2200      	movs	r2, #0
 80054e0:	2300      	movs	r3, #0
 80054e2:	4640      	mov	r0, r8
 80054e4:	4651      	mov	r1, sl
 80054e6:	f7fb fa69 	bl	80009bc <__aeabi_dcmplt>
 80054ea:	b110      	cbz	r0, 80054f2 <_printf_float+0x86>
 80054ec:	232d      	movs	r3, #45	; 0x2d
 80054ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f2:	4b92      	ldr	r3, [pc, #584]	; (800573c <_printf_float+0x2d0>)
 80054f4:	4892      	ldr	r0, [pc, #584]	; (8005740 <_printf_float+0x2d4>)
 80054f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80054fa:	bf94      	ite	ls
 80054fc:	4698      	movls	r8, r3
 80054fe:	4680      	movhi	r8, r0
 8005500:	2303      	movs	r3, #3
 8005502:	f04f 0a00 	mov.w	sl, #0
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	f02b 0304 	bic.w	r3, fp, #4
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	4633      	mov	r3, r6
 8005510:	4621      	mov	r1, r4
 8005512:	4628      	mov	r0, r5
 8005514:	9700      	str	r7, [sp, #0]
 8005516:	aa0f      	add	r2, sp, #60	; 0x3c
 8005518:	f000 f9d4 	bl	80058c4 <_printf_common>
 800551c:	3001      	adds	r0, #1
 800551e:	f040 8090 	bne.w	8005642 <_printf_float+0x1d6>
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	b011      	add	sp, #68	; 0x44
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	4642      	mov	r2, r8
 800552e:	4653      	mov	r3, sl
 8005530:	4640      	mov	r0, r8
 8005532:	4651      	mov	r1, sl
 8005534:	f7fb fa6a 	bl	8000a0c <__aeabi_dcmpun>
 8005538:	b148      	cbz	r0, 800554e <_printf_float+0xe2>
 800553a:	f1ba 0f00 	cmp.w	sl, #0
 800553e:	bfb8      	it	lt
 8005540:	232d      	movlt	r3, #45	; 0x2d
 8005542:	4880      	ldr	r0, [pc, #512]	; (8005744 <_printf_float+0x2d8>)
 8005544:	bfb8      	it	lt
 8005546:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800554a:	4b7f      	ldr	r3, [pc, #508]	; (8005748 <_printf_float+0x2dc>)
 800554c:	e7d3      	b.n	80054f6 <_printf_float+0x8a>
 800554e:	6863      	ldr	r3, [r4, #4]
 8005550:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	d142      	bne.n	80055de <_printf_float+0x172>
 8005558:	2306      	movs	r3, #6
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	9206      	str	r2, [sp, #24]
 8005560:	aa0e      	add	r2, sp, #56	; 0x38
 8005562:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005566:	aa0d      	add	r2, sp, #52	; 0x34
 8005568:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800556c:	9203      	str	r2, [sp, #12]
 800556e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005572:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	4642      	mov	r2, r8
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4628      	mov	r0, r5
 8005580:	4653      	mov	r3, sl
 8005582:	910b      	str	r1, [sp, #44]	; 0x2c
 8005584:	f7ff fed4 	bl	8005330 <__cvt>
 8005588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800558a:	4680      	mov	r8, r0
 800558c:	2947      	cmp	r1, #71	; 0x47
 800558e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005590:	d108      	bne.n	80055a4 <_printf_float+0x138>
 8005592:	1cc8      	adds	r0, r1, #3
 8005594:	db02      	blt.n	800559c <_printf_float+0x130>
 8005596:	6863      	ldr	r3, [r4, #4]
 8005598:	4299      	cmp	r1, r3
 800559a:	dd40      	ble.n	800561e <_printf_float+0x1b2>
 800559c:	f1a9 0902 	sub.w	r9, r9, #2
 80055a0:	fa5f f989 	uxtb.w	r9, r9
 80055a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055a8:	d81f      	bhi.n	80055ea <_printf_float+0x17e>
 80055aa:	464a      	mov	r2, r9
 80055ac:	3901      	subs	r1, #1
 80055ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055b2:	910d      	str	r1, [sp, #52]	; 0x34
 80055b4:	f7ff ff1b 	bl	80053ee <__exponent>
 80055b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ba:	4682      	mov	sl, r0
 80055bc:	1813      	adds	r3, r2, r0
 80055be:	2a01      	cmp	r2, #1
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	dc02      	bgt.n	80055ca <_printf_float+0x15e>
 80055c4:	6822      	ldr	r2, [r4, #0]
 80055c6:	07d2      	lsls	r2, r2, #31
 80055c8:	d501      	bpl.n	80055ce <_printf_float+0x162>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d09b      	beq.n	800550e <_printf_float+0xa2>
 80055d6:	232d      	movs	r3, #45	; 0x2d
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	e797      	b.n	800550e <_printf_float+0xa2>
 80055de:	2947      	cmp	r1, #71	; 0x47
 80055e0:	d1bc      	bne.n	800555c <_printf_float+0xf0>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1ba      	bne.n	800555c <_printf_float+0xf0>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e7b7      	b.n	800555a <_printf_float+0xee>
 80055ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80055ee:	d118      	bne.n	8005622 <_printf_float+0x1b6>
 80055f0:	2900      	cmp	r1, #0
 80055f2:	6863      	ldr	r3, [r4, #4]
 80055f4:	dd0b      	ble.n	800560e <_printf_float+0x1a2>
 80055f6:	6121      	str	r1, [r4, #16]
 80055f8:	b913      	cbnz	r3, 8005600 <_printf_float+0x194>
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	07d0      	lsls	r0, r2, #31
 80055fe:	d502      	bpl.n	8005606 <_printf_float+0x19a>
 8005600:	3301      	adds	r3, #1
 8005602:	440b      	add	r3, r1
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	f04f 0a00 	mov.w	sl, #0
 800560a:	65a1      	str	r1, [r4, #88]	; 0x58
 800560c:	e7df      	b.n	80055ce <_printf_float+0x162>
 800560e:	b913      	cbnz	r3, 8005616 <_printf_float+0x1aa>
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	07d2      	lsls	r2, r2, #31
 8005614:	d501      	bpl.n	800561a <_printf_float+0x1ae>
 8005616:	3302      	adds	r3, #2
 8005618:	e7f4      	b.n	8005604 <_printf_float+0x198>
 800561a:	2301      	movs	r3, #1
 800561c:	e7f2      	b.n	8005604 <_printf_float+0x198>
 800561e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005624:	4299      	cmp	r1, r3
 8005626:	db05      	blt.n	8005634 <_printf_float+0x1c8>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	6121      	str	r1, [r4, #16]
 800562c:	07d8      	lsls	r0, r3, #31
 800562e:	d5ea      	bpl.n	8005606 <_printf_float+0x19a>
 8005630:	1c4b      	adds	r3, r1, #1
 8005632:	e7e7      	b.n	8005604 <_printf_float+0x198>
 8005634:	2900      	cmp	r1, #0
 8005636:	bfcc      	ite	gt
 8005638:	2201      	movgt	r2, #1
 800563a:	f1c1 0202 	rsble	r2, r1, #2
 800563e:	4413      	add	r3, r2
 8005640:	e7e0      	b.n	8005604 <_printf_float+0x198>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	055a      	lsls	r2, r3, #21
 8005646:	d407      	bmi.n	8005658 <_printf_float+0x1ec>
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	4642      	mov	r2, r8
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	d12b      	bne.n	80056ae <_printf_float+0x242>
 8005656:	e764      	b.n	8005522 <_printf_float+0xb6>
 8005658:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800565c:	f240 80dd 	bls.w	800581a <_printf_float+0x3ae>
 8005660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005664:	2200      	movs	r2, #0
 8005666:	2300      	movs	r3, #0
 8005668:	f7fb f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800566c:	2800      	cmp	r0, #0
 800566e:	d033      	beq.n	80056d8 <_printf_float+0x26c>
 8005670:	2301      	movs	r3, #1
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	4a35      	ldr	r2, [pc, #212]	; (800574c <_printf_float+0x2e0>)
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f af51 	beq.w	8005522 <_printf_float+0xb6>
 8005680:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005684:	429a      	cmp	r2, r3
 8005686:	db02      	blt.n	800568e <_printf_float+0x222>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	07d8      	lsls	r0, r3, #31
 800568c:	d50f      	bpl.n	80056ae <_printf_float+0x242>
 800568e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	f43f af42 	beq.w	8005522 <_printf_float+0xb6>
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	f104 091a 	add.w	r9, r4, #26
 80056a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a8:	3b01      	subs	r3, #1
 80056aa:	4543      	cmp	r3, r8
 80056ac:	dc09      	bgt.n	80056c2 <_printf_float+0x256>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	079b      	lsls	r3, r3, #30
 80056b2:	f100 8102 	bmi.w	80058ba <_printf_float+0x44e>
 80056b6:	68e0      	ldr	r0, [r4, #12]
 80056b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056ba:	4298      	cmp	r0, r3
 80056bc:	bfb8      	it	lt
 80056be:	4618      	movlt	r0, r3
 80056c0:	e731      	b.n	8005526 <_printf_float+0xba>
 80056c2:	2301      	movs	r3, #1
 80056c4:	464a      	mov	r2, r9
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f af28 	beq.w	8005522 <_printf_float+0xb6>
 80056d2:	f108 0801 	add.w	r8, r8, #1
 80056d6:	e7e6      	b.n	80056a6 <_printf_float+0x23a>
 80056d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dc38      	bgt.n	8005750 <_printf_float+0x2e4>
 80056de:	2301      	movs	r3, #1
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <_printf_float+0x2e0>)
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	f43f af1a 	beq.w	8005522 <_printf_float+0xb6>
 80056ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056f2:	4313      	orrs	r3, r2
 80056f4:	d102      	bne.n	80056fc <_printf_float+0x290>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	07d9      	lsls	r1, r3, #31
 80056fa:	d5d8      	bpl.n	80056ae <_printf_float+0x242>
 80056fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005700:	4631      	mov	r1, r6
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	f43f af0b 	beq.w	8005522 <_printf_float+0xb6>
 800570c:	f04f 0900 	mov.w	r9, #0
 8005710:	f104 0a1a 	add.w	sl, r4, #26
 8005714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005716:	425b      	negs	r3, r3
 8005718:	454b      	cmp	r3, r9
 800571a:	dc01      	bgt.n	8005720 <_printf_float+0x2b4>
 800571c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800571e:	e794      	b.n	800564a <_printf_float+0x1de>
 8005720:	2301      	movs	r3, #1
 8005722:	4652      	mov	r2, sl
 8005724:	4631      	mov	r1, r6
 8005726:	4628      	mov	r0, r5
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	f43f aef9 	beq.w	8005522 <_printf_float+0xb6>
 8005730:	f109 0901 	add.w	r9, r9, #1
 8005734:	e7ee      	b.n	8005714 <_printf_float+0x2a8>
 8005736:	bf00      	nop
 8005738:	7fefffff 	.word	0x7fefffff
 800573c:	0800839c 	.word	0x0800839c
 8005740:	080083a0 	.word	0x080083a0
 8005744:	080083a8 	.word	0x080083a8
 8005748:	080083a4 	.word	0x080083a4
 800574c:	080083ac 	.word	0x080083ac
 8005750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005754:	429a      	cmp	r2, r3
 8005756:	bfa8      	it	ge
 8005758:	461a      	movge	r2, r3
 800575a:	2a00      	cmp	r2, #0
 800575c:	4691      	mov	r9, r2
 800575e:	dc37      	bgt.n	80057d0 <_printf_float+0x364>
 8005760:	f04f 0b00 	mov.w	fp, #0
 8005764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005768:	f104 021a 	add.w	r2, r4, #26
 800576c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005770:	ebaa 0309 	sub.w	r3, sl, r9
 8005774:	455b      	cmp	r3, fp
 8005776:	dc33      	bgt.n	80057e0 <_printf_float+0x374>
 8005778:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800577c:	429a      	cmp	r2, r3
 800577e:	db3b      	blt.n	80057f8 <_printf_float+0x38c>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	07da      	lsls	r2, r3, #31
 8005784:	d438      	bmi.n	80057f8 <_printf_float+0x38c>
 8005786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005788:	990d      	ldr	r1, [sp, #52]	; 0x34
 800578a:	eba3 020a 	sub.w	r2, r3, sl
 800578e:	eba3 0901 	sub.w	r9, r3, r1
 8005792:	4591      	cmp	r9, r2
 8005794:	bfa8      	it	ge
 8005796:	4691      	movge	r9, r2
 8005798:	f1b9 0f00 	cmp.w	r9, #0
 800579c:	dc34      	bgt.n	8005808 <_printf_float+0x39c>
 800579e:	f04f 0800 	mov.w	r8, #0
 80057a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057a6:	f104 0a1a 	add.w	sl, r4, #26
 80057aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	eba3 0309 	sub.w	r3, r3, r9
 80057b4:	4543      	cmp	r3, r8
 80057b6:	f77f af7a 	ble.w	80056ae <_printf_float+0x242>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4652      	mov	r2, sl
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f aeac 	beq.w	8005522 <_printf_float+0xb6>
 80057ca:	f108 0801 	add.w	r8, r8, #1
 80057ce:	e7ec      	b.n	80057aa <_printf_float+0x33e>
 80057d0:	4613      	mov	r3, r2
 80057d2:	4631      	mov	r1, r6
 80057d4:	4642      	mov	r2, r8
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	d1c0      	bne.n	8005760 <_printf_float+0x2f4>
 80057de:	e6a0      	b.n	8005522 <_printf_float+0xb6>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f ae99 	beq.w	8005522 <_printf_float+0xb6>
 80057f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057f2:	f10b 0b01 	add.w	fp, fp, #1
 80057f6:	e7b9      	b.n	800576c <_printf_float+0x300>
 80057f8:	4631      	mov	r1, r6
 80057fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	d1bf      	bne.n	8005786 <_printf_float+0x31a>
 8005806:	e68c      	b.n	8005522 <_printf_float+0xb6>
 8005808:	464b      	mov	r3, r9
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	eb08 020a 	add.w	r2, r8, sl
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	d1c2      	bne.n	800579e <_printf_float+0x332>
 8005818:	e683      	b.n	8005522 <_printf_float+0xb6>
 800581a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800581c:	2a01      	cmp	r2, #1
 800581e:	dc01      	bgt.n	8005824 <_printf_float+0x3b8>
 8005820:	07db      	lsls	r3, r3, #31
 8005822:	d537      	bpl.n	8005894 <_printf_float+0x428>
 8005824:	2301      	movs	r3, #1
 8005826:	4642      	mov	r2, r8
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f ae77 	beq.w	8005522 <_printf_float+0xb6>
 8005834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f ae6f 	beq.w	8005522 <_printf_float+0xb6>
 8005844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005848:	2200      	movs	r2, #0
 800584a:	2300      	movs	r3, #0
 800584c:	f7fb f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 8005850:	b9d8      	cbnz	r0, 800588a <_printf_float+0x41e>
 8005852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005854:	f108 0201 	add.w	r2, r8, #1
 8005858:	3b01      	subs	r3, #1
 800585a:	4631      	mov	r1, r6
 800585c:	4628      	mov	r0, r5
 800585e:	47b8      	blx	r7
 8005860:	3001      	adds	r0, #1
 8005862:	d10e      	bne.n	8005882 <_printf_float+0x416>
 8005864:	e65d      	b.n	8005522 <_printf_float+0xb6>
 8005866:	2301      	movs	r3, #1
 8005868:	464a      	mov	r2, r9
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	f43f ae56 	beq.w	8005522 <_printf_float+0xb6>
 8005876:	f108 0801 	add.w	r8, r8, #1
 800587a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800587c:	3b01      	subs	r3, #1
 800587e:	4543      	cmp	r3, r8
 8005880:	dcf1      	bgt.n	8005866 <_printf_float+0x3fa>
 8005882:	4653      	mov	r3, sl
 8005884:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005888:	e6e0      	b.n	800564c <_printf_float+0x1e0>
 800588a:	f04f 0800 	mov.w	r8, #0
 800588e:	f104 091a 	add.w	r9, r4, #26
 8005892:	e7f2      	b.n	800587a <_printf_float+0x40e>
 8005894:	2301      	movs	r3, #1
 8005896:	4642      	mov	r2, r8
 8005898:	e7df      	b.n	800585a <_printf_float+0x3ee>
 800589a:	2301      	movs	r3, #1
 800589c:	464a      	mov	r2, r9
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	f43f ae3c 	beq.w	8005522 <_printf_float+0xb6>
 80058aa:	f108 0801 	add.w	r8, r8, #1
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058b2:	1a5b      	subs	r3, r3, r1
 80058b4:	4543      	cmp	r3, r8
 80058b6:	dcf0      	bgt.n	800589a <_printf_float+0x42e>
 80058b8:	e6fd      	b.n	80056b6 <_printf_float+0x24a>
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	f104 0919 	add.w	r9, r4, #25
 80058c2:	e7f4      	b.n	80058ae <_printf_float+0x442>

080058c4 <_printf_common>:
 80058c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	4616      	mov	r6, r2
 80058ca:	4699      	mov	r9, r3
 80058cc:	688a      	ldr	r2, [r1, #8]
 80058ce:	690b      	ldr	r3, [r1, #16]
 80058d0:	4607      	mov	r7, r0
 80058d2:	4293      	cmp	r3, r2
 80058d4:	bfb8      	it	lt
 80058d6:	4613      	movlt	r3, r2
 80058d8:	6033      	str	r3, [r6, #0]
 80058da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058de:	460c      	mov	r4, r1
 80058e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058e4:	b10a      	cbz	r2, 80058ea <_printf_common+0x26>
 80058e6:	3301      	adds	r3, #1
 80058e8:	6033      	str	r3, [r6, #0]
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	0699      	lsls	r1, r3, #26
 80058ee:	bf42      	ittt	mi
 80058f0:	6833      	ldrmi	r3, [r6, #0]
 80058f2:	3302      	addmi	r3, #2
 80058f4:	6033      	strmi	r3, [r6, #0]
 80058f6:	6825      	ldr	r5, [r4, #0]
 80058f8:	f015 0506 	ands.w	r5, r5, #6
 80058fc:	d106      	bne.n	800590c <_printf_common+0x48>
 80058fe:	f104 0a19 	add.w	sl, r4, #25
 8005902:	68e3      	ldr	r3, [r4, #12]
 8005904:	6832      	ldr	r2, [r6, #0]
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	42ab      	cmp	r3, r5
 800590a:	dc28      	bgt.n	800595e <_printf_common+0x9a>
 800590c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005910:	1e13      	subs	r3, r2, #0
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	bf18      	it	ne
 8005916:	2301      	movne	r3, #1
 8005918:	0692      	lsls	r2, r2, #26
 800591a:	d42d      	bmi.n	8005978 <_printf_common+0xb4>
 800591c:	4649      	mov	r1, r9
 800591e:	4638      	mov	r0, r7
 8005920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005924:	47c0      	blx	r8
 8005926:	3001      	adds	r0, #1
 8005928:	d020      	beq.n	800596c <_printf_common+0xa8>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	68e5      	ldr	r5, [r4, #12]
 800592e:	f003 0306 	and.w	r3, r3, #6
 8005932:	2b04      	cmp	r3, #4
 8005934:	bf18      	it	ne
 8005936:	2500      	movne	r5, #0
 8005938:	6832      	ldr	r2, [r6, #0]
 800593a:	f04f 0600 	mov.w	r6, #0
 800593e:	68a3      	ldr	r3, [r4, #8]
 8005940:	bf08      	it	eq
 8005942:	1aad      	subeq	r5, r5, r2
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	bf08      	it	eq
 8005948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800594c:	4293      	cmp	r3, r2
 800594e:	bfc4      	itt	gt
 8005950:	1a9b      	subgt	r3, r3, r2
 8005952:	18ed      	addgt	r5, r5, r3
 8005954:	341a      	adds	r4, #26
 8005956:	42b5      	cmp	r5, r6
 8005958:	d11a      	bne.n	8005990 <_printf_common+0xcc>
 800595a:	2000      	movs	r0, #0
 800595c:	e008      	b.n	8005970 <_printf_common+0xac>
 800595e:	2301      	movs	r3, #1
 8005960:	4652      	mov	r2, sl
 8005962:	4649      	mov	r1, r9
 8005964:	4638      	mov	r0, r7
 8005966:	47c0      	blx	r8
 8005968:	3001      	adds	r0, #1
 800596a:	d103      	bne.n	8005974 <_printf_common+0xb0>
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005974:	3501      	adds	r5, #1
 8005976:	e7c4      	b.n	8005902 <_printf_common+0x3e>
 8005978:	2030      	movs	r0, #48	; 0x30
 800597a:	18e1      	adds	r1, r4, r3
 800597c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005986:	4422      	add	r2, r4
 8005988:	3302      	adds	r3, #2
 800598a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800598e:	e7c5      	b.n	800591c <_printf_common+0x58>
 8005990:	2301      	movs	r3, #1
 8005992:	4622      	mov	r2, r4
 8005994:	4649      	mov	r1, r9
 8005996:	4638      	mov	r0, r7
 8005998:	47c0      	blx	r8
 800599a:	3001      	adds	r0, #1
 800599c:	d0e6      	beq.n	800596c <_printf_common+0xa8>
 800599e:	3601      	adds	r6, #1
 80059a0:	e7d9      	b.n	8005956 <_printf_common+0x92>
	...

080059a4 <_printf_i>:
 80059a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	7e0f      	ldrb	r7, [r1, #24]
 80059aa:	4691      	mov	r9, r2
 80059ac:	2f78      	cmp	r7, #120	; 0x78
 80059ae:	4680      	mov	r8, r0
 80059b0:	460c      	mov	r4, r1
 80059b2:	469a      	mov	sl, r3
 80059b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ba:	d807      	bhi.n	80059cc <_printf_i+0x28>
 80059bc:	2f62      	cmp	r7, #98	; 0x62
 80059be:	d80a      	bhi.n	80059d6 <_printf_i+0x32>
 80059c0:	2f00      	cmp	r7, #0
 80059c2:	f000 80d9 	beq.w	8005b78 <_printf_i+0x1d4>
 80059c6:	2f58      	cmp	r7, #88	; 0x58
 80059c8:	f000 80a4 	beq.w	8005b14 <_printf_i+0x170>
 80059cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059d4:	e03a      	b.n	8005a4c <_printf_i+0xa8>
 80059d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059da:	2b15      	cmp	r3, #21
 80059dc:	d8f6      	bhi.n	80059cc <_printf_i+0x28>
 80059de:	a101      	add	r1, pc, #4	; (adr r1, 80059e4 <_printf_i+0x40>)
 80059e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059e4:	08005a3d 	.word	0x08005a3d
 80059e8:	08005a51 	.word	0x08005a51
 80059ec:	080059cd 	.word	0x080059cd
 80059f0:	080059cd 	.word	0x080059cd
 80059f4:	080059cd 	.word	0x080059cd
 80059f8:	080059cd 	.word	0x080059cd
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	080059cd 	.word	0x080059cd
 8005a04:	080059cd 	.word	0x080059cd
 8005a08:	080059cd 	.word	0x080059cd
 8005a0c:	080059cd 	.word	0x080059cd
 8005a10:	08005b5f 	.word	0x08005b5f
 8005a14:	08005a81 	.word	0x08005a81
 8005a18:	08005b41 	.word	0x08005b41
 8005a1c:	080059cd 	.word	0x080059cd
 8005a20:	080059cd 	.word	0x080059cd
 8005a24:	08005b81 	.word	0x08005b81
 8005a28:	080059cd 	.word	0x080059cd
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	080059cd 	.word	0x080059cd
 8005a34:	080059cd 	.word	0x080059cd
 8005a38:	08005b49 	.word	0x08005b49
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	1d1a      	adds	r2, r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	602a      	str	r2, [r5, #0]
 8005a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0a4      	b.n	8005b9a <_printf_i+0x1f6>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	6829      	ldr	r1, [r5, #0]
 8005a54:	0606      	lsls	r6, r0, #24
 8005a56:	f101 0304 	add.w	r3, r1, #4
 8005a5a:	d50a      	bpl.n	8005a72 <_printf_i+0xce>
 8005a5c:	680e      	ldr	r6, [r1, #0]
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	2e00      	cmp	r6, #0
 8005a62:	da03      	bge.n	8005a6c <_printf_i+0xc8>
 8005a64:	232d      	movs	r3, #45	; 0x2d
 8005a66:	4276      	negs	r6, r6
 8005a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6c:	230a      	movs	r3, #10
 8005a6e:	485e      	ldr	r0, [pc, #376]	; (8005be8 <_printf_i+0x244>)
 8005a70:	e019      	b.n	8005aa6 <_printf_i+0x102>
 8005a72:	680e      	ldr	r6, [r1, #0]
 8005a74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	bf18      	it	ne
 8005a7c:	b236      	sxthne	r6, r6
 8005a7e:	e7ef      	b.n	8005a60 <_printf_i+0xbc>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	1d19      	adds	r1, r3, #4
 8005a86:	6029      	str	r1, [r5, #0]
 8005a88:	0601      	lsls	r1, r0, #24
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0xec>
 8005a8c:	681e      	ldr	r6, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0xf2>
 8005a90:	0646      	lsls	r6, r0, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0xe8>
 8005a94:	881e      	ldrh	r6, [r3, #0]
 8005a96:	2f6f      	cmp	r7, #111	; 0x6f
 8005a98:	bf0c      	ite	eq
 8005a9a:	2308      	moveq	r3, #8
 8005a9c:	230a      	movne	r3, #10
 8005a9e:	4852      	ldr	r0, [pc, #328]	; (8005be8 <_printf_i+0x244>)
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aa6:	6865      	ldr	r5, [r4, #4]
 8005aa8:	2d00      	cmp	r5, #0
 8005aaa:	bfa8      	it	ge
 8005aac:	6821      	ldrge	r1, [r4, #0]
 8005aae:	60a5      	str	r5, [r4, #8]
 8005ab0:	bfa4      	itt	ge
 8005ab2:	f021 0104 	bicge.w	r1, r1, #4
 8005ab6:	6021      	strge	r1, [r4, #0]
 8005ab8:	b90e      	cbnz	r6, 8005abe <_printf_i+0x11a>
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	d04d      	beq.n	8005b5a <_printf_i+0x1b6>
 8005abe:	4615      	mov	r5, r2
 8005ac0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ac4:	fb03 6711 	mls	r7, r3, r1, r6
 8005ac8:	5dc7      	ldrb	r7, [r0, r7]
 8005aca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ace:	4637      	mov	r7, r6
 8005ad0:	42bb      	cmp	r3, r7
 8005ad2:	460e      	mov	r6, r1
 8005ad4:	d9f4      	bls.n	8005ac0 <_printf_i+0x11c>
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d10b      	bne.n	8005af2 <_printf_i+0x14e>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	07de      	lsls	r6, r3, #31
 8005ade:	d508      	bpl.n	8005af2 <_printf_i+0x14e>
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	6861      	ldr	r1, [r4, #4]
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	bfde      	ittt	le
 8005ae8:	2330      	movle	r3, #48	; 0x30
 8005aea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005af2:	1b52      	subs	r2, r2, r5
 8005af4:	6122      	str	r2, [r4, #16]
 8005af6:	464b      	mov	r3, r9
 8005af8:	4621      	mov	r1, r4
 8005afa:	4640      	mov	r0, r8
 8005afc:	f8cd a000 	str.w	sl, [sp]
 8005b00:	aa03      	add	r2, sp, #12
 8005b02:	f7ff fedf 	bl	80058c4 <_printf_common>
 8005b06:	3001      	adds	r0, #1
 8005b08:	d14c      	bne.n	8005ba4 <_printf_i+0x200>
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0e:	b004      	add	sp, #16
 8005b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b14:	4834      	ldr	r0, [pc, #208]	; (8005be8 <_printf_i+0x244>)
 8005b16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b1a:	6829      	ldr	r1, [r5, #0]
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b22:	6029      	str	r1, [r5, #0]
 8005b24:	061d      	lsls	r5, r3, #24
 8005b26:	d514      	bpl.n	8005b52 <_printf_i+0x1ae>
 8005b28:	07df      	lsls	r7, r3, #31
 8005b2a:	bf44      	itt	mi
 8005b2c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b30:	6023      	strmi	r3, [r4, #0]
 8005b32:	b91e      	cbnz	r6, 8005b3c <_printf_i+0x198>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	f023 0320 	bic.w	r3, r3, #32
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	e7af      	b.n	8005aa0 <_printf_i+0xfc>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	f043 0320 	orr.w	r3, r3, #32
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	2378      	movs	r3, #120	; 0x78
 8005b4a:	4828      	ldr	r0, [pc, #160]	; (8005bec <_printf_i+0x248>)
 8005b4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b50:	e7e3      	b.n	8005b1a <_printf_i+0x176>
 8005b52:	0659      	lsls	r1, r3, #25
 8005b54:	bf48      	it	mi
 8005b56:	b2b6      	uxthmi	r6, r6
 8005b58:	e7e6      	b.n	8005b28 <_printf_i+0x184>
 8005b5a:	4615      	mov	r5, r2
 8005b5c:	e7bb      	b.n	8005ad6 <_printf_i+0x132>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	6826      	ldr	r6, [r4, #0]
 8005b62:	1d18      	adds	r0, r3, #4
 8005b64:	6961      	ldr	r1, [r4, #20]
 8005b66:	6028      	str	r0, [r5, #0]
 8005b68:	0635      	lsls	r5, r6, #24
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	d501      	bpl.n	8005b72 <_printf_i+0x1ce>
 8005b6e:	6019      	str	r1, [r3, #0]
 8005b70:	e002      	b.n	8005b78 <_printf_i+0x1d4>
 8005b72:	0670      	lsls	r0, r6, #25
 8005b74:	d5fb      	bpl.n	8005b6e <_printf_i+0x1ca>
 8005b76:	8019      	strh	r1, [r3, #0]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4615      	mov	r5, r2
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	e7ba      	b.n	8005af6 <_printf_i+0x152>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	2100      	movs	r1, #0
 8005b84:	1d1a      	adds	r2, r3, #4
 8005b86:	602a      	str	r2, [r5, #0]
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f000 feb5 	bl	80068fc <memchr>
 8005b92:	b108      	cbz	r0, 8005b98 <_printf_i+0x1f4>
 8005b94:	1b40      	subs	r0, r0, r5
 8005b96:	6060      	str	r0, [r4, #4]
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	6123      	str	r3, [r4, #16]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba2:	e7a8      	b.n	8005af6 <_printf_i+0x152>
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	47d0      	blx	sl
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d0ab      	beq.n	8005b0a <_printf_i+0x166>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	079b      	lsls	r3, r3, #30
 8005bb6:	d413      	bmi.n	8005be0 <_printf_i+0x23c>
 8005bb8:	68e0      	ldr	r0, [r4, #12]
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	4298      	cmp	r0, r3
 8005bbe:	bfb8      	it	lt
 8005bc0:	4618      	movlt	r0, r3
 8005bc2:	e7a4      	b.n	8005b0e <_printf_i+0x16a>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	4649      	mov	r1, r9
 8005bca:	4640      	mov	r0, r8
 8005bcc:	47d0      	blx	sl
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d09b      	beq.n	8005b0a <_printf_i+0x166>
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	68e3      	ldr	r3, [r4, #12]
 8005bd6:	9903      	ldr	r1, [sp, #12]
 8005bd8:	1a5b      	subs	r3, r3, r1
 8005bda:	42ab      	cmp	r3, r5
 8005bdc:	dcf2      	bgt.n	8005bc4 <_printf_i+0x220>
 8005bde:	e7eb      	b.n	8005bb8 <_printf_i+0x214>
 8005be0:	2500      	movs	r5, #0
 8005be2:	f104 0619 	add.w	r6, r4, #25
 8005be6:	e7f5      	b.n	8005bd4 <_printf_i+0x230>
 8005be8:	080083ae 	.word	0x080083ae
 8005bec:	080083bf 	.word	0x080083bf

08005bf0 <quorem>:
 8005bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	6903      	ldr	r3, [r0, #16]
 8005bf6:	690c      	ldr	r4, [r1, #16]
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	f2c0 8082 	blt.w	8005d04 <quorem+0x114>
 8005c00:	3c01      	subs	r4, #1
 8005c02:	f100 0514 	add.w	r5, r0, #20
 8005c06:	f101 0814 	add.w	r8, r1, #20
 8005c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c28:	d331      	bcc.n	8005c8e <quorem+0x9e>
 8005c2a:	f04f 0e00 	mov.w	lr, #0
 8005c2e:	4640      	mov	r0, r8
 8005c30:	46ac      	mov	ip, r5
 8005c32:	46f2      	mov	sl, lr
 8005c34:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c38:	b293      	uxth	r3, r2
 8005c3a:	fb06 e303 	mla	r3, r6, r3, lr
 8005c3e:	0c12      	lsrs	r2, r2, #16
 8005c40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	fb06 e202 	mla	r2, r6, r2, lr
 8005c4a:	ebaa 0303 	sub.w	r3, sl, r3
 8005c4e:	f8dc a000 	ldr.w	sl, [ip]
 8005c52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c56:	fa1f fa8a 	uxth.w	sl, sl
 8005c5a:	4453      	add	r3, sl
 8005c5c:	f8dc a000 	ldr.w	sl, [ip]
 8005c60:	b292      	uxth	r2, r2
 8005c62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c70:	4581      	cmp	r9, r0
 8005c72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c76:	f84c 3b04 	str.w	r3, [ip], #4
 8005c7a:	d2db      	bcs.n	8005c34 <quorem+0x44>
 8005c7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c80:	b92b      	cbnz	r3, 8005c8e <quorem+0x9e>
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	3b04      	subs	r3, #4
 8005c86:	429d      	cmp	r5, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	d32f      	bcc.n	8005cec <quorem+0xfc>
 8005c8c:	613c      	str	r4, [r7, #16]
 8005c8e:	4638      	mov	r0, r7
 8005c90:	f001 f8ce 	bl	8006e30 <__mcmp>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	db25      	blt.n	8005ce4 <quorem+0xf4>
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f04f 0c00 	mov.w	ip, #0
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	f858 1b04 	ldr.w	r1, [r8], #4
 8005ca4:	f8d0 e000 	ldr.w	lr, [r0]
 8005ca8:	b28b      	uxth	r3, r1
 8005caa:	ebac 0303 	sub.w	r3, ip, r3
 8005cae:	fa1f f28e 	uxth.w	r2, lr
 8005cb2:	4413      	add	r3, r2
 8005cb4:	0c0a      	lsrs	r2, r1, #16
 8005cb6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cc4:	45c1      	cmp	r9, r8
 8005cc6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cca:	f840 3b04 	str.w	r3, [r0], #4
 8005cce:	d2e7      	bcs.n	8005ca0 <quorem+0xb0>
 8005cd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd8:	b922      	cbnz	r2, 8005ce4 <quorem+0xf4>
 8005cda:	3b04      	subs	r3, #4
 8005cdc:	429d      	cmp	r5, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	d30a      	bcc.n	8005cf8 <quorem+0x108>
 8005ce2:	613c      	str	r4, [r7, #16]
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	b003      	add	sp, #12
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	3b04      	subs	r3, #4
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d1cb      	bne.n	8005c8c <quorem+0x9c>
 8005cf4:	3c01      	subs	r4, #1
 8005cf6:	e7c6      	b.n	8005c86 <quorem+0x96>
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	3b04      	subs	r3, #4
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	d1f0      	bne.n	8005ce2 <quorem+0xf2>
 8005d00:	3c01      	subs	r4, #1
 8005d02:	e7eb      	b.n	8005cdc <quorem+0xec>
 8005d04:	2000      	movs	r0, #0
 8005d06:	e7ee      	b.n	8005ce6 <quorem+0xf6>

08005d08 <_dtoa_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	461f      	mov	r7, r3
 8005d10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d12:	b099      	sub	sp, #100	; 0x64
 8005d14:	4605      	mov	r5, r0
 8005d16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d1e:	b974      	cbnz	r4, 8005d3e <_dtoa_r+0x36>
 8005d20:	2010      	movs	r0, #16
 8005d22:	f000 fde3 	bl	80068ec <malloc>
 8005d26:	4602      	mov	r2, r0
 8005d28:	6268      	str	r0, [r5, #36]	; 0x24
 8005d2a:	b920      	cbnz	r0, 8005d36 <_dtoa_r+0x2e>
 8005d2c:	21ea      	movs	r1, #234	; 0xea
 8005d2e:	4ba8      	ldr	r3, [pc, #672]	; (8005fd0 <_dtoa_r+0x2c8>)
 8005d30:	48a8      	ldr	r0, [pc, #672]	; (8005fd4 <_dtoa_r+0x2cc>)
 8005d32:	f001 fa81 	bl	8007238 <__assert_func>
 8005d36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d3a:	6004      	str	r4, [r0, #0]
 8005d3c:	60c4      	str	r4, [r0, #12]
 8005d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	b151      	cbz	r1, 8005d5a <_dtoa_r+0x52>
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	2301      	movs	r3, #1
 8005d48:	4093      	lsls	r3, r2
 8005d4a:	604a      	str	r2, [r1, #4]
 8005d4c:	608b      	str	r3, [r1, #8]
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 fe30 	bl	80069b4 <_Bfree>
 8005d54:	2200      	movs	r2, #0
 8005d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	1e3b      	subs	r3, r7, #0
 8005d5c:	bfaf      	iteee	ge
 8005d5e:	2300      	movge	r3, #0
 8005d60:	2201      	movlt	r2, #1
 8005d62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	9305      	strlt	r3, [sp, #20]
 8005d68:	bfa8      	it	ge
 8005d6a:	f8c8 3000 	strge.w	r3, [r8]
 8005d6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d72:	4b99      	ldr	r3, [pc, #612]	; (8005fd8 <_dtoa_r+0x2d0>)
 8005d74:	bfb8      	it	lt
 8005d76:	f8c8 2000 	strlt.w	r2, [r8]
 8005d7a:	ea33 0309 	bics.w	r3, r3, r9
 8005d7e:	d119      	bne.n	8005db4 <_dtoa_r+0xac>
 8005d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d8c:	4333      	orrs	r3, r6
 8005d8e:	f000 857f 	beq.w	8006890 <_dtoa_r+0xb88>
 8005d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d94:	b953      	cbnz	r3, 8005dac <_dtoa_r+0xa4>
 8005d96:	4b91      	ldr	r3, [pc, #580]	; (8005fdc <_dtoa_r+0x2d4>)
 8005d98:	e022      	b.n	8005de0 <_dtoa_r+0xd8>
 8005d9a:	4b91      	ldr	r3, [pc, #580]	; (8005fe0 <_dtoa_r+0x2d8>)
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	9803      	ldr	r0, [sp, #12]
 8005da6:	b019      	add	sp, #100	; 0x64
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dac:	4b8b      	ldr	r3, [pc, #556]	; (8005fdc <_dtoa_r+0x2d4>)
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	3303      	adds	r3, #3
 8005db2:	e7f5      	b.n	8005da0 <_dtoa_r+0x98>
 8005db4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005db8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f7fa fdf0 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc8:	4680      	mov	r8, r0
 8005dca:	b158      	cbz	r0, 8005de4 <_dtoa_r+0xdc>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8558 	beq.w	800688a <_dtoa_r+0xb82>
 8005dda:	4882      	ldr	r0, [pc, #520]	; (8005fe4 <_dtoa_r+0x2dc>)
 8005ddc:	6018      	str	r0, [r3, #0]
 8005dde:	1e43      	subs	r3, r0, #1
 8005de0:	9303      	str	r3, [sp, #12]
 8005de2:	e7df      	b.n	8005da4 <_dtoa_r+0x9c>
 8005de4:	ab16      	add	r3, sp, #88	; 0x58
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	ab17      	add	r3, sp, #92	; 0x5c
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	4628      	mov	r0, r5
 8005dee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005df2:	f001 f8c5 	bl	8006f80 <__d2b>
 8005df6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dfa:	4683      	mov	fp, r0
 8005dfc:	2c00      	cmp	r4, #0
 8005dfe:	d07f      	beq.n	8005f00 <_dtoa_r+0x1f8>
 8005e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	4b72      	ldr	r3, [pc, #456]	; (8005fe8 <_dtoa_r+0x2e0>)
 8005e1e:	f7fa f9a3 	bl	8000168 <__aeabi_dsub>
 8005e22:	a365      	add	r3, pc, #404	; (adr r3, 8005fb8 <_dtoa_r+0x2b0>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fb56 	bl	80004d8 <__aeabi_dmul>
 8005e2c:	a364      	add	r3, pc, #400	; (adr r3, 8005fc0 <_dtoa_r+0x2b8>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa f99b 	bl	800016c <__adddf3>
 8005e36:	4606      	mov	r6, r0
 8005e38:	4620      	mov	r0, r4
 8005e3a:	460f      	mov	r7, r1
 8005e3c:	f7fa fae2 	bl	8000404 <__aeabi_i2d>
 8005e40:	a361      	add	r3, pc, #388	; (adr r3, 8005fc8 <_dtoa_r+0x2c0>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fb47 	bl	80004d8 <__aeabi_dmul>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4630      	mov	r0, r6
 8005e50:	4639      	mov	r1, r7
 8005e52:	f7fa f98b 	bl	800016c <__adddf3>
 8005e56:	4606      	mov	r6, r0
 8005e58:	460f      	mov	r7, r1
 8005e5a:	f7fa fded 	bl	8000a38 <__aeabi_d2iz>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4682      	mov	sl, r0
 8005e62:	2300      	movs	r3, #0
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7fa fda8 	bl	80009bc <__aeabi_dcmplt>
 8005e6c:	b148      	cbz	r0, 8005e82 <_dtoa_r+0x17a>
 8005e6e:	4650      	mov	r0, sl
 8005e70:	f7fa fac8 	bl	8000404 <__aeabi_i2d>
 8005e74:	4632      	mov	r2, r6
 8005e76:	463b      	mov	r3, r7
 8005e78:	f7fa fd96 	bl	80009a8 <__aeabi_dcmpeq>
 8005e7c:	b908      	cbnz	r0, 8005e82 <_dtoa_r+0x17a>
 8005e7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e82:	f1ba 0f16 	cmp.w	sl, #22
 8005e86:	d858      	bhi.n	8005f3a <_dtoa_r+0x232>
 8005e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e8c:	4b57      	ldr	r3, [pc, #348]	; (8005fec <_dtoa_r+0x2e4>)
 8005e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fd91 	bl	80009bc <__aeabi_dcmplt>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d04f      	beq.n	8005f3e <_dtoa_r+0x236>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ea4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ea6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ea8:	1b1c      	subs	r4, r3, r4
 8005eaa:	1e63      	subs	r3, r4, #1
 8005eac:	9309      	str	r3, [sp, #36]	; 0x24
 8005eae:	bf49      	itett	mi
 8005eb0:	f1c4 0301 	rsbmi	r3, r4, #1
 8005eb4:	2300      	movpl	r3, #0
 8005eb6:	9306      	strmi	r3, [sp, #24]
 8005eb8:	2300      	movmi	r3, #0
 8005eba:	bf54      	ite	pl
 8005ebc:	9306      	strpl	r3, [sp, #24]
 8005ebe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ec0:	f1ba 0f00 	cmp.w	sl, #0
 8005ec4:	db3d      	blt.n	8005f42 <_dtoa_r+0x23a>
 8005ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005ecc:	4453      	add	r3, sl
 8005ece:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ed6:	2b09      	cmp	r3, #9
 8005ed8:	f200 808c 	bhi.w	8005ff4 <_dtoa_r+0x2ec>
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	bfc4      	itt	gt
 8005ee0:	3b04      	subgt	r3, #4
 8005ee2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ee6:	bfc8      	it	gt
 8005ee8:	2400      	movgt	r4, #0
 8005eea:	f1a3 0302 	sub.w	r3, r3, #2
 8005eee:	bfd8      	it	le
 8005ef0:	2401      	movle	r4, #1
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	f200 808a 	bhi.w	800600c <_dtoa_r+0x304>
 8005ef8:	e8df f003 	tbb	[pc, r3]
 8005efc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005f00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f04:	441c      	add	r4, r3
 8005f06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	bfc3      	ittte	gt
 8005f0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f12:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005f16:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f1a:	f1c3 0320 	rsble	r3, r3, #32
 8005f1e:	bfc6      	itte	gt
 8005f20:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f24:	4318      	orrgt	r0, r3
 8005f26:	fa06 f003 	lslle.w	r0, r6, r3
 8005f2a:	f7fa fa5b 	bl	80003e4 <__aeabi_ui2d>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f34:	3c01      	subs	r4, #1
 8005f36:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f38:	e76f      	b.n	8005e1a <_dtoa_r+0x112>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7b2      	b.n	8005ea4 <_dtoa_r+0x19c>
 8005f3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f40:	e7b1      	b.n	8005ea6 <_dtoa_r+0x19e>
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	eba3 030a 	sub.w	r3, r3, sl
 8005f48:	9306      	str	r3, [sp, #24]
 8005f4a:	f1ca 0300 	rsb	r3, sl, #0
 8005f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f50:	2300      	movs	r3, #0
 8005f52:	930e      	str	r3, [sp, #56]	; 0x38
 8005f54:	e7be      	b.n	8005ed4 <_dtoa_r+0x1cc>
 8005f56:	2300      	movs	r3, #0
 8005f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dc58      	bgt.n	8006012 <_dtoa_r+0x30a>
 8005f60:	f04f 0901 	mov.w	r9, #1
 8005f64:	464b      	mov	r3, r9
 8005f66:	f8cd 9020 	str.w	r9, [sp, #32]
 8005f6a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005f6e:	2200      	movs	r2, #0
 8005f70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005f72:	6042      	str	r2, [r0, #4]
 8005f74:	2204      	movs	r2, #4
 8005f76:	f102 0614 	add.w	r6, r2, #20
 8005f7a:	429e      	cmp	r6, r3
 8005f7c:	6841      	ldr	r1, [r0, #4]
 8005f7e:	d94e      	bls.n	800601e <_dtoa_r+0x316>
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 fcd7 	bl	8006934 <_Balloc>
 8005f86:	9003      	str	r0, [sp, #12]
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d14c      	bne.n	8006026 <_dtoa_r+0x31e>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f92:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <_dtoa_r+0x2e8>)
 8005f94:	e6cc      	b.n	8005d30 <_dtoa_r+0x28>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e7de      	b.n	8005f58 <_dtoa_r+0x250>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fa0:	eb0a 0903 	add.w	r9, sl, r3
 8005fa4:	f109 0301 	add.w	r3, r9, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	9308      	str	r3, [sp, #32]
 8005fac:	bfb8      	it	lt
 8005fae:	2301      	movlt	r3, #1
 8005fb0:	e7dd      	b.n	8005f6e <_dtoa_r+0x266>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e7f2      	b.n	8005f9c <_dtoa_r+0x294>
 8005fb6:	bf00      	nop
 8005fb8:	636f4361 	.word	0x636f4361
 8005fbc:	3fd287a7 	.word	0x3fd287a7
 8005fc0:	8b60c8b3 	.word	0x8b60c8b3
 8005fc4:	3fc68a28 	.word	0x3fc68a28
 8005fc8:	509f79fb 	.word	0x509f79fb
 8005fcc:	3fd34413 	.word	0x3fd34413
 8005fd0:	080083dd 	.word	0x080083dd
 8005fd4:	080083f4 	.word	0x080083f4
 8005fd8:	7ff00000 	.word	0x7ff00000
 8005fdc:	080083d9 	.word	0x080083d9
 8005fe0:	080083d0 	.word	0x080083d0
 8005fe4:	080083ad 	.word	0x080083ad
 8005fe8:	3ff80000 	.word	0x3ff80000
 8005fec:	080084e8 	.word	0x080084e8
 8005ff0:	0800844f 	.word	0x0800844f
 8005ff4:	2401      	movs	r4, #1
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ffa:	9322      	str	r3, [sp, #136]	; 0x88
 8005ffc:	f04f 39ff 	mov.w	r9, #4294967295
 8006000:	2200      	movs	r2, #0
 8006002:	2312      	movs	r3, #18
 8006004:	f8cd 9020 	str.w	r9, [sp, #32]
 8006008:	9223      	str	r2, [sp, #140]	; 0x8c
 800600a:	e7b0      	b.n	8005f6e <_dtoa_r+0x266>
 800600c:	2301      	movs	r3, #1
 800600e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006010:	e7f4      	b.n	8005ffc <_dtoa_r+0x2f4>
 8006012:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006016:	464b      	mov	r3, r9
 8006018:	f8cd 9020 	str.w	r9, [sp, #32]
 800601c:	e7a7      	b.n	8005f6e <_dtoa_r+0x266>
 800601e:	3101      	adds	r1, #1
 8006020:	6041      	str	r1, [r0, #4]
 8006022:	0052      	lsls	r2, r2, #1
 8006024:	e7a7      	b.n	8005f76 <_dtoa_r+0x26e>
 8006026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006028:	9a03      	ldr	r2, [sp, #12]
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	9b08      	ldr	r3, [sp, #32]
 800602e:	2b0e      	cmp	r3, #14
 8006030:	f200 80a8 	bhi.w	8006184 <_dtoa_r+0x47c>
 8006034:	2c00      	cmp	r4, #0
 8006036:	f000 80a5 	beq.w	8006184 <_dtoa_r+0x47c>
 800603a:	f1ba 0f00 	cmp.w	sl, #0
 800603e:	dd34      	ble.n	80060aa <_dtoa_r+0x3a2>
 8006040:	4a9a      	ldr	r2, [pc, #616]	; (80062ac <_dtoa_r+0x5a4>)
 8006042:	f00a 030f 	and.w	r3, sl, #15
 8006046:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800604a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800604e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006052:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006056:	ea4f 142a 	mov.w	r4, sl, asr #4
 800605a:	d016      	beq.n	800608a <_dtoa_r+0x382>
 800605c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006060:	4b93      	ldr	r3, [pc, #588]	; (80062b0 <_dtoa_r+0x5a8>)
 8006062:	2703      	movs	r7, #3
 8006064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006068:	f7fa fb60 	bl	800072c <__aeabi_ddiv>
 800606c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006070:	f004 040f 	and.w	r4, r4, #15
 8006074:	4e8e      	ldr	r6, [pc, #568]	; (80062b0 <_dtoa_r+0x5a8>)
 8006076:	b954      	cbnz	r4, 800608e <_dtoa_r+0x386>
 8006078:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800607c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006080:	f7fa fb54 	bl	800072c <__aeabi_ddiv>
 8006084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006088:	e029      	b.n	80060de <_dtoa_r+0x3d6>
 800608a:	2702      	movs	r7, #2
 800608c:	e7f2      	b.n	8006074 <_dtoa_r+0x36c>
 800608e:	07e1      	lsls	r1, r4, #31
 8006090:	d508      	bpl.n	80060a4 <_dtoa_r+0x39c>
 8006092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006096:	e9d6 2300 	ldrd	r2, r3, [r6]
 800609a:	f7fa fa1d 	bl	80004d8 <__aeabi_dmul>
 800609e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060a2:	3701      	adds	r7, #1
 80060a4:	1064      	asrs	r4, r4, #1
 80060a6:	3608      	adds	r6, #8
 80060a8:	e7e5      	b.n	8006076 <_dtoa_r+0x36e>
 80060aa:	f000 80a5 	beq.w	80061f8 <_dtoa_r+0x4f0>
 80060ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060b2:	f1ca 0400 	rsb	r4, sl, #0
 80060b6:	4b7d      	ldr	r3, [pc, #500]	; (80062ac <_dtoa_r+0x5a4>)
 80060b8:	f004 020f 	and.w	r2, r4, #15
 80060bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa fa08 	bl	80004d8 <__aeabi_dmul>
 80060c8:	2702      	movs	r7, #2
 80060ca:	2300      	movs	r3, #0
 80060cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d0:	4e77      	ldr	r6, [pc, #476]	; (80062b0 <_dtoa_r+0x5a8>)
 80060d2:	1124      	asrs	r4, r4, #4
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	f040 8084 	bne.w	80061e2 <_dtoa_r+0x4da>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d2      	bne.n	8006084 <_dtoa_r+0x37c>
 80060de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 808b 	beq.w	80061fc <_dtoa_r+0x4f4>
 80060e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060f2:	2200      	movs	r2, #0
 80060f4:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <_dtoa_r+0x5ac>)
 80060f6:	f7fa fc61 	bl	80009bc <__aeabi_dcmplt>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d07e      	beq.n	80061fc <_dtoa_r+0x4f4>
 80060fe:	9b08      	ldr	r3, [sp, #32]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d07b      	beq.n	80061fc <_dtoa_r+0x4f4>
 8006104:	f1b9 0f00 	cmp.w	r9, #0
 8006108:	dd38      	ble.n	800617c <_dtoa_r+0x474>
 800610a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800610e:	2200      	movs	r2, #0
 8006110:	4b69      	ldr	r3, [pc, #420]	; (80062b8 <_dtoa_r+0x5b0>)
 8006112:	f7fa f9e1 	bl	80004d8 <__aeabi_dmul>
 8006116:	464c      	mov	r4, r9
 8006118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800611c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006120:	3701      	adds	r7, #1
 8006122:	4638      	mov	r0, r7
 8006124:	f7fa f96e 	bl	8000404 <__aeabi_i2d>
 8006128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800612c:	f7fa f9d4 	bl	80004d8 <__aeabi_dmul>
 8006130:	2200      	movs	r2, #0
 8006132:	4b62      	ldr	r3, [pc, #392]	; (80062bc <_dtoa_r+0x5b4>)
 8006134:	f7fa f81a 	bl	800016c <__adddf3>
 8006138:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800613c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006140:	9611      	str	r6, [sp, #68]	; 0x44
 8006142:	2c00      	cmp	r4, #0
 8006144:	d15d      	bne.n	8006202 <_dtoa_r+0x4fa>
 8006146:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800614a:	2200      	movs	r2, #0
 800614c:	4b5c      	ldr	r3, [pc, #368]	; (80062c0 <_dtoa_r+0x5b8>)
 800614e:	f7fa f80b 	bl	8000168 <__aeabi_dsub>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800615a:	4633      	mov	r3, r6
 800615c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800615e:	f7fa fc4b 	bl	80009f8 <__aeabi_dcmpgt>
 8006162:	2800      	cmp	r0, #0
 8006164:	f040 829c 	bne.w	80066a0 <_dtoa_r+0x998>
 8006168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800616c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800616e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006172:	f7fa fc23 	bl	80009bc <__aeabi_dcmplt>
 8006176:	2800      	cmp	r0, #0
 8006178:	f040 8290 	bne.w	800669c <_dtoa_r+0x994>
 800617c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006180:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006184:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006186:	2b00      	cmp	r3, #0
 8006188:	f2c0 8152 	blt.w	8006430 <_dtoa_r+0x728>
 800618c:	f1ba 0f0e 	cmp.w	sl, #14
 8006190:	f300 814e 	bgt.w	8006430 <_dtoa_r+0x728>
 8006194:	4b45      	ldr	r3, [pc, #276]	; (80062ac <_dtoa_r+0x5a4>)
 8006196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800619a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800619e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80061a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f280 80db 	bge.w	8006360 <_dtoa_r+0x658>
 80061aa:	9b08      	ldr	r3, [sp, #32]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f300 80d7 	bgt.w	8006360 <_dtoa_r+0x658>
 80061b2:	f040 8272 	bne.w	800669a <_dtoa_r+0x992>
 80061b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ba:	2200      	movs	r2, #0
 80061bc:	4b40      	ldr	r3, [pc, #256]	; (80062c0 <_dtoa_r+0x5b8>)
 80061be:	f7fa f98b 	bl	80004d8 <__aeabi_dmul>
 80061c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c6:	f7fa fc0d 	bl	80009e4 <__aeabi_dcmpge>
 80061ca:	9c08      	ldr	r4, [sp, #32]
 80061cc:	4626      	mov	r6, r4
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f040 8248 	bne.w	8006664 <_dtoa_r+0x95c>
 80061d4:	2331      	movs	r3, #49	; 0x31
 80061d6:	9f03      	ldr	r7, [sp, #12]
 80061d8:	f10a 0a01 	add.w	sl, sl, #1
 80061dc:	f807 3b01 	strb.w	r3, [r7], #1
 80061e0:	e244      	b.n	800666c <_dtoa_r+0x964>
 80061e2:	07e2      	lsls	r2, r4, #31
 80061e4:	d505      	bpl.n	80061f2 <_dtoa_r+0x4ea>
 80061e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061ea:	f7fa f975 	bl	80004d8 <__aeabi_dmul>
 80061ee:	2301      	movs	r3, #1
 80061f0:	3701      	adds	r7, #1
 80061f2:	1064      	asrs	r4, r4, #1
 80061f4:	3608      	adds	r6, #8
 80061f6:	e76d      	b.n	80060d4 <_dtoa_r+0x3cc>
 80061f8:	2702      	movs	r7, #2
 80061fa:	e770      	b.n	80060de <_dtoa_r+0x3d6>
 80061fc:	46d0      	mov	r8, sl
 80061fe:	9c08      	ldr	r4, [sp, #32]
 8006200:	e78f      	b.n	8006122 <_dtoa_r+0x41a>
 8006202:	9903      	ldr	r1, [sp, #12]
 8006204:	4b29      	ldr	r3, [pc, #164]	; (80062ac <_dtoa_r+0x5a4>)
 8006206:	4421      	add	r1, r4
 8006208:	9112      	str	r1, [sp, #72]	; 0x48
 800620a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800620c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006210:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006214:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006218:	2900      	cmp	r1, #0
 800621a:	d055      	beq.n	80062c8 <_dtoa_r+0x5c0>
 800621c:	2000      	movs	r0, #0
 800621e:	4929      	ldr	r1, [pc, #164]	; (80062c4 <_dtoa_r+0x5bc>)
 8006220:	f7fa fa84 	bl	800072c <__aeabi_ddiv>
 8006224:	463b      	mov	r3, r7
 8006226:	4632      	mov	r2, r6
 8006228:	f7f9 ff9e 	bl	8000168 <__aeabi_dsub>
 800622c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006230:	9f03      	ldr	r7, [sp, #12]
 8006232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006236:	f7fa fbff 	bl	8000a38 <__aeabi_d2iz>
 800623a:	4604      	mov	r4, r0
 800623c:	f7fa f8e2 	bl	8000404 <__aeabi_i2d>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006248:	f7f9 ff8e 	bl	8000168 <__aeabi_dsub>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	3430      	adds	r4, #48	; 0x30
 8006252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006256:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800625a:	f807 4b01 	strb.w	r4, [r7], #1
 800625e:	f7fa fbad 	bl	80009bc <__aeabi_dcmplt>
 8006262:	2800      	cmp	r0, #0
 8006264:	d174      	bne.n	8006350 <_dtoa_r+0x648>
 8006266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800626a:	2000      	movs	r0, #0
 800626c:	4911      	ldr	r1, [pc, #68]	; (80062b4 <_dtoa_r+0x5ac>)
 800626e:	f7f9 ff7b 	bl	8000168 <__aeabi_dsub>
 8006272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006276:	f7fa fba1 	bl	80009bc <__aeabi_dcmplt>
 800627a:	2800      	cmp	r0, #0
 800627c:	f040 80b7 	bne.w	80063ee <_dtoa_r+0x6e6>
 8006280:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006282:	429f      	cmp	r7, r3
 8006284:	f43f af7a 	beq.w	800617c <_dtoa_r+0x474>
 8006288:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800628c:	2200      	movs	r2, #0
 800628e:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <_dtoa_r+0x5b0>)
 8006290:	f7fa f922 	bl	80004d8 <__aeabi_dmul>
 8006294:	2200      	movs	r2, #0
 8006296:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800629a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <_dtoa_r+0x5b0>)
 80062a0:	f7fa f91a 	bl	80004d8 <__aeabi_dmul>
 80062a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062a8:	e7c3      	b.n	8006232 <_dtoa_r+0x52a>
 80062aa:	bf00      	nop
 80062ac:	080084e8 	.word	0x080084e8
 80062b0:	080084c0 	.word	0x080084c0
 80062b4:	3ff00000 	.word	0x3ff00000
 80062b8:	40240000 	.word	0x40240000
 80062bc:	401c0000 	.word	0x401c0000
 80062c0:	40140000 	.word	0x40140000
 80062c4:	3fe00000 	.word	0x3fe00000
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7fa f904 	bl	80004d8 <__aeabi_dmul>
 80062d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062d6:	9c03      	ldr	r4, [sp, #12]
 80062d8:	9314      	str	r3, [sp, #80]	; 0x50
 80062da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062de:	f7fa fbab 	bl	8000a38 <__aeabi_d2iz>
 80062e2:	9015      	str	r0, [sp, #84]	; 0x54
 80062e4:	f7fa f88e 	bl	8000404 <__aeabi_i2d>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f0:	f7f9 ff3a 	bl	8000168 <__aeabi_dsub>
 80062f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062f6:	4606      	mov	r6, r0
 80062f8:	3330      	adds	r3, #48	; 0x30
 80062fa:	f804 3b01 	strb.w	r3, [r4], #1
 80062fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006300:	460f      	mov	r7, r1
 8006302:	429c      	cmp	r4, r3
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	d124      	bne.n	8006354 <_dtoa_r+0x64c>
 800630a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800630e:	4bb0      	ldr	r3, [pc, #704]	; (80065d0 <_dtoa_r+0x8c8>)
 8006310:	f7f9 ff2c 	bl	800016c <__adddf3>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 8006320:	2800      	cmp	r0, #0
 8006322:	d163      	bne.n	80063ec <_dtoa_r+0x6e4>
 8006324:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006328:	2000      	movs	r0, #0
 800632a:	49a9      	ldr	r1, [pc, #676]	; (80065d0 <_dtoa_r+0x8c8>)
 800632c:	f7f9 ff1c 	bl	8000168 <__aeabi_dsub>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4630      	mov	r0, r6
 8006336:	4639      	mov	r1, r7
 8006338:	f7fa fb40 	bl	80009bc <__aeabi_dcmplt>
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f af1d 	beq.w	800617c <_dtoa_r+0x474>
 8006342:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006344:	1e7b      	subs	r3, r7, #1
 8006346:	9314      	str	r3, [sp, #80]	; 0x50
 8006348:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800634c:	2b30      	cmp	r3, #48	; 0x30
 800634e:	d0f8      	beq.n	8006342 <_dtoa_r+0x63a>
 8006350:	46c2      	mov	sl, r8
 8006352:	e03b      	b.n	80063cc <_dtoa_r+0x6c4>
 8006354:	4b9f      	ldr	r3, [pc, #636]	; (80065d4 <_dtoa_r+0x8cc>)
 8006356:	f7fa f8bf 	bl	80004d8 <__aeabi_dmul>
 800635a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800635e:	e7bc      	b.n	80062da <_dtoa_r+0x5d2>
 8006360:	9f03      	ldr	r7, [sp, #12]
 8006362:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800636a:	4640      	mov	r0, r8
 800636c:	4649      	mov	r1, r9
 800636e:	f7fa f9dd 	bl	800072c <__aeabi_ddiv>
 8006372:	f7fa fb61 	bl	8000a38 <__aeabi_d2iz>
 8006376:	4604      	mov	r4, r0
 8006378:	f7fa f844 	bl	8000404 <__aeabi_i2d>
 800637c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006380:	f7fa f8aa 	bl	80004d8 <__aeabi_dmul>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4640      	mov	r0, r8
 800638a:	4649      	mov	r1, r9
 800638c:	f7f9 feec 	bl	8000168 <__aeabi_dsub>
 8006390:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006394:	f807 6b01 	strb.w	r6, [r7], #1
 8006398:	9e03      	ldr	r6, [sp, #12]
 800639a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800639e:	1bbe      	subs	r6, r7, r6
 80063a0:	45b4      	cmp	ip, r6
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	d136      	bne.n	8006416 <_dtoa_r+0x70e>
 80063a8:	f7f9 fee0 	bl	800016c <__adddf3>
 80063ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b0:	4680      	mov	r8, r0
 80063b2:	4689      	mov	r9, r1
 80063b4:	f7fa fb20 	bl	80009f8 <__aeabi_dcmpgt>
 80063b8:	bb58      	cbnz	r0, 8006412 <_dtoa_r+0x70a>
 80063ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063be:	4640      	mov	r0, r8
 80063c0:	4649      	mov	r1, r9
 80063c2:	f7fa faf1 	bl	80009a8 <__aeabi_dcmpeq>
 80063c6:	b108      	cbz	r0, 80063cc <_dtoa_r+0x6c4>
 80063c8:	07e1      	lsls	r1, r4, #31
 80063ca:	d422      	bmi.n	8006412 <_dtoa_r+0x70a>
 80063cc:	4628      	mov	r0, r5
 80063ce:	4659      	mov	r1, fp
 80063d0:	f000 faf0 	bl	80069b4 <_Bfree>
 80063d4:	2300      	movs	r3, #0
 80063d6:	703b      	strb	r3, [r7, #0]
 80063d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80063da:	f10a 0001 	add.w	r0, sl, #1
 80063de:	6018      	str	r0, [r3, #0]
 80063e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f43f acde 	beq.w	8005da4 <_dtoa_r+0x9c>
 80063e8:	601f      	str	r7, [r3, #0]
 80063ea:	e4db      	b.n	8005da4 <_dtoa_r+0x9c>
 80063ec:	4627      	mov	r7, r4
 80063ee:	463b      	mov	r3, r7
 80063f0:	461f      	mov	r7, r3
 80063f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f6:	2a39      	cmp	r2, #57	; 0x39
 80063f8:	d107      	bne.n	800640a <_dtoa_r+0x702>
 80063fa:	9a03      	ldr	r2, [sp, #12]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d1f7      	bne.n	80063f0 <_dtoa_r+0x6e8>
 8006400:	2230      	movs	r2, #48	; 0x30
 8006402:	9903      	ldr	r1, [sp, #12]
 8006404:	f108 0801 	add.w	r8, r8, #1
 8006408:	700a      	strb	r2, [r1, #0]
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	3201      	adds	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e79e      	b.n	8006350 <_dtoa_r+0x648>
 8006412:	46d0      	mov	r8, sl
 8006414:	e7eb      	b.n	80063ee <_dtoa_r+0x6e6>
 8006416:	2200      	movs	r2, #0
 8006418:	4b6e      	ldr	r3, [pc, #440]	; (80065d4 <_dtoa_r+0x8cc>)
 800641a:	f7fa f85d 	bl	80004d8 <__aeabi_dmul>
 800641e:	2200      	movs	r2, #0
 8006420:	2300      	movs	r3, #0
 8006422:	4680      	mov	r8, r0
 8006424:	4689      	mov	r9, r1
 8006426:	f7fa fabf 	bl	80009a8 <__aeabi_dcmpeq>
 800642a:	2800      	cmp	r0, #0
 800642c:	d09b      	beq.n	8006366 <_dtoa_r+0x65e>
 800642e:	e7cd      	b.n	80063cc <_dtoa_r+0x6c4>
 8006430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006432:	2a00      	cmp	r2, #0
 8006434:	f000 80d0 	beq.w	80065d8 <_dtoa_r+0x8d0>
 8006438:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800643a:	2a01      	cmp	r2, #1
 800643c:	f300 80ae 	bgt.w	800659c <_dtoa_r+0x894>
 8006440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006442:	2a00      	cmp	r2, #0
 8006444:	f000 80a6 	beq.w	8006594 <_dtoa_r+0x88c>
 8006448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800644c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800644e:	9f06      	ldr	r7, [sp, #24]
 8006450:	9a06      	ldr	r2, [sp, #24]
 8006452:	2101      	movs	r1, #1
 8006454:	441a      	add	r2, r3
 8006456:	9206      	str	r2, [sp, #24]
 8006458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800645a:	4628      	mov	r0, r5
 800645c:	441a      	add	r2, r3
 800645e:	9209      	str	r2, [sp, #36]	; 0x24
 8006460:	f000 fb5e 	bl	8006b20 <__i2b>
 8006464:	4606      	mov	r6, r0
 8006466:	2f00      	cmp	r7, #0
 8006468:	dd0c      	ble.n	8006484 <_dtoa_r+0x77c>
 800646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd09      	ble.n	8006484 <_dtoa_r+0x77c>
 8006470:	42bb      	cmp	r3, r7
 8006472:	bfa8      	it	ge
 8006474:	463b      	movge	r3, r7
 8006476:	9a06      	ldr	r2, [sp, #24]
 8006478:	1aff      	subs	r7, r7, r3
 800647a:	1ad2      	subs	r2, r2, r3
 800647c:	9206      	str	r2, [sp, #24]
 800647e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	9309      	str	r3, [sp, #36]	; 0x24
 8006484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006486:	b1f3      	cbz	r3, 80064c6 <_dtoa_r+0x7be>
 8006488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80a8 	beq.w	80065e0 <_dtoa_r+0x8d8>
 8006490:	2c00      	cmp	r4, #0
 8006492:	dd10      	ble.n	80064b6 <_dtoa_r+0x7ae>
 8006494:	4631      	mov	r1, r6
 8006496:	4622      	mov	r2, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f000 fbff 	bl	8006c9c <__pow5mult>
 800649e:	465a      	mov	r2, fp
 80064a0:	4601      	mov	r1, r0
 80064a2:	4606      	mov	r6, r0
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 fb51 	bl	8006b4c <__multiply>
 80064aa:	4680      	mov	r8, r0
 80064ac:	4659      	mov	r1, fp
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fa80 	bl	80069b4 <_Bfree>
 80064b4:	46c3      	mov	fp, r8
 80064b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b8:	1b1a      	subs	r2, r3, r4
 80064ba:	d004      	beq.n	80064c6 <_dtoa_r+0x7be>
 80064bc:	4659      	mov	r1, fp
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 fbec 	bl	8006c9c <__pow5mult>
 80064c4:	4683      	mov	fp, r0
 80064c6:	2101      	movs	r1, #1
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 fb29 	bl	8006b20 <__i2b>
 80064ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064d0:	4604      	mov	r4, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f340 8086 	ble.w	80065e4 <_dtoa_r+0x8dc>
 80064d8:	461a      	mov	r2, r3
 80064da:	4601      	mov	r1, r0
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 fbdd 	bl	8006c9c <__pow5mult>
 80064e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064e4:	4604      	mov	r4, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	dd7f      	ble.n	80065ea <_dtoa_r+0x8e2>
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064f4:	6918      	ldr	r0, [r3, #16]
 80064f6:	f000 fac5 	bl	8006a84 <__hi0bits>
 80064fa:	f1c0 0020 	rsb	r0, r0, #32
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	4418      	add	r0, r3
 8006502:	f010 001f 	ands.w	r0, r0, #31
 8006506:	f000 8092 	beq.w	800662e <_dtoa_r+0x926>
 800650a:	f1c0 0320 	rsb	r3, r0, #32
 800650e:	2b04      	cmp	r3, #4
 8006510:	f340 808a 	ble.w	8006628 <_dtoa_r+0x920>
 8006514:	f1c0 001c 	rsb	r0, r0, #28
 8006518:	9b06      	ldr	r3, [sp, #24]
 800651a:	4407      	add	r7, r0
 800651c:	4403      	add	r3, r0
 800651e:	9306      	str	r3, [sp, #24]
 8006520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006522:	4403      	add	r3, r0
 8006524:	9309      	str	r3, [sp, #36]	; 0x24
 8006526:	9b06      	ldr	r3, [sp, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	dd05      	ble.n	8006538 <_dtoa_r+0x830>
 800652c:	4659      	mov	r1, fp
 800652e:	461a      	mov	r2, r3
 8006530:	4628      	mov	r0, r5
 8006532:	f000 fc0d 	bl	8006d50 <__lshift>
 8006536:	4683      	mov	fp, r0
 8006538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	dd05      	ble.n	800654a <_dtoa_r+0x842>
 800653e:	4621      	mov	r1, r4
 8006540:	461a      	mov	r2, r3
 8006542:	4628      	mov	r0, r5
 8006544:	f000 fc04 	bl	8006d50 <__lshift>
 8006548:	4604      	mov	r4, r0
 800654a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d070      	beq.n	8006632 <_dtoa_r+0x92a>
 8006550:	4621      	mov	r1, r4
 8006552:	4658      	mov	r0, fp
 8006554:	f000 fc6c 	bl	8006e30 <__mcmp>
 8006558:	2800      	cmp	r0, #0
 800655a:	da6a      	bge.n	8006632 <_dtoa_r+0x92a>
 800655c:	2300      	movs	r3, #0
 800655e:	4659      	mov	r1, fp
 8006560:	220a      	movs	r2, #10
 8006562:	4628      	mov	r0, r5
 8006564:	f000 fa48 	bl	80069f8 <__multadd>
 8006568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800656a:	4683      	mov	fp, r0
 800656c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8194 	beq.w	800689e <_dtoa_r+0xb96>
 8006576:	4631      	mov	r1, r6
 8006578:	2300      	movs	r3, #0
 800657a:	220a      	movs	r2, #10
 800657c:	4628      	mov	r0, r5
 800657e:	f000 fa3b 	bl	80069f8 <__multadd>
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	4606      	mov	r6, r0
 8006588:	f300 8093 	bgt.w	80066b2 <_dtoa_r+0x9aa>
 800658c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800658e:	2b02      	cmp	r3, #2
 8006590:	dc57      	bgt.n	8006642 <_dtoa_r+0x93a>
 8006592:	e08e      	b.n	80066b2 <_dtoa_r+0x9aa>
 8006594:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006596:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800659a:	e757      	b.n	800644c <_dtoa_r+0x744>
 800659c:	9b08      	ldr	r3, [sp, #32]
 800659e:	1e5c      	subs	r4, r3, #1
 80065a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	bfb7      	itett	lt
 80065a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065a8:	1b1c      	subge	r4, r3, r4
 80065aa:	1ae2      	sublt	r2, r4, r3
 80065ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80065ae:	bfbe      	ittt	lt
 80065b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80065b2:	189b      	addlt	r3, r3, r2
 80065b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80065b6:	9b08      	ldr	r3, [sp, #32]
 80065b8:	bfb8      	it	lt
 80065ba:	2400      	movlt	r4, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bfbb      	ittet	lt
 80065c0:	9b06      	ldrlt	r3, [sp, #24]
 80065c2:	9a08      	ldrlt	r2, [sp, #32]
 80065c4:	9f06      	ldrge	r7, [sp, #24]
 80065c6:	1a9f      	sublt	r7, r3, r2
 80065c8:	bfac      	ite	ge
 80065ca:	9b08      	ldrge	r3, [sp, #32]
 80065cc:	2300      	movlt	r3, #0
 80065ce:	e73f      	b.n	8006450 <_dtoa_r+0x748>
 80065d0:	3fe00000 	.word	0x3fe00000
 80065d4:	40240000 	.word	0x40240000
 80065d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065da:	9f06      	ldr	r7, [sp, #24]
 80065dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065de:	e742      	b.n	8006466 <_dtoa_r+0x75e>
 80065e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e2:	e76b      	b.n	80064bc <_dtoa_r+0x7b4>
 80065e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	dc19      	bgt.n	800661e <_dtoa_r+0x916>
 80065ea:	9b04      	ldr	r3, [sp, #16]
 80065ec:	b9bb      	cbnz	r3, 800661e <_dtoa_r+0x916>
 80065ee:	9b05      	ldr	r3, [sp, #20]
 80065f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f4:	b99b      	cbnz	r3, 800661e <_dtoa_r+0x916>
 80065f6:	9b05      	ldr	r3, [sp, #20]
 80065f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065fc:	0d1b      	lsrs	r3, r3, #20
 80065fe:	051b      	lsls	r3, r3, #20
 8006600:	b183      	cbz	r3, 8006624 <_dtoa_r+0x91c>
 8006602:	f04f 0801 	mov.w	r8, #1
 8006606:	9b06      	ldr	r3, [sp, #24]
 8006608:	3301      	adds	r3, #1
 800660a:	9306      	str	r3, [sp, #24]
 800660c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660e:	3301      	adds	r3, #1
 8006610:	9309      	str	r3, [sp, #36]	; 0x24
 8006612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	f47f af6a 	bne.w	80064ee <_dtoa_r+0x7e6>
 800661a:	2001      	movs	r0, #1
 800661c:	e76f      	b.n	80064fe <_dtoa_r+0x7f6>
 800661e:	f04f 0800 	mov.w	r8, #0
 8006622:	e7f6      	b.n	8006612 <_dtoa_r+0x90a>
 8006624:	4698      	mov	r8, r3
 8006626:	e7f4      	b.n	8006612 <_dtoa_r+0x90a>
 8006628:	f43f af7d 	beq.w	8006526 <_dtoa_r+0x81e>
 800662c:	4618      	mov	r0, r3
 800662e:	301c      	adds	r0, #28
 8006630:	e772      	b.n	8006518 <_dtoa_r+0x810>
 8006632:	9b08      	ldr	r3, [sp, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc36      	bgt.n	80066a6 <_dtoa_r+0x99e>
 8006638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800663a:	2b02      	cmp	r3, #2
 800663c:	dd33      	ble.n	80066a6 <_dtoa_r+0x99e>
 800663e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006642:	f1b9 0f00 	cmp.w	r9, #0
 8006646:	d10d      	bne.n	8006664 <_dtoa_r+0x95c>
 8006648:	4621      	mov	r1, r4
 800664a:	464b      	mov	r3, r9
 800664c:	2205      	movs	r2, #5
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f9d2 	bl	80069f8 <__multadd>
 8006654:	4601      	mov	r1, r0
 8006656:	4604      	mov	r4, r0
 8006658:	4658      	mov	r0, fp
 800665a:	f000 fbe9 	bl	8006e30 <__mcmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	f73f adb8 	bgt.w	80061d4 <_dtoa_r+0x4cc>
 8006664:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006666:	9f03      	ldr	r7, [sp, #12]
 8006668:	ea6f 0a03 	mvn.w	sl, r3
 800666c:	f04f 0800 	mov.w	r8, #0
 8006670:	4621      	mov	r1, r4
 8006672:	4628      	mov	r0, r5
 8006674:	f000 f99e 	bl	80069b4 <_Bfree>
 8006678:	2e00      	cmp	r6, #0
 800667a:	f43f aea7 	beq.w	80063cc <_dtoa_r+0x6c4>
 800667e:	f1b8 0f00 	cmp.w	r8, #0
 8006682:	d005      	beq.n	8006690 <_dtoa_r+0x988>
 8006684:	45b0      	cmp	r8, r6
 8006686:	d003      	beq.n	8006690 <_dtoa_r+0x988>
 8006688:	4641      	mov	r1, r8
 800668a:	4628      	mov	r0, r5
 800668c:	f000 f992 	bl	80069b4 <_Bfree>
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f98e 	bl	80069b4 <_Bfree>
 8006698:	e698      	b.n	80063cc <_dtoa_r+0x6c4>
 800669a:	2400      	movs	r4, #0
 800669c:	4626      	mov	r6, r4
 800669e:	e7e1      	b.n	8006664 <_dtoa_r+0x95c>
 80066a0:	46c2      	mov	sl, r8
 80066a2:	4626      	mov	r6, r4
 80066a4:	e596      	b.n	80061d4 <_dtoa_r+0x4cc>
 80066a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80fd 	beq.w	80068ac <_dtoa_r+0xba4>
 80066b2:	2f00      	cmp	r7, #0
 80066b4:	dd05      	ble.n	80066c2 <_dtoa_r+0x9ba>
 80066b6:	4631      	mov	r1, r6
 80066b8:	463a      	mov	r2, r7
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 fb48 	bl	8006d50 <__lshift>
 80066c0:	4606      	mov	r6, r0
 80066c2:	f1b8 0f00 	cmp.w	r8, #0
 80066c6:	d05c      	beq.n	8006782 <_dtoa_r+0xa7a>
 80066c8:	4628      	mov	r0, r5
 80066ca:	6871      	ldr	r1, [r6, #4]
 80066cc:	f000 f932 	bl	8006934 <_Balloc>
 80066d0:	4607      	mov	r7, r0
 80066d2:	b928      	cbnz	r0, 80066e0 <_dtoa_r+0x9d8>
 80066d4:	4602      	mov	r2, r0
 80066d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066da:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <_dtoa_r+0xbd0>)
 80066dc:	f7ff bb28 	b.w	8005d30 <_dtoa_r+0x28>
 80066e0:	6932      	ldr	r2, [r6, #16]
 80066e2:	f106 010c 	add.w	r1, r6, #12
 80066e6:	3202      	adds	r2, #2
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	300c      	adds	r0, #12
 80066ec:	f000 f914 	bl	8006918 <memcpy>
 80066f0:	2201      	movs	r2, #1
 80066f2:	4639      	mov	r1, r7
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 fb2b 	bl	8006d50 <__lshift>
 80066fa:	46b0      	mov	r8, r6
 80066fc:	4606      	mov	r6, r0
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	9308      	str	r3, [sp, #32]
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	444b      	add	r3, r9
 8006708:	930a      	str	r3, [sp, #40]	; 0x28
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	9309      	str	r3, [sp, #36]	; 0x24
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	4621      	mov	r1, r4
 8006716:	3b01      	subs	r3, #1
 8006718:	4658      	mov	r0, fp
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	f7ff fa68 	bl	8005bf0 <quorem>
 8006720:	4603      	mov	r3, r0
 8006722:	4641      	mov	r1, r8
 8006724:	3330      	adds	r3, #48	; 0x30
 8006726:	9006      	str	r0, [sp, #24]
 8006728:	4658      	mov	r0, fp
 800672a:	930b      	str	r3, [sp, #44]	; 0x2c
 800672c:	f000 fb80 	bl	8006e30 <__mcmp>
 8006730:	4632      	mov	r2, r6
 8006732:	4681      	mov	r9, r0
 8006734:	4621      	mov	r1, r4
 8006736:	4628      	mov	r0, r5
 8006738:	f000 fb96 	bl	8006e68 <__mdiff>
 800673c:	68c2      	ldr	r2, [r0, #12]
 800673e:	4607      	mov	r7, r0
 8006740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006742:	bb02      	cbnz	r2, 8006786 <_dtoa_r+0xa7e>
 8006744:	4601      	mov	r1, r0
 8006746:	4658      	mov	r0, fp
 8006748:	f000 fb72 	bl	8006e30 <__mcmp>
 800674c:	4602      	mov	r2, r0
 800674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006750:	4639      	mov	r1, r7
 8006752:	4628      	mov	r0, r5
 8006754:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006758:	f000 f92c 	bl	80069b4 <_Bfree>
 800675c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800675e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006760:	9f08      	ldr	r7, [sp, #32]
 8006762:	ea43 0102 	orr.w	r1, r3, r2
 8006766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006768:	430b      	orrs	r3, r1
 800676a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800676c:	d10d      	bne.n	800678a <_dtoa_r+0xa82>
 800676e:	2b39      	cmp	r3, #57	; 0x39
 8006770:	d029      	beq.n	80067c6 <_dtoa_r+0xabe>
 8006772:	f1b9 0f00 	cmp.w	r9, #0
 8006776:	dd01      	ble.n	800677c <_dtoa_r+0xa74>
 8006778:	9b06      	ldr	r3, [sp, #24]
 800677a:	3331      	adds	r3, #49	; 0x31
 800677c:	9a04      	ldr	r2, [sp, #16]
 800677e:	7013      	strb	r3, [r2, #0]
 8006780:	e776      	b.n	8006670 <_dtoa_r+0x968>
 8006782:	4630      	mov	r0, r6
 8006784:	e7b9      	b.n	80066fa <_dtoa_r+0x9f2>
 8006786:	2201      	movs	r2, #1
 8006788:	e7e2      	b.n	8006750 <_dtoa_r+0xa48>
 800678a:	f1b9 0f00 	cmp.w	r9, #0
 800678e:	db06      	blt.n	800679e <_dtoa_r+0xa96>
 8006790:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006792:	ea41 0909 	orr.w	r9, r1, r9
 8006796:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006798:	ea59 0101 	orrs.w	r1, r9, r1
 800679c:	d120      	bne.n	80067e0 <_dtoa_r+0xad8>
 800679e:	2a00      	cmp	r2, #0
 80067a0:	ddec      	ble.n	800677c <_dtoa_r+0xa74>
 80067a2:	4659      	mov	r1, fp
 80067a4:	2201      	movs	r2, #1
 80067a6:	4628      	mov	r0, r5
 80067a8:	9308      	str	r3, [sp, #32]
 80067aa:	f000 fad1 	bl	8006d50 <__lshift>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4683      	mov	fp, r0
 80067b2:	f000 fb3d 	bl	8006e30 <__mcmp>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	9b08      	ldr	r3, [sp, #32]
 80067ba:	dc02      	bgt.n	80067c2 <_dtoa_r+0xaba>
 80067bc:	d1de      	bne.n	800677c <_dtoa_r+0xa74>
 80067be:	07da      	lsls	r2, r3, #31
 80067c0:	d5dc      	bpl.n	800677c <_dtoa_r+0xa74>
 80067c2:	2b39      	cmp	r3, #57	; 0x39
 80067c4:	d1d8      	bne.n	8006778 <_dtoa_r+0xa70>
 80067c6:	2339      	movs	r3, #57	; 0x39
 80067c8:	9a04      	ldr	r2, [sp, #16]
 80067ca:	7013      	strb	r3, [r2, #0]
 80067cc:	463b      	mov	r3, r7
 80067ce:	461f      	mov	r7, r3
 80067d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	2a39      	cmp	r2, #57	; 0x39
 80067d8:	d050      	beq.n	800687c <_dtoa_r+0xb74>
 80067da:	3201      	adds	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e747      	b.n	8006670 <_dtoa_r+0x968>
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	dd03      	ble.n	80067ec <_dtoa_r+0xae4>
 80067e4:	2b39      	cmp	r3, #57	; 0x39
 80067e6:	d0ee      	beq.n	80067c6 <_dtoa_r+0xabe>
 80067e8:	3301      	adds	r3, #1
 80067ea:	e7c7      	b.n	800677c <_dtoa_r+0xa74>
 80067ec:	9a08      	ldr	r2, [sp, #32]
 80067ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067f4:	428a      	cmp	r2, r1
 80067f6:	d02a      	beq.n	800684e <_dtoa_r+0xb46>
 80067f8:	4659      	mov	r1, fp
 80067fa:	2300      	movs	r3, #0
 80067fc:	220a      	movs	r2, #10
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 f8fa 	bl	80069f8 <__multadd>
 8006804:	45b0      	cmp	r8, r6
 8006806:	4683      	mov	fp, r0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	f04f 020a 	mov.w	r2, #10
 8006810:	4641      	mov	r1, r8
 8006812:	4628      	mov	r0, r5
 8006814:	d107      	bne.n	8006826 <_dtoa_r+0xb1e>
 8006816:	f000 f8ef 	bl	80069f8 <__multadd>
 800681a:	4680      	mov	r8, r0
 800681c:	4606      	mov	r6, r0
 800681e:	9b08      	ldr	r3, [sp, #32]
 8006820:	3301      	adds	r3, #1
 8006822:	9308      	str	r3, [sp, #32]
 8006824:	e775      	b.n	8006712 <_dtoa_r+0xa0a>
 8006826:	f000 f8e7 	bl	80069f8 <__multadd>
 800682a:	4631      	mov	r1, r6
 800682c:	4680      	mov	r8, r0
 800682e:	2300      	movs	r3, #0
 8006830:	220a      	movs	r2, #10
 8006832:	4628      	mov	r0, r5
 8006834:	f000 f8e0 	bl	80069f8 <__multadd>
 8006838:	4606      	mov	r6, r0
 800683a:	e7f0      	b.n	800681e <_dtoa_r+0xb16>
 800683c:	f1b9 0f00 	cmp.w	r9, #0
 8006840:	bfcc      	ite	gt
 8006842:	464f      	movgt	r7, r9
 8006844:	2701      	movle	r7, #1
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	9a03      	ldr	r2, [sp, #12]
 800684c:	4417      	add	r7, r2
 800684e:	4659      	mov	r1, fp
 8006850:	2201      	movs	r2, #1
 8006852:	4628      	mov	r0, r5
 8006854:	9308      	str	r3, [sp, #32]
 8006856:	f000 fa7b 	bl	8006d50 <__lshift>
 800685a:	4621      	mov	r1, r4
 800685c:	4683      	mov	fp, r0
 800685e:	f000 fae7 	bl	8006e30 <__mcmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	dcb2      	bgt.n	80067cc <_dtoa_r+0xac4>
 8006866:	d102      	bne.n	800686e <_dtoa_r+0xb66>
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d4ae      	bmi.n	80067cc <_dtoa_r+0xac4>
 800686e:	463b      	mov	r3, r7
 8006870:	461f      	mov	r7, r3
 8006872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006876:	2a30      	cmp	r2, #48	; 0x30
 8006878:	d0fa      	beq.n	8006870 <_dtoa_r+0xb68>
 800687a:	e6f9      	b.n	8006670 <_dtoa_r+0x968>
 800687c:	9a03      	ldr	r2, [sp, #12]
 800687e:	429a      	cmp	r2, r3
 8006880:	d1a5      	bne.n	80067ce <_dtoa_r+0xac6>
 8006882:	2331      	movs	r3, #49	; 0x31
 8006884:	f10a 0a01 	add.w	sl, sl, #1
 8006888:	e779      	b.n	800677e <_dtoa_r+0xa76>
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <_dtoa_r+0xbd4>)
 800688c:	f7ff baa8 	b.w	8005de0 <_dtoa_r+0xd8>
 8006890:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006892:	2b00      	cmp	r3, #0
 8006894:	f47f aa81 	bne.w	8005d9a <_dtoa_r+0x92>
 8006898:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <_dtoa_r+0xbd8>)
 800689a:	f7ff baa1 	b.w	8005de0 <_dtoa_r+0xd8>
 800689e:	f1b9 0f00 	cmp.w	r9, #0
 80068a2:	dc03      	bgt.n	80068ac <_dtoa_r+0xba4>
 80068a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	f73f aecb 	bgt.w	8006642 <_dtoa_r+0x93a>
 80068ac:	9f03      	ldr	r7, [sp, #12]
 80068ae:	4621      	mov	r1, r4
 80068b0:	4658      	mov	r0, fp
 80068b2:	f7ff f99d 	bl	8005bf0 <quorem>
 80068b6:	9a03      	ldr	r2, [sp, #12]
 80068b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80068bc:	f807 3b01 	strb.w	r3, [r7], #1
 80068c0:	1aba      	subs	r2, r7, r2
 80068c2:	4591      	cmp	r9, r2
 80068c4:	ddba      	ble.n	800683c <_dtoa_r+0xb34>
 80068c6:	4659      	mov	r1, fp
 80068c8:	2300      	movs	r3, #0
 80068ca:	220a      	movs	r2, #10
 80068cc:	4628      	mov	r0, r5
 80068ce:	f000 f893 	bl	80069f8 <__multadd>
 80068d2:	4683      	mov	fp, r0
 80068d4:	e7eb      	b.n	80068ae <_dtoa_r+0xba6>
 80068d6:	bf00      	nop
 80068d8:	0800844f 	.word	0x0800844f
 80068dc:	080083ac 	.word	0x080083ac
 80068e0:	080083d0 	.word	0x080083d0

080068e4 <_localeconv_r>:
 80068e4:	4800      	ldr	r0, [pc, #0]	; (80068e8 <_localeconv_r+0x4>)
 80068e6:	4770      	bx	lr
 80068e8:	20000164 	.word	0x20000164

080068ec <malloc>:
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <malloc+0xc>)
 80068ee:	4601      	mov	r1, r0
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	f000 bc1d 	b.w	8007130 <_malloc_r>
 80068f6:	bf00      	nop
 80068f8:	20000010 	.word	0x20000010

080068fc <memchr>:
 80068fc:	4603      	mov	r3, r0
 80068fe:	b510      	push	{r4, lr}
 8006900:	b2c9      	uxtb	r1, r1
 8006902:	4402      	add	r2, r0
 8006904:	4293      	cmp	r3, r2
 8006906:	4618      	mov	r0, r3
 8006908:	d101      	bne.n	800690e <memchr+0x12>
 800690a:	2000      	movs	r0, #0
 800690c:	e003      	b.n	8006916 <memchr+0x1a>
 800690e:	7804      	ldrb	r4, [r0, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	428c      	cmp	r4, r1
 8006914:	d1f6      	bne.n	8006904 <memchr+0x8>
 8006916:	bd10      	pop	{r4, pc}

08006918 <memcpy>:
 8006918:	440a      	add	r2, r1
 800691a:	4291      	cmp	r1, r2
 800691c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006920:	d100      	bne.n	8006924 <memcpy+0xc>
 8006922:	4770      	bx	lr
 8006924:	b510      	push	{r4, lr}
 8006926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800692a:	4291      	cmp	r1, r2
 800692c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006930:	d1f9      	bne.n	8006926 <memcpy+0xe>
 8006932:	bd10      	pop	{r4, pc}

08006934 <_Balloc>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006938:	4604      	mov	r4, r0
 800693a:	460d      	mov	r5, r1
 800693c:	b976      	cbnz	r6, 800695c <_Balloc+0x28>
 800693e:	2010      	movs	r0, #16
 8006940:	f7ff ffd4 	bl	80068ec <malloc>
 8006944:	4602      	mov	r2, r0
 8006946:	6260      	str	r0, [r4, #36]	; 0x24
 8006948:	b920      	cbnz	r0, 8006954 <_Balloc+0x20>
 800694a:	2166      	movs	r1, #102	; 0x66
 800694c:	4b17      	ldr	r3, [pc, #92]	; (80069ac <_Balloc+0x78>)
 800694e:	4818      	ldr	r0, [pc, #96]	; (80069b0 <_Balloc+0x7c>)
 8006950:	f000 fc72 	bl	8007238 <__assert_func>
 8006954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006958:	6006      	str	r6, [r0, #0]
 800695a:	60c6      	str	r6, [r0, #12]
 800695c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800695e:	68f3      	ldr	r3, [r6, #12]
 8006960:	b183      	cbz	r3, 8006984 <_Balloc+0x50>
 8006962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800696a:	b9b8      	cbnz	r0, 800699c <_Balloc+0x68>
 800696c:	2101      	movs	r1, #1
 800696e:	fa01 f605 	lsl.w	r6, r1, r5
 8006972:	1d72      	adds	r2, r6, #5
 8006974:	4620      	mov	r0, r4
 8006976:	0092      	lsls	r2, r2, #2
 8006978:	f000 fb5e 	bl	8007038 <_calloc_r>
 800697c:	b160      	cbz	r0, 8006998 <_Balloc+0x64>
 800697e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006982:	e00e      	b.n	80069a2 <_Balloc+0x6e>
 8006984:	2221      	movs	r2, #33	; 0x21
 8006986:	2104      	movs	r1, #4
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fb55 	bl	8007038 <_calloc_r>
 800698e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006990:	60f0      	str	r0, [r6, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e4      	bne.n	8006962 <_Balloc+0x2e>
 8006998:	2000      	movs	r0, #0
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	6802      	ldr	r2, [r0, #0]
 800699e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069a2:	2300      	movs	r3, #0
 80069a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069a8:	e7f7      	b.n	800699a <_Balloc+0x66>
 80069aa:	bf00      	nop
 80069ac:	080083dd 	.word	0x080083dd
 80069b0:	08008460 	.word	0x08008460

080069b4 <_Bfree>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069b8:	4605      	mov	r5, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	b976      	cbnz	r6, 80069dc <_Bfree+0x28>
 80069be:	2010      	movs	r0, #16
 80069c0:	f7ff ff94 	bl	80068ec <malloc>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6268      	str	r0, [r5, #36]	; 0x24
 80069c8:	b920      	cbnz	r0, 80069d4 <_Bfree+0x20>
 80069ca:	218a      	movs	r1, #138	; 0x8a
 80069cc:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <_Bfree+0x3c>)
 80069ce:	4809      	ldr	r0, [pc, #36]	; (80069f4 <_Bfree+0x40>)
 80069d0:	f000 fc32 	bl	8007238 <__assert_func>
 80069d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d8:	6006      	str	r6, [r0, #0]
 80069da:	60c6      	str	r6, [r0, #12]
 80069dc:	b13c      	cbz	r4, 80069ee <_Bfree+0x3a>
 80069de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069e0:	6862      	ldr	r2, [r4, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069e8:	6021      	str	r1, [r4, #0]
 80069ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	080083dd 	.word	0x080083dd
 80069f4:	08008460 	.word	0x08008460

080069f8 <__multadd>:
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fc:	4607      	mov	r7, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	461e      	mov	r6, r3
 8006a02:	2000      	movs	r0, #0
 8006a04:	690d      	ldr	r5, [r1, #16]
 8006a06:	f101 0c14 	add.w	ip, r1, #20
 8006a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a0e:	3001      	adds	r0, #1
 8006a10:	b299      	uxth	r1, r3
 8006a12:	fb02 6101 	mla	r1, r2, r1, r6
 8006a16:	0c1e      	lsrs	r6, r3, #16
 8006a18:	0c0b      	lsrs	r3, r1, #16
 8006a1a:	fb02 3306 	mla	r3, r2, r6, r3
 8006a1e:	b289      	uxth	r1, r1
 8006a20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a24:	4285      	cmp	r5, r0
 8006a26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a2e:	dcec      	bgt.n	8006a0a <__multadd+0x12>
 8006a30:	b30e      	cbz	r6, 8006a76 <__multadd+0x7e>
 8006a32:	68a3      	ldr	r3, [r4, #8]
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	dc19      	bgt.n	8006a6c <__multadd+0x74>
 8006a38:	6861      	ldr	r1, [r4, #4]
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	3101      	adds	r1, #1
 8006a3e:	f7ff ff79 	bl	8006934 <_Balloc>
 8006a42:	4680      	mov	r8, r0
 8006a44:	b928      	cbnz	r0, 8006a52 <__multadd+0x5a>
 8006a46:	4602      	mov	r2, r0
 8006a48:	21b5      	movs	r1, #181	; 0xb5
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <__multadd+0x84>)
 8006a4c:	480c      	ldr	r0, [pc, #48]	; (8006a80 <__multadd+0x88>)
 8006a4e:	f000 fbf3 	bl	8007238 <__assert_func>
 8006a52:	6922      	ldr	r2, [r4, #16]
 8006a54:	f104 010c 	add.w	r1, r4, #12
 8006a58:	3202      	adds	r2, #2
 8006a5a:	0092      	lsls	r2, r2, #2
 8006a5c:	300c      	adds	r0, #12
 8006a5e:	f7ff ff5b 	bl	8006918 <memcpy>
 8006a62:	4621      	mov	r1, r4
 8006a64:	4638      	mov	r0, r7
 8006a66:	f7ff ffa5 	bl	80069b4 <_Bfree>
 8006a6a:	4644      	mov	r4, r8
 8006a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a70:	3501      	adds	r5, #1
 8006a72:	615e      	str	r6, [r3, #20]
 8006a74:	6125      	str	r5, [r4, #16]
 8006a76:	4620      	mov	r0, r4
 8006a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a7c:	0800844f 	.word	0x0800844f
 8006a80:	08008460 	.word	0x08008460

08006a84 <__hi0bits>:
 8006a84:	0c02      	lsrs	r2, r0, #16
 8006a86:	0412      	lsls	r2, r2, #16
 8006a88:	4603      	mov	r3, r0
 8006a8a:	b9ca      	cbnz	r2, 8006ac0 <__hi0bits+0x3c>
 8006a8c:	0403      	lsls	r3, r0, #16
 8006a8e:	2010      	movs	r0, #16
 8006a90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a94:	bf04      	itt	eq
 8006a96:	021b      	lsleq	r3, r3, #8
 8006a98:	3008      	addeq	r0, #8
 8006a9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a9e:	bf04      	itt	eq
 8006aa0:	011b      	lsleq	r3, r3, #4
 8006aa2:	3004      	addeq	r0, #4
 8006aa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006aa8:	bf04      	itt	eq
 8006aaa:	009b      	lsleq	r3, r3, #2
 8006aac:	3002      	addeq	r0, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	db05      	blt.n	8006abe <__hi0bits+0x3a>
 8006ab2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ab6:	f100 0001 	add.w	r0, r0, #1
 8006aba:	bf08      	it	eq
 8006abc:	2020      	moveq	r0, #32
 8006abe:	4770      	bx	lr
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e7e5      	b.n	8006a90 <__hi0bits+0xc>

08006ac4 <__lo0bits>:
 8006ac4:	6803      	ldr	r3, [r0, #0]
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	f013 0007 	ands.w	r0, r3, #7
 8006acc:	d00b      	beq.n	8006ae6 <__lo0bits+0x22>
 8006ace:	07d9      	lsls	r1, r3, #31
 8006ad0:	d421      	bmi.n	8006b16 <__lo0bits+0x52>
 8006ad2:	0798      	lsls	r0, r3, #30
 8006ad4:	bf49      	itett	mi
 8006ad6:	085b      	lsrmi	r3, r3, #1
 8006ad8:	089b      	lsrpl	r3, r3, #2
 8006ada:	2001      	movmi	r0, #1
 8006adc:	6013      	strmi	r3, [r2, #0]
 8006ade:	bf5c      	itt	pl
 8006ae0:	2002      	movpl	r0, #2
 8006ae2:	6013      	strpl	r3, [r2, #0]
 8006ae4:	4770      	bx	lr
 8006ae6:	b299      	uxth	r1, r3
 8006ae8:	b909      	cbnz	r1, 8006aee <__lo0bits+0x2a>
 8006aea:	2010      	movs	r0, #16
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	b2d9      	uxtb	r1, r3
 8006af0:	b909      	cbnz	r1, 8006af6 <__lo0bits+0x32>
 8006af2:	3008      	adds	r0, #8
 8006af4:	0a1b      	lsrs	r3, r3, #8
 8006af6:	0719      	lsls	r1, r3, #28
 8006af8:	bf04      	itt	eq
 8006afa:	091b      	lsreq	r3, r3, #4
 8006afc:	3004      	addeq	r0, #4
 8006afe:	0799      	lsls	r1, r3, #30
 8006b00:	bf04      	itt	eq
 8006b02:	089b      	lsreq	r3, r3, #2
 8006b04:	3002      	addeq	r0, #2
 8006b06:	07d9      	lsls	r1, r3, #31
 8006b08:	d403      	bmi.n	8006b12 <__lo0bits+0x4e>
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	f100 0001 	add.w	r0, r0, #1
 8006b10:	d003      	beq.n	8006b1a <__lo0bits+0x56>
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	4770      	bx	lr
 8006b16:	2000      	movs	r0, #0
 8006b18:	4770      	bx	lr
 8006b1a:	2020      	movs	r0, #32
 8006b1c:	4770      	bx	lr
	...

08006b20 <__i2b>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	2101      	movs	r1, #1
 8006b26:	f7ff ff05 	bl	8006934 <_Balloc>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	b928      	cbnz	r0, 8006b3a <__i2b+0x1a>
 8006b2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b32:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <__i2b+0x24>)
 8006b34:	4804      	ldr	r0, [pc, #16]	; (8006b48 <__i2b+0x28>)
 8006b36:	f000 fb7f 	bl	8007238 <__assert_func>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	6144      	str	r4, [r0, #20]
 8006b3e:	6103      	str	r3, [r0, #16]
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	bf00      	nop
 8006b44:	0800844f 	.word	0x0800844f
 8006b48:	08008460 	.word	0x08008460

08006b4c <__multiply>:
 8006b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	4691      	mov	r9, r2
 8006b52:	690a      	ldr	r2, [r1, #16]
 8006b54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b58:	460c      	mov	r4, r1
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	bfbe      	ittt	lt
 8006b5e:	460b      	movlt	r3, r1
 8006b60:	464c      	movlt	r4, r9
 8006b62:	4699      	movlt	r9, r3
 8006b64:	6927      	ldr	r7, [r4, #16]
 8006b66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b6a:	68a3      	ldr	r3, [r4, #8]
 8006b6c:	6861      	ldr	r1, [r4, #4]
 8006b6e:	eb07 060a 	add.w	r6, r7, sl
 8006b72:	42b3      	cmp	r3, r6
 8006b74:	b085      	sub	sp, #20
 8006b76:	bfb8      	it	lt
 8006b78:	3101      	addlt	r1, #1
 8006b7a:	f7ff fedb 	bl	8006934 <_Balloc>
 8006b7e:	b930      	cbnz	r0, 8006b8e <__multiply+0x42>
 8006b80:	4602      	mov	r2, r0
 8006b82:	f240 115d 	movw	r1, #349	; 0x15d
 8006b86:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <__multiply+0x148>)
 8006b88:	4843      	ldr	r0, [pc, #268]	; (8006c98 <__multiply+0x14c>)
 8006b8a:	f000 fb55 	bl	8007238 <__assert_func>
 8006b8e:	f100 0514 	add.w	r5, r0, #20
 8006b92:	462b      	mov	r3, r5
 8006b94:	2200      	movs	r2, #0
 8006b96:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b9a:	4543      	cmp	r3, r8
 8006b9c:	d321      	bcc.n	8006be2 <__multiply+0x96>
 8006b9e:	f104 0314 	add.w	r3, r4, #20
 8006ba2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ba6:	f109 0314 	add.w	r3, r9, #20
 8006baa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006bae:	9202      	str	r2, [sp, #8]
 8006bb0:	1b3a      	subs	r2, r7, r4
 8006bb2:	3a15      	subs	r2, #21
 8006bb4:	f022 0203 	bic.w	r2, r2, #3
 8006bb8:	3204      	adds	r2, #4
 8006bba:	f104 0115 	add.w	r1, r4, #21
 8006bbe:	428f      	cmp	r7, r1
 8006bc0:	bf38      	it	cc
 8006bc2:	2204      	movcc	r2, #4
 8006bc4:	9201      	str	r2, [sp, #4]
 8006bc6:	9a02      	ldr	r2, [sp, #8]
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d80c      	bhi.n	8006be8 <__multiply+0x9c>
 8006bce:	2e00      	cmp	r6, #0
 8006bd0:	dd03      	ble.n	8006bda <__multiply+0x8e>
 8006bd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d059      	beq.n	8006c8e <__multiply+0x142>
 8006bda:	6106      	str	r6, [r0, #16]
 8006bdc:	b005      	add	sp, #20
 8006bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	f843 2b04 	str.w	r2, [r3], #4
 8006be6:	e7d8      	b.n	8006b9a <__multiply+0x4e>
 8006be8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bec:	f1ba 0f00 	cmp.w	sl, #0
 8006bf0:	d023      	beq.n	8006c3a <__multiply+0xee>
 8006bf2:	46a9      	mov	r9, r5
 8006bf4:	f04f 0c00 	mov.w	ip, #0
 8006bf8:	f104 0e14 	add.w	lr, r4, #20
 8006bfc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c00:	f8d9 1000 	ldr.w	r1, [r9]
 8006c04:	fa1f fb82 	uxth.w	fp, r2
 8006c08:	b289      	uxth	r1, r1
 8006c0a:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c0e:	4461      	add	r1, ip
 8006c10:	f8d9 c000 	ldr.w	ip, [r9]
 8006c14:	0c12      	lsrs	r2, r2, #16
 8006c16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c1a:	fb0a c202 	mla	r2, sl, r2, ip
 8006c1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c22:	b289      	uxth	r1, r1
 8006c24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c28:	4577      	cmp	r7, lr
 8006c2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c2e:	f849 1b04 	str.w	r1, [r9], #4
 8006c32:	d8e3      	bhi.n	8006bfc <__multiply+0xb0>
 8006c34:	9a01      	ldr	r2, [sp, #4]
 8006c36:	f845 c002 	str.w	ip, [r5, r2]
 8006c3a:	9a03      	ldr	r2, [sp, #12]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c42:	f1b9 0f00 	cmp.w	r9, #0
 8006c46:	d020      	beq.n	8006c8a <__multiply+0x13e>
 8006c48:	46ae      	mov	lr, r5
 8006c4a:	f04f 0a00 	mov.w	sl, #0
 8006c4e:	6829      	ldr	r1, [r5, #0]
 8006c50:	f104 0c14 	add.w	ip, r4, #20
 8006c54:	f8bc b000 	ldrh.w	fp, [ip]
 8006c58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c5c:	b289      	uxth	r1, r1
 8006c5e:	fb09 220b 	mla	r2, r9, fp, r2
 8006c62:	4492      	add	sl, r2
 8006c64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c68:	f84e 1b04 	str.w	r1, [lr], #4
 8006c6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c70:	f8be 1000 	ldrh.w	r1, [lr]
 8006c74:	0c12      	lsrs	r2, r2, #16
 8006c76:	fb09 1102 	mla	r1, r9, r2, r1
 8006c7a:	4567      	cmp	r7, ip
 8006c7c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c84:	d8e6      	bhi.n	8006c54 <__multiply+0x108>
 8006c86:	9a01      	ldr	r2, [sp, #4]
 8006c88:	50a9      	str	r1, [r5, r2]
 8006c8a:	3504      	adds	r5, #4
 8006c8c:	e79b      	b.n	8006bc6 <__multiply+0x7a>
 8006c8e:	3e01      	subs	r6, #1
 8006c90:	e79d      	b.n	8006bce <__multiply+0x82>
 8006c92:	bf00      	nop
 8006c94:	0800844f 	.word	0x0800844f
 8006c98:	08008460 	.word	0x08008460

08006c9c <__pow5mult>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	f012 0203 	ands.w	r2, r2, #3
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	d007      	beq.n	8006cbc <__pow5mult+0x20>
 8006cac:	4c25      	ldr	r4, [pc, #148]	; (8006d44 <__pow5mult+0xa8>)
 8006cae:	3a01      	subs	r2, #1
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cb6:	f7ff fe9f 	bl	80069f8 <__multadd>
 8006cba:	4607      	mov	r7, r0
 8006cbc:	10ad      	asrs	r5, r5, #2
 8006cbe:	d03d      	beq.n	8006d3c <__pow5mult+0xa0>
 8006cc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cc2:	b97c      	cbnz	r4, 8006ce4 <__pow5mult+0x48>
 8006cc4:	2010      	movs	r0, #16
 8006cc6:	f7ff fe11 	bl	80068ec <malloc>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6270      	str	r0, [r6, #36]	; 0x24
 8006cce:	b928      	cbnz	r0, 8006cdc <__pow5mult+0x40>
 8006cd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006cd4:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <__pow5mult+0xac>)
 8006cd6:	481d      	ldr	r0, [pc, #116]	; (8006d4c <__pow5mult+0xb0>)
 8006cd8:	f000 faae 	bl	8007238 <__assert_func>
 8006cdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ce0:	6004      	str	r4, [r0, #0]
 8006ce2:	60c4      	str	r4, [r0, #12]
 8006ce4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cec:	b94c      	cbnz	r4, 8006d02 <__pow5mult+0x66>
 8006cee:	f240 2171 	movw	r1, #625	; 0x271
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff ff14 	bl	8006b20 <__i2b>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d00:	6003      	str	r3, [r0, #0]
 8006d02:	f04f 0900 	mov.w	r9, #0
 8006d06:	07eb      	lsls	r3, r5, #31
 8006d08:	d50a      	bpl.n	8006d20 <__pow5mult+0x84>
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff ff1c 	bl	8006b4c <__multiply>
 8006d14:	4680      	mov	r8, r0
 8006d16:	4639      	mov	r1, r7
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7ff fe4b 	bl	80069b4 <_Bfree>
 8006d1e:	4647      	mov	r7, r8
 8006d20:	106d      	asrs	r5, r5, #1
 8006d22:	d00b      	beq.n	8006d3c <__pow5mult+0xa0>
 8006d24:	6820      	ldr	r0, [r4, #0]
 8006d26:	b938      	cbnz	r0, 8006d38 <__pow5mult+0x9c>
 8006d28:	4622      	mov	r2, r4
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff ff0d 	bl	8006b4c <__multiply>
 8006d32:	6020      	str	r0, [r4, #0]
 8006d34:	f8c0 9000 	str.w	r9, [r0]
 8006d38:	4604      	mov	r4, r0
 8006d3a:	e7e4      	b.n	8006d06 <__pow5mult+0x6a>
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d42:	bf00      	nop
 8006d44:	080085b0 	.word	0x080085b0
 8006d48:	080083dd 	.word	0x080083dd
 8006d4c:	08008460 	.word	0x08008460

08006d50 <__lshift>:
 8006d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d54:	460c      	mov	r4, r1
 8006d56:	4607      	mov	r7, r0
 8006d58:	4691      	mov	r9, r2
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	6849      	ldr	r1, [r1, #4]
 8006d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d68:	f108 0601 	add.w	r6, r8, #1
 8006d6c:	42b3      	cmp	r3, r6
 8006d6e:	db0b      	blt.n	8006d88 <__lshift+0x38>
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7ff fddf 	bl	8006934 <_Balloc>
 8006d76:	4605      	mov	r5, r0
 8006d78:	b948      	cbnz	r0, 8006d8e <__lshift+0x3e>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d80:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <__lshift+0xd8>)
 8006d82:	482a      	ldr	r0, [pc, #168]	; (8006e2c <__lshift+0xdc>)
 8006d84:	f000 fa58 	bl	8007238 <__assert_func>
 8006d88:	3101      	adds	r1, #1
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	e7ee      	b.n	8006d6c <__lshift+0x1c>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f100 0114 	add.w	r1, r0, #20
 8006d94:	f100 0210 	add.w	r2, r0, #16
 8006d98:	4618      	mov	r0, r3
 8006d9a:	4553      	cmp	r3, sl
 8006d9c:	db37      	blt.n	8006e0e <__lshift+0xbe>
 8006d9e:	6920      	ldr	r0, [r4, #16]
 8006da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006da4:	f104 0314 	add.w	r3, r4, #20
 8006da8:	f019 091f 	ands.w	r9, r9, #31
 8006dac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006db0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006db4:	d02f      	beq.n	8006e16 <__lshift+0xc6>
 8006db6:	468a      	mov	sl, r1
 8006db8:	f04f 0c00 	mov.w	ip, #0
 8006dbc:	f1c9 0e20 	rsb	lr, r9, #32
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	fa02 f209 	lsl.w	r2, r2, r9
 8006dc6:	ea42 020c 	orr.w	r2, r2, ip
 8006dca:	f84a 2b04 	str.w	r2, [sl], #4
 8006dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006dd8:	d8f2      	bhi.n	8006dc0 <__lshift+0x70>
 8006dda:	1b03      	subs	r3, r0, r4
 8006ddc:	3b15      	subs	r3, #21
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	3304      	adds	r3, #4
 8006de4:	f104 0215 	add.w	r2, r4, #21
 8006de8:	4290      	cmp	r0, r2
 8006dea:	bf38      	it	cc
 8006dec:	2304      	movcc	r3, #4
 8006dee:	f841 c003 	str.w	ip, [r1, r3]
 8006df2:	f1bc 0f00 	cmp.w	ip, #0
 8006df6:	d001      	beq.n	8006dfc <__lshift+0xac>
 8006df8:	f108 0602 	add.w	r6, r8, #2
 8006dfc:	3e01      	subs	r6, #1
 8006dfe:	4638      	mov	r0, r7
 8006e00:	4621      	mov	r1, r4
 8006e02:	612e      	str	r6, [r5, #16]
 8006e04:	f7ff fdd6 	bl	80069b4 <_Bfree>
 8006e08:	4628      	mov	r0, r5
 8006e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e12:	3301      	adds	r3, #1
 8006e14:	e7c1      	b.n	8006d9a <__lshift+0x4a>
 8006e16:	3904      	subs	r1, #4
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	4298      	cmp	r0, r3
 8006e1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e22:	d8f9      	bhi.n	8006e18 <__lshift+0xc8>
 8006e24:	e7ea      	b.n	8006dfc <__lshift+0xac>
 8006e26:	bf00      	nop
 8006e28:	0800844f 	.word	0x0800844f
 8006e2c:	08008460 	.word	0x08008460

08006e30 <__mcmp>:
 8006e30:	4603      	mov	r3, r0
 8006e32:	690a      	ldr	r2, [r1, #16]
 8006e34:	6900      	ldr	r0, [r0, #16]
 8006e36:	b530      	push	{r4, r5, lr}
 8006e38:	1a80      	subs	r0, r0, r2
 8006e3a:	d10d      	bne.n	8006e58 <__mcmp+0x28>
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	3114      	adds	r1, #20
 8006e40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e50:	4295      	cmp	r5, r2
 8006e52:	d002      	beq.n	8006e5a <__mcmp+0x2a>
 8006e54:	d304      	bcc.n	8006e60 <__mcmp+0x30>
 8006e56:	2001      	movs	r0, #1
 8006e58:	bd30      	pop	{r4, r5, pc}
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	d3f4      	bcc.n	8006e48 <__mcmp+0x18>
 8006e5e:	e7fb      	b.n	8006e58 <__mcmp+0x28>
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e7f8      	b.n	8006e58 <__mcmp+0x28>
	...

08006e68 <__mdiff>:
 8006e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	4607      	mov	r7, r0
 8006e70:	4611      	mov	r1, r2
 8006e72:	4628      	mov	r0, r5
 8006e74:	4614      	mov	r4, r2
 8006e76:	f7ff ffdb 	bl	8006e30 <__mcmp>
 8006e7a:	1e06      	subs	r6, r0, #0
 8006e7c:	d111      	bne.n	8006ea2 <__mdiff+0x3a>
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff fd57 	bl	8006934 <_Balloc>
 8006e86:	4602      	mov	r2, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <__mdiff+0x2e>
 8006e8a:	f240 2132 	movw	r1, #562	; 0x232
 8006e8e:	4b3a      	ldr	r3, [pc, #232]	; (8006f78 <__mdiff+0x110>)
 8006e90:	483a      	ldr	r0, [pc, #232]	; (8006f7c <__mdiff+0x114>)
 8006e92:	f000 f9d1 	bl	8007238 <__assert_func>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	bfa4      	itt	ge
 8006ea4:	4623      	movge	r3, r4
 8006ea6:	462c      	movge	r4, r5
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	6861      	ldr	r1, [r4, #4]
 8006eac:	bfa6      	itte	ge
 8006eae:	461d      	movge	r5, r3
 8006eb0:	2600      	movge	r6, #0
 8006eb2:	2601      	movlt	r6, #1
 8006eb4:	f7ff fd3e 	bl	8006934 <_Balloc>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	b918      	cbnz	r0, 8006ec4 <__mdiff+0x5c>
 8006ebc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ec0:	4b2d      	ldr	r3, [pc, #180]	; (8006f78 <__mdiff+0x110>)
 8006ec2:	e7e5      	b.n	8006e90 <__mdiff+0x28>
 8006ec4:	f102 0814 	add.w	r8, r2, #20
 8006ec8:	46c2      	mov	sl, r8
 8006eca:	f04f 0c00 	mov.w	ip, #0
 8006ece:	6927      	ldr	r7, [r4, #16]
 8006ed0:	60c6      	str	r6, [r0, #12]
 8006ed2:	692e      	ldr	r6, [r5, #16]
 8006ed4:	f104 0014 	add.w	r0, r4, #20
 8006ed8:	f105 0914 	add.w	r9, r5, #20
 8006edc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006ee0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ee4:	3410      	adds	r4, #16
 8006ee6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006eea:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eee:	fa1f f18b 	uxth.w	r1, fp
 8006ef2:	448c      	add	ip, r1
 8006ef4:	b299      	uxth	r1, r3
 8006ef6:	0c1b      	lsrs	r3, r3, #16
 8006ef8:	ebac 0101 	sub.w	r1, ip, r1
 8006efc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f00:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f04:	b289      	uxth	r1, r1
 8006f06:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f0a:	454e      	cmp	r6, r9
 8006f0c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006f10:	f84a 3b04 	str.w	r3, [sl], #4
 8006f14:	d8e7      	bhi.n	8006ee6 <__mdiff+0x7e>
 8006f16:	1b73      	subs	r3, r6, r5
 8006f18:	3b15      	subs	r3, #21
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	3515      	adds	r5, #21
 8006f20:	3304      	adds	r3, #4
 8006f22:	42ae      	cmp	r6, r5
 8006f24:	bf38      	it	cc
 8006f26:	2304      	movcc	r3, #4
 8006f28:	4418      	add	r0, r3
 8006f2a:	4443      	add	r3, r8
 8006f2c:	461e      	mov	r6, r3
 8006f2e:	4605      	mov	r5, r0
 8006f30:	4575      	cmp	r5, lr
 8006f32:	d30e      	bcc.n	8006f52 <__mdiff+0xea>
 8006f34:	f10e 0103 	add.w	r1, lr, #3
 8006f38:	1a09      	subs	r1, r1, r0
 8006f3a:	f021 0103 	bic.w	r1, r1, #3
 8006f3e:	3803      	subs	r0, #3
 8006f40:	4586      	cmp	lr, r0
 8006f42:	bf38      	it	cc
 8006f44:	2100      	movcc	r1, #0
 8006f46:	4419      	add	r1, r3
 8006f48:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f4c:	b18b      	cbz	r3, 8006f72 <__mdiff+0x10a>
 8006f4e:	6117      	str	r7, [r2, #16]
 8006f50:	e7a4      	b.n	8006e9c <__mdiff+0x34>
 8006f52:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f56:	fa1f f188 	uxth.w	r1, r8
 8006f5a:	4461      	add	r1, ip
 8006f5c:	140c      	asrs	r4, r1, #16
 8006f5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f62:	b289      	uxth	r1, r1
 8006f64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f68:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006f6c:	f846 1b04 	str.w	r1, [r6], #4
 8006f70:	e7de      	b.n	8006f30 <__mdiff+0xc8>
 8006f72:	3f01      	subs	r7, #1
 8006f74:	e7e8      	b.n	8006f48 <__mdiff+0xe0>
 8006f76:	bf00      	nop
 8006f78:	0800844f 	.word	0x0800844f
 8006f7c:	08008460 	.word	0x08008460

08006f80 <__d2b>:
 8006f80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f84:	2101      	movs	r1, #1
 8006f86:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006f8a:	4690      	mov	r8, r2
 8006f8c:	461d      	mov	r5, r3
 8006f8e:	f7ff fcd1 	bl	8006934 <_Balloc>
 8006f92:	4604      	mov	r4, r0
 8006f94:	b930      	cbnz	r0, 8006fa4 <__d2b+0x24>
 8006f96:	4602      	mov	r2, r0
 8006f98:	f240 310a 	movw	r1, #778	; 0x30a
 8006f9c:	4b24      	ldr	r3, [pc, #144]	; (8007030 <__d2b+0xb0>)
 8006f9e:	4825      	ldr	r0, [pc, #148]	; (8007034 <__d2b+0xb4>)
 8006fa0:	f000 f94a 	bl	8007238 <__assert_func>
 8006fa4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006fa8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006fac:	bb2d      	cbnz	r5, 8006ffa <__d2b+0x7a>
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	f1b8 0300 	subs.w	r3, r8, #0
 8006fb4:	d026      	beq.n	8007004 <__d2b+0x84>
 8006fb6:	4668      	mov	r0, sp
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	f7ff fd83 	bl	8006ac4 <__lo0bits>
 8006fbe:	9900      	ldr	r1, [sp, #0]
 8006fc0:	b1f0      	cbz	r0, 8007000 <__d2b+0x80>
 8006fc2:	9a01      	ldr	r2, [sp, #4]
 8006fc4:	f1c0 0320 	rsb	r3, r0, #32
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	40c2      	lsrs	r2, r0
 8006fd0:	6163      	str	r3, [r4, #20]
 8006fd2:	9201      	str	r2, [sp, #4]
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf14      	ite	ne
 8006fda:	2102      	movne	r1, #2
 8006fdc:	2101      	moveq	r1, #1
 8006fde:	61a3      	str	r3, [r4, #24]
 8006fe0:	6121      	str	r1, [r4, #16]
 8006fe2:	b1c5      	cbz	r5, 8007016 <__d2b+0x96>
 8006fe4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fe8:	4405      	add	r5, r0
 8006fea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fee:	603d      	str	r5, [r7, #0]
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	b002      	add	sp, #8
 8006ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ffe:	e7d6      	b.n	8006fae <__d2b+0x2e>
 8007000:	6161      	str	r1, [r4, #20]
 8007002:	e7e7      	b.n	8006fd4 <__d2b+0x54>
 8007004:	a801      	add	r0, sp, #4
 8007006:	f7ff fd5d 	bl	8006ac4 <__lo0bits>
 800700a:	2101      	movs	r1, #1
 800700c:	9b01      	ldr	r3, [sp, #4]
 800700e:	6121      	str	r1, [r4, #16]
 8007010:	6163      	str	r3, [r4, #20]
 8007012:	3020      	adds	r0, #32
 8007014:	e7e5      	b.n	8006fe2 <__d2b+0x62>
 8007016:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800701a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800701e:	6038      	str	r0, [r7, #0]
 8007020:	6918      	ldr	r0, [r3, #16]
 8007022:	f7ff fd2f 	bl	8006a84 <__hi0bits>
 8007026:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800702a:	6031      	str	r1, [r6, #0]
 800702c:	e7e1      	b.n	8006ff2 <__d2b+0x72>
 800702e:	bf00      	nop
 8007030:	0800844f 	.word	0x0800844f
 8007034:	08008460 	.word	0x08008460

08007038 <_calloc_r>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	fba1 5402 	umull	r5, r4, r1, r2
 800703e:	b934      	cbnz	r4, 800704e <_calloc_r+0x16>
 8007040:	4629      	mov	r1, r5
 8007042:	f000 f875 	bl	8007130 <_malloc_r>
 8007046:	4606      	mov	r6, r0
 8007048:	b928      	cbnz	r0, 8007056 <_calloc_r+0x1e>
 800704a:	4630      	mov	r0, r6
 800704c:	bd70      	pop	{r4, r5, r6, pc}
 800704e:	220c      	movs	r2, #12
 8007050:	2600      	movs	r6, #0
 8007052:	6002      	str	r2, [r0, #0]
 8007054:	e7f9      	b.n	800704a <_calloc_r+0x12>
 8007056:	462a      	mov	r2, r5
 8007058:	4621      	mov	r1, r4
 800705a:	f7fe f961 	bl	8005320 <memset>
 800705e:	e7f4      	b.n	800704a <_calloc_r+0x12>

08007060 <_free_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4605      	mov	r5, r0
 8007064:	2900      	cmp	r1, #0
 8007066:	d040      	beq.n	80070ea <_free_r+0x8a>
 8007068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800706c:	1f0c      	subs	r4, r1, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfb8      	it	lt
 8007072:	18e4      	addlt	r4, r4, r3
 8007074:	f000 f922 	bl	80072bc <__malloc_lock>
 8007078:	4a1c      	ldr	r2, [pc, #112]	; (80070ec <_free_r+0x8c>)
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	b933      	cbnz	r3, 800708c <_free_r+0x2c>
 800707e:	6063      	str	r3, [r4, #4]
 8007080:	6014      	str	r4, [r2, #0]
 8007082:	4628      	mov	r0, r5
 8007084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007088:	f000 b91e 	b.w	80072c8 <__malloc_unlock>
 800708c:	42a3      	cmp	r3, r4
 800708e:	d908      	bls.n	80070a2 <_free_r+0x42>
 8007090:	6820      	ldr	r0, [r4, #0]
 8007092:	1821      	adds	r1, r4, r0
 8007094:	428b      	cmp	r3, r1
 8007096:	bf01      	itttt	eq
 8007098:	6819      	ldreq	r1, [r3, #0]
 800709a:	685b      	ldreq	r3, [r3, #4]
 800709c:	1809      	addeq	r1, r1, r0
 800709e:	6021      	streq	r1, [r4, #0]
 80070a0:	e7ed      	b.n	800707e <_free_r+0x1e>
 80070a2:	461a      	mov	r2, r3
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	b10b      	cbz	r3, 80070ac <_free_r+0x4c>
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d9fa      	bls.n	80070a2 <_free_r+0x42>
 80070ac:	6811      	ldr	r1, [r2, #0]
 80070ae:	1850      	adds	r0, r2, r1
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d10b      	bne.n	80070cc <_free_r+0x6c>
 80070b4:	6820      	ldr	r0, [r4, #0]
 80070b6:	4401      	add	r1, r0
 80070b8:	1850      	adds	r0, r2, r1
 80070ba:	4283      	cmp	r3, r0
 80070bc:	6011      	str	r1, [r2, #0]
 80070be:	d1e0      	bne.n	8007082 <_free_r+0x22>
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4401      	add	r1, r0
 80070c6:	6011      	str	r1, [r2, #0]
 80070c8:	6053      	str	r3, [r2, #4]
 80070ca:	e7da      	b.n	8007082 <_free_r+0x22>
 80070cc:	d902      	bls.n	80070d4 <_free_r+0x74>
 80070ce:	230c      	movs	r3, #12
 80070d0:	602b      	str	r3, [r5, #0]
 80070d2:	e7d6      	b.n	8007082 <_free_r+0x22>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	1821      	adds	r1, r4, r0
 80070d8:	428b      	cmp	r3, r1
 80070da:	bf01      	itttt	eq
 80070dc:	6819      	ldreq	r1, [r3, #0]
 80070de:	685b      	ldreq	r3, [r3, #4]
 80070e0:	1809      	addeq	r1, r1, r0
 80070e2:	6021      	streq	r1, [r4, #0]
 80070e4:	6063      	str	r3, [r4, #4]
 80070e6:	6054      	str	r4, [r2, #4]
 80070e8:	e7cb      	b.n	8007082 <_free_r+0x22>
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	200003c8 	.word	0x200003c8

080070f0 <sbrk_aligned>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	4e0e      	ldr	r6, [pc, #56]	; (800712c <sbrk_aligned+0x3c>)
 80070f4:	460c      	mov	r4, r1
 80070f6:	6831      	ldr	r1, [r6, #0]
 80070f8:	4605      	mov	r5, r0
 80070fa:	b911      	cbnz	r1, 8007102 <sbrk_aligned+0x12>
 80070fc:	f000 f88c 	bl	8007218 <_sbrk_r>
 8007100:	6030      	str	r0, [r6, #0]
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	f000 f887 	bl	8007218 <_sbrk_r>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d00a      	beq.n	8007124 <sbrk_aligned+0x34>
 800710e:	1cc4      	adds	r4, r0, #3
 8007110:	f024 0403 	bic.w	r4, r4, #3
 8007114:	42a0      	cmp	r0, r4
 8007116:	d007      	beq.n	8007128 <sbrk_aligned+0x38>
 8007118:	1a21      	subs	r1, r4, r0
 800711a:	4628      	mov	r0, r5
 800711c:	f000 f87c 	bl	8007218 <_sbrk_r>
 8007120:	3001      	adds	r0, #1
 8007122:	d101      	bne.n	8007128 <sbrk_aligned+0x38>
 8007124:	f04f 34ff 	mov.w	r4, #4294967295
 8007128:	4620      	mov	r0, r4
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	200003cc 	.word	0x200003cc

08007130 <_malloc_r>:
 8007130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007134:	1ccd      	adds	r5, r1, #3
 8007136:	f025 0503 	bic.w	r5, r5, #3
 800713a:	3508      	adds	r5, #8
 800713c:	2d0c      	cmp	r5, #12
 800713e:	bf38      	it	cc
 8007140:	250c      	movcc	r5, #12
 8007142:	2d00      	cmp	r5, #0
 8007144:	4607      	mov	r7, r0
 8007146:	db01      	blt.n	800714c <_malloc_r+0x1c>
 8007148:	42a9      	cmp	r1, r5
 800714a:	d905      	bls.n	8007158 <_malloc_r+0x28>
 800714c:	230c      	movs	r3, #12
 800714e:	2600      	movs	r6, #0
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	4630      	mov	r0, r6
 8007154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007158:	4e2e      	ldr	r6, [pc, #184]	; (8007214 <_malloc_r+0xe4>)
 800715a:	f000 f8af 	bl	80072bc <__malloc_lock>
 800715e:	6833      	ldr	r3, [r6, #0]
 8007160:	461c      	mov	r4, r3
 8007162:	bb34      	cbnz	r4, 80071b2 <_malloc_r+0x82>
 8007164:	4629      	mov	r1, r5
 8007166:	4638      	mov	r0, r7
 8007168:	f7ff ffc2 	bl	80070f0 <sbrk_aligned>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	4604      	mov	r4, r0
 8007170:	d14d      	bne.n	800720e <_malloc_r+0xde>
 8007172:	6834      	ldr	r4, [r6, #0]
 8007174:	4626      	mov	r6, r4
 8007176:	2e00      	cmp	r6, #0
 8007178:	d140      	bne.n	80071fc <_malloc_r+0xcc>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	4631      	mov	r1, r6
 800717e:	4638      	mov	r0, r7
 8007180:	eb04 0803 	add.w	r8, r4, r3
 8007184:	f000 f848 	bl	8007218 <_sbrk_r>
 8007188:	4580      	cmp	r8, r0
 800718a:	d13a      	bne.n	8007202 <_malloc_r+0xd2>
 800718c:	6821      	ldr	r1, [r4, #0]
 800718e:	3503      	adds	r5, #3
 8007190:	1a6d      	subs	r5, r5, r1
 8007192:	f025 0503 	bic.w	r5, r5, #3
 8007196:	3508      	adds	r5, #8
 8007198:	2d0c      	cmp	r5, #12
 800719a:	bf38      	it	cc
 800719c:	250c      	movcc	r5, #12
 800719e:	4638      	mov	r0, r7
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7ff ffa5 	bl	80070f0 <sbrk_aligned>
 80071a6:	3001      	adds	r0, #1
 80071a8:	d02b      	beq.n	8007202 <_malloc_r+0xd2>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	442b      	add	r3, r5
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	e00e      	b.n	80071d0 <_malloc_r+0xa0>
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	1b52      	subs	r2, r2, r5
 80071b6:	d41e      	bmi.n	80071f6 <_malloc_r+0xc6>
 80071b8:	2a0b      	cmp	r2, #11
 80071ba:	d916      	bls.n	80071ea <_malloc_r+0xba>
 80071bc:	1961      	adds	r1, r4, r5
 80071be:	42a3      	cmp	r3, r4
 80071c0:	6025      	str	r5, [r4, #0]
 80071c2:	bf18      	it	ne
 80071c4:	6059      	strne	r1, [r3, #4]
 80071c6:	6863      	ldr	r3, [r4, #4]
 80071c8:	bf08      	it	eq
 80071ca:	6031      	streq	r1, [r6, #0]
 80071cc:	5162      	str	r2, [r4, r5]
 80071ce:	604b      	str	r3, [r1, #4]
 80071d0:	4638      	mov	r0, r7
 80071d2:	f104 060b 	add.w	r6, r4, #11
 80071d6:	f000 f877 	bl	80072c8 <__malloc_unlock>
 80071da:	f026 0607 	bic.w	r6, r6, #7
 80071de:	1d23      	adds	r3, r4, #4
 80071e0:	1af2      	subs	r2, r6, r3
 80071e2:	d0b6      	beq.n	8007152 <_malloc_r+0x22>
 80071e4:	1b9b      	subs	r3, r3, r6
 80071e6:	50a3      	str	r3, [r4, r2]
 80071e8:	e7b3      	b.n	8007152 <_malloc_r+0x22>
 80071ea:	6862      	ldr	r2, [r4, #4]
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	bf0c      	ite	eq
 80071f0:	6032      	streq	r2, [r6, #0]
 80071f2:	605a      	strne	r2, [r3, #4]
 80071f4:	e7ec      	b.n	80071d0 <_malloc_r+0xa0>
 80071f6:	4623      	mov	r3, r4
 80071f8:	6864      	ldr	r4, [r4, #4]
 80071fa:	e7b2      	b.n	8007162 <_malloc_r+0x32>
 80071fc:	4634      	mov	r4, r6
 80071fe:	6876      	ldr	r6, [r6, #4]
 8007200:	e7b9      	b.n	8007176 <_malloc_r+0x46>
 8007202:	230c      	movs	r3, #12
 8007204:	4638      	mov	r0, r7
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	f000 f85e 	bl	80072c8 <__malloc_unlock>
 800720c:	e7a1      	b.n	8007152 <_malloc_r+0x22>
 800720e:	6025      	str	r5, [r4, #0]
 8007210:	e7de      	b.n	80071d0 <_malloc_r+0xa0>
 8007212:	bf00      	nop
 8007214:	200003c8 	.word	0x200003c8

08007218 <_sbrk_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	2300      	movs	r3, #0
 800721c:	4d05      	ldr	r5, [pc, #20]	; (8007234 <_sbrk_r+0x1c>)
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	f7fb fadc 	bl	80027e0 <_sbrk>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_sbrk_r+0x1a>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_sbrk_r+0x1a>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	200003d0 	.word	0x200003d0

08007238 <__assert_func>:
 8007238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800723a:	4614      	mov	r4, r2
 800723c:	461a      	mov	r2, r3
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <__assert_func+0x2c>)
 8007240:	4605      	mov	r5, r0
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68d8      	ldr	r0, [r3, #12]
 8007246:	b14c      	cbz	r4, 800725c <__assert_func+0x24>
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <__assert_func+0x30>)
 800724a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800724e:	9100      	str	r1, [sp, #0]
 8007250:	462b      	mov	r3, r5
 8007252:	4906      	ldr	r1, [pc, #24]	; (800726c <__assert_func+0x34>)
 8007254:	f000 f80e 	bl	8007274 <fiprintf>
 8007258:	f000 fa62 	bl	8007720 <abort>
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <__assert_func+0x38>)
 800725e:	461c      	mov	r4, r3
 8007260:	e7f3      	b.n	800724a <__assert_func+0x12>
 8007262:	bf00      	nop
 8007264:	20000010 	.word	0x20000010
 8007268:	080085bc 	.word	0x080085bc
 800726c:	080085c9 	.word	0x080085c9
 8007270:	080085f7 	.word	0x080085f7

08007274 <fiprintf>:
 8007274:	b40e      	push	{r1, r2, r3}
 8007276:	b503      	push	{r0, r1, lr}
 8007278:	4601      	mov	r1, r0
 800727a:	ab03      	add	r3, sp, #12
 800727c:	4805      	ldr	r0, [pc, #20]	; (8007294 <fiprintf+0x20>)
 800727e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	f000 f84d 	bl	8007324 <_vfiprintf_r>
 800728a:	b002      	add	sp, #8
 800728c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007290:	b003      	add	sp, #12
 8007292:	4770      	bx	lr
 8007294:	20000010 	.word	0x20000010

08007298 <__ascii_mbtowc>:
 8007298:	b082      	sub	sp, #8
 800729a:	b901      	cbnz	r1, 800729e <__ascii_mbtowc+0x6>
 800729c:	a901      	add	r1, sp, #4
 800729e:	b142      	cbz	r2, 80072b2 <__ascii_mbtowc+0x1a>
 80072a0:	b14b      	cbz	r3, 80072b6 <__ascii_mbtowc+0x1e>
 80072a2:	7813      	ldrb	r3, [r2, #0]
 80072a4:	600b      	str	r3, [r1, #0]
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	1e10      	subs	r0, r2, #0
 80072aa:	bf18      	it	ne
 80072ac:	2001      	movne	r0, #1
 80072ae:	b002      	add	sp, #8
 80072b0:	4770      	bx	lr
 80072b2:	4610      	mov	r0, r2
 80072b4:	e7fb      	b.n	80072ae <__ascii_mbtowc+0x16>
 80072b6:	f06f 0001 	mvn.w	r0, #1
 80072ba:	e7f8      	b.n	80072ae <__ascii_mbtowc+0x16>

080072bc <__malloc_lock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__malloc_lock+0x8>)
 80072be:	f000 bbeb 	b.w	8007a98 <__retarget_lock_acquire_recursive>
 80072c2:	bf00      	nop
 80072c4:	200003d4 	.word	0x200003d4

080072c8 <__malloc_unlock>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__malloc_unlock+0x8>)
 80072ca:	f000 bbe6 	b.w	8007a9a <__retarget_lock_release_recursive>
 80072ce:	bf00      	nop
 80072d0:	200003d4 	.word	0x200003d4

080072d4 <__sfputc_r>:
 80072d4:	6893      	ldr	r3, [r2, #8]
 80072d6:	b410      	push	{r4}
 80072d8:	3b01      	subs	r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	6093      	str	r3, [r2, #8]
 80072de:	da07      	bge.n	80072f0 <__sfputc_r+0x1c>
 80072e0:	6994      	ldr	r4, [r2, #24]
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	db01      	blt.n	80072ea <__sfputc_r+0x16>
 80072e6:	290a      	cmp	r1, #10
 80072e8:	d102      	bne.n	80072f0 <__sfputc_r+0x1c>
 80072ea:	bc10      	pop	{r4}
 80072ec:	f000 b94a 	b.w	8007584 <__swbuf_r>
 80072f0:	6813      	ldr	r3, [r2, #0]
 80072f2:	1c58      	adds	r0, r3, #1
 80072f4:	6010      	str	r0, [r2, #0]
 80072f6:	7019      	strb	r1, [r3, #0]
 80072f8:	4608      	mov	r0, r1
 80072fa:	bc10      	pop	{r4}
 80072fc:	4770      	bx	lr

080072fe <__sfputs_r>:
 80072fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007300:	4606      	mov	r6, r0
 8007302:	460f      	mov	r7, r1
 8007304:	4614      	mov	r4, r2
 8007306:	18d5      	adds	r5, r2, r3
 8007308:	42ac      	cmp	r4, r5
 800730a:	d101      	bne.n	8007310 <__sfputs_r+0x12>
 800730c:	2000      	movs	r0, #0
 800730e:	e007      	b.n	8007320 <__sfputs_r+0x22>
 8007310:	463a      	mov	r2, r7
 8007312:	4630      	mov	r0, r6
 8007314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007318:	f7ff ffdc 	bl	80072d4 <__sfputc_r>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d1f3      	bne.n	8007308 <__sfputs_r+0xa>
 8007320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007324 <_vfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	460d      	mov	r5, r1
 800732a:	4614      	mov	r4, r2
 800732c:	4698      	mov	r8, r3
 800732e:	4606      	mov	r6, r0
 8007330:	b09d      	sub	sp, #116	; 0x74
 8007332:	b118      	cbz	r0, 800733c <_vfiprintf_r+0x18>
 8007334:	6983      	ldr	r3, [r0, #24]
 8007336:	b90b      	cbnz	r3, 800733c <_vfiprintf_r+0x18>
 8007338:	f000 fb10 	bl	800795c <__sinit>
 800733c:	4b89      	ldr	r3, [pc, #548]	; (8007564 <_vfiprintf_r+0x240>)
 800733e:	429d      	cmp	r5, r3
 8007340:	d11b      	bne.n	800737a <_vfiprintf_r+0x56>
 8007342:	6875      	ldr	r5, [r6, #4]
 8007344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007346:	07d9      	lsls	r1, r3, #31
 8007348:	d405      	bmi.n	8007356 <_vfiprintf_r+0x32>
 800734a:	89ab      	ldrh	r3, [r5, #12]
 800734c:	059a      	lsls	r2, r3, #22
 800734e:	d402      	bmi.n	8007356 <_vfiprintf_r+0x32>
 8007350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007352:	f000 fba1 	bl	8007a98 <__retarget_lock_acquire_recursive>
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	071b      	lsls	r3, r3, #28
 800735a:	d501      	bpl.n	8007360 <_vfiprintf_r+0x3c>
 800735c:	692b      	ldr	r3, [r5, #16]
 800735e:	b9eb      	cbnz	r3, 800739c <_vfiprintf_r+0x78>
 8007360:	4629      	mov	r1, r5
 8007362:	4630      	mov	r0, r6
 8007364:	f000 f96e 	bl	8007644 <__swsetup_r>
 8007368:	b1c0      	cbz	r0, 800739c <_vfiprintf_r+0x78>
 800736a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800736c:	07dc      	lsls	r4, r3, #31
 800736e:	d50e      	bpl.n	800738e <_vfiprintf_r+0x6a>
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	b01d      	add	sp, #116	; 0x74
 8007376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737a:	4b7b      	ldr	r3, [pc, #492]	; (8007568 <_vfiprintf_r+0x244>)
 800737c:	429d      	cmp	r5, r3
 800737e:	d101      	bne.n	8007384 <_vfiprintf_r+0x60>
 8007380:	68b5      	ldr	r5, [r6, #8]
 8007382:	e7df      	b.n	8007344 <_vfiprintf_r+0x20>
 8007384:	4b79      	ldr	r3, [pc, #484]	; (800756c <_vfiprintf_r+0x248>)
 8007386:	429d      	cmp	r5, r3
 8007388:	bf08      	it	eq
 800738a:	68f5      	ldreq	r5, [r6, #12]
 800738c:	e7da      	b.n	8007344 <_vfiprintf_r+0x20>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	0598      	lsls	r0, r3, #22
 8007392:	d4ed      	bmi.n	8007370 <_vfiprintf_r+0x4c>
 8007394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007396:	f000 fb80 	bl	8007a9a <__retarget_lock_release_recursive>
 800739a:	e7e9      	b.n	8007370 <_vfiprintf_r+0x4c>
 800739c:	2300      	movs	r3, #0
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	2320      	movs	r3, #32
 80073a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073a6:	2330      	movs	r3, #48	; 0x30
 80073a8:	f04f 0901 	mov.w	r9, #1
 80073ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007570 <_vfiprintf_r+0x24c>
 80073b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073b8:	4623      	mov	r3, r4
 80073ba:	469a      	mov	sl, r3
 80073bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073c0:	b10a      	cbz	r2, 80073c6 <_vfiprintf_r+0xa2>
 80073c2:	2a25      	cmp	r2, #37	; 0x25
 80073c4:	d1f9      	bne.n	80073ba <_vfiprintf_r+0x96>
 80073c6:	ebba 0b04 	subs.w	fp, sl, r4
 80073ca:	d00b      	beq.n	80073e4 <_vfiprintf_r+0xc0>
 80073cc:	465b      	mov	r3, fp
 80073ce:	4622      	mov	r2, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7ff ff93 	bl	80072fe <__sfputs_r>
 80073d8:	3001      	adds	r0, #1
 80073da:	f000 80aa 	beq.w	8007532 <_vfiprintf_r+0x20e>
 80073de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e0:	445a      	add	r2, fp
 80073e2:	9209      	str	r2, [sp, #36]	; 0x24
 80073e4:	f89a 3000 	ldrb.w	r3, [sl]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80a2 	beq.w	8007532 <_vfiprintf_r+0x20e>
 80073ee:	2300      	movs	r3, #0
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295
 80073f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f8:	f10a 0a01 	add.w	sl, sl, #1
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	9307      	str	r3, [sp, #28]
 8007400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007404:	931a      	str	r3, [sp, #104]	; 0x68
 8007406:	4654      	mov	r4, sl
 8007408:	2205      	movs	r2, #5
 800740a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740e:	4858      	ldr	r0, [pc, #352]	; (8007570 <_vfiprintf_r+0x24c>)
 8007410:	f7ff fa74 	bl	80068fc <memchr>
 8007414:	9a04      	ldr	r2, [sp, #16]
 8007416:	b9d8      	cbnz	r0, 8007450 <_vfiprintf_r+0x12c>
 8007418:	06d1      	lsls	r1, r2, #27
 800741a:	bf44      	itt	mi
 800741c:	2320      	movmi	r3, #32
 800741e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007422:	0713      	lsls	r3, r2, #28
 8007424:	bf44      	itt	mi
 8007426:	232b      	movmi	r3, #43	; 0x2b
 8007428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800742c:	f89a 3000 	ldrb.w	r3, [sl]
 8007430:	2b2a      	cmp	r3, #42	; 0x2a
 8007432:	d015      	beq.n	8007460 <_vfiprintf_r+0x13c>
 8007434:	4654      	mov	r4, sl
 8007436:	2000      	movs	r0, #0
 8007438:	f04f 0c0a 	mov.w	ip, #10
 800743c:	9a07      	ldr	r2, [sp, #28]
 800743e:	4621      	mov	r1, r4
 8007440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007444:	3b30      	subs	r3, #48	; 0x30
 8007446:	2b09      	cmp	r3, #9
 8007448:	d94e      	bls.n	80074e8 <_vfiprintf_r+0x1c4>
 800744a:	b1b0      	cbz	r0, 800747a <_vfiprintf_r+0x156>
 800744c:	9207      	str	r2, [sp, #28]
 800744e:	e014      	b.n	800747a <_vfiprintf_r+0x156>
 8007450:	eba0 0308 	sub.w	r3, r0, r8
 8007454:	fa09 f303 	lsl.w	r3, r9, r3
 8007458:	4313      	orrs	r3, r2
 800745a:	46a2      	mov	sl, r4
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	e7d2      	b.n	8007406 <_vfiprintf_r+0xe2>
 8007460:	9b03      	ldr	r3, [sp, #12]
 8007462:	1d19      	adds	r1, r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	9103      	str	r1, [sp, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	bfbb      	ittet	lt
 800746c:	425b      	neglt	r3, r3
 800746e:	f042 0202 	orrlt.w	r2, r2, #2
 8007472:	9307      	strge	r3, [sp, #28]
 8007474:	9307      	strlt	r3, [sp, #28]
 8007476:	bfb8      	it	lt
 8007478:	9204      	strlt	r2, [sp, #16]
 800747a:	7823      	ldrb	r3, [r4, #0]
 800747c:	2b2e      	cmp	r3, #46	; 0x2e
 800747e:	d10c      	bne.n	800749a <_vfiprintf_r+0x176>
 8007480:	7863      	ldrb	r3, [r4, #1]
 8007482:	2b2a      	cmp	r3, #42	; 0x2a
 8007484:	d135      	bne.n	80074f2 <_vfiprintf_r+0x1ce>
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	3402      	adds	r4, #2
 800748a:	1d1a      	adds	r2, r3, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	9203      	str	r2, [sp, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	bfb8      	it	lt
 8007494:	f04f 33ff 	movlt.w	r3, #4294967295
 8007498:	9305      	str	r3, [sp, #20]
 800749a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007574 <_vfiprintf_r+0x250>
 800749e:	2203      	movs	r2, #3
 80074a0:	4650      	mov	r0, sl
 80074a2:	7821      	ldrb	r1, [r4, #0]
 80074a4:	f7ff fa2a 	bl	80068fc <memchr>
 80074a8:	b140      	cbz	r0, 80074bc <_vfiprintf_r+0x198>
 80074aa:	2340      	movs	r3, #64	; 0x40
 80074ac:	eba0 000a 	sub.w	r0, r0, sl
 80074b0:	fa03 f000 	lsl.w	r0, r3, r0
 80074b4:	9b04      	ldr	r3, [sp, #16]
 80074b6:	3401      	adds	r4, #1
 80074b8:	4303      	orrs	r3, r0
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c0:	2206      	movs	r2, #6
 80074c2:	482d      	ldr	r0, [pc, #180]	; (8007578 <_vfiprintf_r+0x254>)
 80074c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074c8:	f7ff fa18 	bl	80068fc <memchr>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d03f      	beq.n	8007550 <_vfiprintf_r+0x22c>
 80074d0:	4b2a      	ldr	r3, [pc, #168]	; (800757c <_vfiprintf_r+0x258>)
 80074d2:	bb1b      	cbnz	r3, 800751c <_vfiprintf_r+0x1f8>
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	3307      	adds	r3, #7
 80074d8:	f023 0307 	bic.w	r3, r3, #7
 80074dc:	3308      	adds	r3, #8
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e2:	443b      	add	r3, r7
 80074e4:	9309      	str	r3, [sp, #36]	; 0x24
 80074e6:	e767      	b.n	80073b8 <_vfiprintf_r+0x94>
 80074e8:	460c      	mov	r4, r1
 80074ea:	2001      	movs	r0, #1
 80074ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f0:	e7a5      	b.n	800743e <_vfiprintf_r+0x11a>
 80074f2:	2300      	movs	r3, #0
 80074f4:	f04f 0c0a 	mov.w	ip, #10
 80074f8:	4619      	mov	r1, r3
 80074fa:	3401      	adds	r4, #1
 80074fc:	9305      	str	r3, [sp, #20]
 80074fe:	4620      	mov	r0, r4
 8007500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007504:	3a30      	subs	r2, #48	; 0x30
 8007506:	2a09      	cmp	r2, #9
 8007508:	d903      	bls.n	8007512 <_vfiprintf_r+0x1ee>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0c5      	beq.n	800749a <_vfiprintf_r+0x176>
 800750e:	9105      	str	r1, [sp, #20]
 8007510:	e7c3      	b.n	800749a <_vfiprintf_r+0x176>
 8007512:	4604      	mov	r4, r0
 8007514:	2301      	movs	r3, #1
 8007516:	fb0c 2101 	mla	r1, ip, r1, r2
 800751a:	e7f0      	b.n	80074fe <_vfiprintf_r+0x1da>
 800751c:	ab03      	add	r3, sp, #12
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	462a      	mov	r2, r5
 8007522:	4630      	mov	r0, r6
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <_vfiprintf_r+0x25c>)
 8007526:	a904      	add	r1, sp, #16
 8007528:	f7fd ffa0 	bl	800546c <_printf_float>
 800752c:	4607      	mov	r7, r0
 800752e:	1c78      	adds	r0, r7, #1
 8007530:	d1d6      	bne.n	80074e0 <_vfiprintf_r+0x1bc>
 8007532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007534:	07d9      	lsls	r1, r3, #31
 8007536:	d405      	bmi.n	8007544 <_vfiprintf_r+0x220>
 8007538:	89ab      	ldrh	r3, [r5, #12]
 800753a:	059a      	lsls	r2, r3, #22
 800753c:	d402      	bmi.n	8007544 <_vfiprintf_r+0x220>
 800753e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007540:	f000 faab 	bl	8007a9a <__retarget_lock_release_recursive>
 8007544:	89ab      	ldrh	r3, [r5, #12]
 8007546:	065b      	lsls	r3, r3, #25
 8007548:	f53f af12 	bmi.w	8007370 <_vfiprintf_r+0x4c>
 800754c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800754e:	e711      	b.n	8007374 <_vfiprintf_r+0x50>
 8007550:	ab03      	add	r3, sp, #12
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	462a      	mov	r2, r5
 8007556:	4630      	mov	r0, r6
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <_vfiprintf_r+0x25c>)
 800755a:	a904      	add	r1, sp, #16
 800755c:	f7fe fa22 	bl	80059a4 <_printf_i>
 8007560:	e7e4      	b.n	800752c <_vfiprintf_r+0x208>
 8007562:	bf00      	nop
 8007564:	08008734 	.word	0x08008734
 8007568:	08008754 	.word	0x08008754
 800756c:	08008714 	.word	0x08008714
 8007570:	08008602 	.word	0x08008602
 8007574:	08008608 	.word	0x08008608
 8007578:	0800860c 	.word	0x0800860c
 800757c:	0800546d 	.word	0x0800546d
 8007580:	080072ff 	.word	0x080072ff

08007584 <__swbuf_r>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	460e      	mov	r6, r1
 8007588:	4614      	mov	r4, r2
 800758a:	4605      	mov	r5, r0
 800758c:	b118      	cbz	r0, 8007596 <__swbuf_r+0x12>
 800758e:	6983      	ldr	r3, [r0, #24]
 8007590:	b90b      	cbnz	r3, 8007596 <__swbuf_r+0x12>
 8007592:	f000 f9e3 	bl	800795c <__sinit>
 8007596:	4b21      	ldr	r3, [pc, #132]	; (800761c <__swbuf_r+0x98>)
 8007598:	429c      	cmp	r4, r3
 800759a:	d12b      	bne.n	80075f4 <__swbuf_r+0x70>
 800759c:	686c      	ldr	r4, [r5, #4]
 800759e:	69a3      	ldr	r3, [r4, #24]
 80075a0:	60a3      	str	r3, [r4, #8]
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	071a      	lsls	r2, r3, #28
 80075a6:	d52f      	bpl.n	8007608 <__swbuf_r+0x84>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	b36b      	cbz	r3, 8007608 <__swbuf_r+0x84>
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	b2f6      	uxtb	r6, r6
 80075b2:	1ac0      	subs	r0, r0, r3
 80075b4:	6963      	ldr	r3, [r4, #20]
 80075b6:	4637      	mov	r7, r6
 80075b8:	4283      	cmp	r3, r0
 80075ba:	dc04      	bgt.n	80075c6 <__swbuf_r+0x42>
 80075bc:	4621      	mov	r1, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 f938 	bl	8007834 <_fflush_r>
 80075c4:	bb30      	cbnz	r0, 8007614 <__swbuf_r+0x90>
 80075c6:	68a3      	ldr	r3, [r4, #8]
 80075c8:	3001      	adds	r0, #1
 80075ca:	3b01      	subs	r3, #1
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	6022      	str	r2, [r4, #0]
 80075d4:	701e      	strb	r6, [r3, #0]
 80075d6:	6963      	ldr	r3, [r4, #20]
 80075d8:	4283      	cmp	r3, r0
 80075da:	d004      	beq.n	80075e6 <__swbuf_r+0x62>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	07db      	lsls	r3, r3, #31
 80075e0:	d506      	bpl.n	80075f0 <__swbuf_r+0x6c>
 80075e2:	2e0a      	cmp	r6, #10
 80075e4:	d104      	bne.n	80075f0 <__swbuf_r+0x6c>
 80075e6:	4621      	mov	r1, r4
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 f923 	bl	8007834 <_fflush_r>
 80075ee:	b988      	cbnz	r0, 8007614 <__swbuf_r+0x90>
 80075f0:	4638      	mov	r0, r7
 80075f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f4:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <__swbuf_r+0x9c>)
 80075f6:	429c      	cmp	r4, r3
 80075f8:	d101      	bne.n	80075fe <__swbuf_r+0x7a>
 80075fa:	68ac      	ldr	r4, [r5, #8]
 80075fc:	e7cf      	b.n	800759e <__swbuf_r+0x1a>
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <__swbuf_r+0xa0>)
 8007600:	429c      	cmp	r4, r3
 8007602:	bf08      	it	eq
 8007604:	68ec      	ldreq	r4, [r5, #12]
 8007606:	e7ca      	b.n	800759e <__swbuf_r+0x1a>
 8007608:	4621      	mov	r1, r4
 800760a:	4628      	mov	r0, r5
 800760c:	f000 f81a 	bl	8007644 <__swsetup_r>
 8007610:	2800      	cmp	r0, #0
 8007612:	d0cb      	beq.n	80075ac <__swbuf_r+0x28>
 8007614:	f04f 37ff 	mov.w	r7, #4294967295
 8007618:	e7ea      	b.n	80075f0 <__swbuf_r+0x6c>
 800761a:	bf00      	nop
 800761c:	08008734 	.word	0x08008734
 8007620:	08008754 	.word	0x08008754
 8007624:	08008714 	.word	0x08008714

08007628 <__ascii_wctomb>:
 8007628:	4603      	mov	r3, r0
 800762a:	4608      	mov	r0, r1
 800762c:	b141      	cbz	r1, 8007640 <__ascii_wctomb+0x18>
 800762e:	2aff      	cmp	r2, #255	; 0xff
 8007630:	d904      	bls.n	800763c <__ascii_wctomb+0x14>
 8007632:	228a      	movs	r2, #138	; 0x8a
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	4770      	bx	lr
 800763c:	2001      	movs	r0, #1
 800763e:	700a      	strb	r2, [r1, #0]
 8007640:	4770      	bx	lr
	...

08007644 <__swsetup_r>:
 8007644:	4b32      	ldr	r3, [pc, #200]	; (8007710 <__swsetup_r+0xcc>)
 8007646:	b570      	push	{r4, r5, r6, lr}
 8007648:	681d      	ldr	r5, [r3, #0]
 800764a:	4606      	mov	r6, r0
 800764c:	460c      	mov	r4, r1
 800764e:	b125      	cbz	r5, 800765a <__swsetup_r+0x16>
 8007650:	69ab      	ldr	r3, [r5, #24]
 8007652:	b913      	cbnz	r3, 800765a <__swsetup_r+0x16>
 8007654:	4628      	mov	r0, r5
 8007656:	f000 f981 	bl	800795c <__sinit>
 800765a:	4b2e      	ldr	r3, [pc, #184]	; (8007714 <__swsetup_r+0xd0>)
 800765c:	429c      	cmp	r4, r3
 800765e:	d10f      	bne.n	8007680 <__swsetup_r+0x3c>
 8007660:	686c      	ldr	r4, [r5, #4]
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007668:	0719      	lsls	r1, r3, #28
 800766a:	d42c      	bmi.n	80076c6 <__swsetup_r+0x82>
 800766c:	06dd      	lsls	r5, r3, #27
 800766e:	d411      	bmi.n	8007694 <__swsetup_r+0x50>
 8007670:	2309      	movs	r3, #9
 8007672:	6033      	str	r3, [r6, #0]
 8007674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	e03e      	b.n	80076fe <__swsetup_r+0xba>
 8007680:	4b25      	ldr	r3, [pc, #148]	; (8007718 <__swsetup_r+0xd4>)
 8007682:	429c      	cmp	r4, r3
 8007684:	d101      	bne.n	800768a <__swsetup_r+0x46>
 8007686:	68ac      	ldr	r4, [r5, #8]
 8007688:	e7eb      	b.n	8007662 <__swsetup_r+0x1e>
 800768a:	4b24      	ldr	r3, [pc, #144]	; (800771c <__swsetup_r+0xd8>)
 800768c:	429c      	cmp	r4, r3
 800768e:	bf08      	it	eq
 8007690:	68ec      	ldreq	r4, [r5, #12]
 8007692:	e7e6      	b.n	8007662 <__swsetup_r+0x1e>
 8007694:	0758      	lsls	r0, r3, #29
 8007696:	d512      	bpl.n	80076be <__swsetup_r+0x7a>
 8007698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800769a:	b141      	cbz	r1, 80076ae <__swsetup_r+0x6a>
 800769c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d002      	beq.n	80076aa <__swsetup_r+0x66>
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff fcdb 	bl	8007060 <_free_r>
 80076aa:	2300      	movs	r3, #0
 80076ac:	6363      	str	r3, [r4, #52]	; 0x34
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	2300      	movs	r3, #0
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	f043 0308 	orr.w	r3, r3, #8
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	b94b      	cbnz	r3, 80076de <__swsetup_r+0x9a>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d4:	d003      	beq.n	80076de <__swsetup_r+0x9a>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 fa05 	bl	8007ae8 <__smakebuf_r>
 80076de:	89a0      	ldrh	r0, [r4, #12]
 80076e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076e4:	f010 0301 	ands.w	r3, r0, #1
 80076e8:	d00a      	beq.n	8007700 <__swsetup_r+0xbc>
 80076ea:	2300      	movs	r3, #0
 80076ec:	60a3      	str	r3, [r4, #8]
 80076ee:	6963      	ldr	r3, [r4, #20]
 80076f0:	425b      	negs	r3, r3
 80076f2:	61a3      	str	r3, [r4, #24]
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	b943      	cbnz	r3, 800770a <__swsetup_r+0xc6>
 80076f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076fc:	d1ba      	bne.n	8007674 <__swsetup_r+0x30>
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	0781      	lsls	r1, r0, #30
 8007702:	bf58      	it	pl
 8007704:	6963      	ldrpl	r3, [r4, #20]
 8007706:	60a3      	str	r3, [r4, #8]
 8007708:	e7f4      	b.n	80076f4 <__swsetup_r+0xb0>
 800770a:	2000      	movs	r0, #0
 800770c:	e7f7      	b.n	80076fe <__swsetup_r+0xba>
 800770e:	bf00      	nop
 8007710:	20000010 	.word	0x20000010
 8007714:	08008734 	.word	0x08008734
 8007718:	08008754 	.word	0x08008754
 800771c:	08008714 	.word	0x08008714

08007720 <abort>:
 8007720:	2006      	movs	r0, #6
 8007722:	b508      	push	{r3, lr}
 8007724:	f000 fa48 	bl	8007bb8 <raise>
 8007728:	2001      	movs	r0, #1
 800772a:	f7fa ffe6 	bl	80026fa <_exit>
	...

08007730 <__sflush_r>:
 8007730:	898a      	ldrh	r2, [r1, #12]
 8007732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007734:	4605      	mov	r5, r0
 8007736:	0710      	lsls	r0, r2, #28
 8007738:	460c      	mov	r4, r1
 800773a:	d457      	bmi.n	80077ec <__sflush_r+0xbc>
 800773c:	684b      	ldr	r3, [r1, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc04      	bgt.n	800774c <__sflush_r+0x1c>
 8007742:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007744:	2b00      	cmp	r3, #0
 8007746:	dc01      	bgt.n	800774c <__sflush_r+0x1c>
 8007748:	2000      	movs	r0, #0
 800774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800774c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800774e:	2e00      	cmp	r6, #0
 8007750:	d0fa      	beq.n	8007748 <__sflush_r+0x18>
 8007752:	2300      	movs	r3, #0
 8007754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007758:	682f      	ldr	r7, [r5, #0]
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	d032      	beq.n	80077c4 <__sflush_r+0x94>
 800775e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	075a      	lsls	r2, r3, #29
 8007764:	d505      	bpl.n	8007772 <__sflush_r+0x42>
 8007766:	6863      	ldr	r3, [r4, #4]
 8007768:	1ac0      	subs	r0, r0, r3
 800776a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800776c:	b10b      	cbz	r3, 8007772 <__sflush_r+0x42>
 800776e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007770:	1ac0      	subs	r0, r0, r3
 8007772:	2300      	movs	r3, #0
 8007774:	4602      	mov	r2, r0
 8007776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007778:	4628      	mov	r0, r5
 800777a:	6a21      	ldr	r1, [r4, #32]
 800777c:	47b0      	blx	r6
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	d106      	bne.n	8007792 <__sflush_r+0x62>
 8007784:	6829      	ldr	r1, [r5, #0]
 8007786:	291d      	cmp	r1, #29
 8007788:	d82c      	bhi.n	80077e4 <__sflush_r+0xb4>
 800778a:	4a29      	ldr	r2, [pc, #164]	; (8007830 <__sflush_r+0x100>)
 800778c:	40ca      	lsrs	r2, r1
 800778e:	07d6      	lsls	r6, r2, #31
 8007790:	d528      	bpl.n	80077e4 <__sflush_r+0xb4>
 8007792:	2200      	movs	r2, #0
 8007794:	6062      	str	r2, [r4, #4]
 8007796:	6922      	ldr	r2, [r4, #16]
 8007798:	04d9      	lsls	r1, r3, #19
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	d504      	bpl.n	80077a8 <__sflush_r+0x78>
 800779e:	1c42      	adds	r2, r0, #1
 80077a0:	d101      	bne.n	80077a6 <__sflush_r+0x76>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	b903      	cbnz	r3, 80077a8 <__sflush_r+0x78>
 80077a6:	6560      	str	r0, [r4, #84]	; 0x54
 80077a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077aa:	602f      	str	r7, [r5, #0]
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d0cb      	beq.n	8007748 <__sflush_r+0x18>
 80077b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077b4:	4299      	cmp	r1, r3
 80077b6:	d002      	beq.n	80077be <__sflush_r+0x8e>
 80077b8:	4628      	mov	r0, r5
 80077ba:	f7ff fc51 	bl	8007060 <_free_r>
 80077be:	2000      	movs	r0, #0
 80077c0:	6360      	str	r0, [r4, #52]	; 0x34
 80077c2:	e7c2      	b.n	800774a <__sflush_r+0x1a>
 80077c4:	6a21      	ldr	r1, [r4, #32]
 80077c6:	2301      	movs	r3, #1
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b0      	blx	r6
 80077cc:	1c41      	adds	r1, r0, #1
 80077ce:	d1c7      	bne.n	8007760 <__sflush_r+0x30>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0c4      	beq.n	8007760 <__sflush_r+0x30>
 80077d6:	2b1d      	cmp	r3, #29
 80077d8:	d001      	beq.n	80077de <__sflush_r+0xae>
 80077da:	2b16      	cmp	r3, #22
 80077dc:	d101      	bne.n	80077e2 <__sflush_r+0xb2>
 80077de:	602f      	str	r7, [r5, #0]
 80077e0:	e7b2      	b.n	8007748 <__sflush_r+0x18>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	e7ae      	b.n	800774a <__sflush_r+0x1a>
 80077ec:	690f      	ldr	r7, [r1, #16]
 80077ee:	2f00      	cmp	r7, #0
 80077f0:	d0aa      	beq.n	8007748 <__sflush_r+0x18>
 80077f2:	0793      	lsls	r3, r2, #30
 80077f4:	bf18      	it	ne
 80077f6:	2300      	movne	r3, #0
 80077f8:	680e      	ldr	r6, [r1, #0]
 80077fa:	bf08      	it	eq
 80077fc:	694b      	ldreq	r3, [r1, #20]
 80077fe:	1bf6      	subs	r6, r6, r7
 8007800:	600f      	str	r7, [r1, #0]
 8007802:	608b      	str	r3, [r1, #8]
 8007804:	2e00      	cmp	r6, #0
 8007806:	dd9f      	ble.n	8007748 <__sflush_r+0x18>
 8007808:	4633      	mov	r3, r6
 800780a:	463a      	mov	r2, r7
 800780c:	4628      	mov	r0, r5
 800780e:	6a21      	ldr	r1, [r4, #32]
 8007810:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007814:	47e0      	blx	ip
 8007816:	2800      	cmp	r0, #0
 8007818:	dc06      	bgt.n	8007828 <__sflush_r+0xf8>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	e790      	b.n	800774a <__sflush_r+0x1a>
 8007828:	4407      	add	r7, r0
 800782a:	1a36      	subs	r6, r6, r0
 800782c:	e7ea      	b.n	8007804 <__sflush_r+0xd4>
 800782e:	bf00      	nop
 8007830:	20400001 	.word	0x20400001

08007834 <_fflush_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	690b      	ldr	r3, [r1, #16]
 8007838:	4605      	mov	r5, r0
 800783a:	460c      	mov	r4, r1
 800783c:	b913      	cbnz	r3, 8007844 <_fflush_r+0x10>
 800783e:	2500      	movs	r5, #0
 8007840:	4628      	mov	r0, r5
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	b118      	cbz	r0, 800784e <_fflush_r+0x1a>
 8007846:	6983      	ldr	r3, [r0, #24]
 8007848:	b90b      	cbnz	r3, 800784e <_fflush_r+0x1a>
 800784a:	f000 f887 	bl	800795c <__sinit>
 800784e:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <_fflush_r+0x6c>)
 8007850:	429c      	cmp	r4, r3
 8007852:	d11b      	bne.n	800788c <_fflush_r+0x58>
 8007854:	686c      	ldr	r4, [r5, #4]
 8007856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0ef      	beq.n	800783e <_fflush_r+0xa>
 800785e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007860:	07d0      	lsls	r0, r2, #31
 8007862:	d404      	bmi.n	800786e <_fflush_r+0x3a>
 8007864:	0599      	lsls	r1, r3, #22
 8007866:	d402      	bmi.n	800786e <_fflush_r+0x3a>
 8007868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800786a:	f000 f915 	bl	8007a98 <__retarget_lock_acquire_recursive>
 800786e:	4628      	mov	r0, r5
 8007870:	4621      	mov	r1, r4
 8007872:	f7ff ff5d 	bl	8007730 <__sflush_r>
 8007876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007878:	4605      	mov	r5, r0
 800787a:	07da      	lsls	r2, r3, #31
 800787c:	d4e0      	bmi.n	8007840 <_fflush_r+0xc>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d4dd      	bmi.n	8007840 <_fflush_r+0xc>
 8007884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007886:	f000 f908 	bl	8007a9a <__retarget_lock_release_recursive>
 800788a:	e7d9      	b.n	8007840 <_fflush_r+0xc>
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <_fflush_r+0x70>)
 800788e:	429c      	cmp	r4, r3
 8007890:	d101      	bne.n	8007896 <_fflush_r+0x62>
 8007892:	68ac      	ldr	r4, [r5, #8]
 8007894:	e7df      	b.n	8007856 <_fflush_r+0x22>
 8007896:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <_fflush_r+0x74>)
 8007898:	429c      	cmp	r4, r3
 800789a:	bf08      	it	eq
 800789c:	68ec      	ldreq	r4, [r5, #12]
 800789e:	e7da      	b.n	8007856 <_fflush_r+0x22>
 80078a0:	08008734 	.word	0x08008734
 80078a4:	08008754 	.word	0x08008754
 80078a8:	08008714 	.word	0x08008714

080078ac <std>:
 80078ac:	2300      	movs	r3, #0
 80078ae:	b510      	push	{r4, lr}
 80078b0:	4604      	mov	r4, r0
 80078b2:	e9c0 3300 	strd	r3, r3, [r0]
 80078b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ba:	6083      	str	r3, [r0, #8]
 80078bc:	8181      	strh	r1, [r0, #12]
 80078be:	6643      	str	r3, [r0, #100]	; 0x64
 80078c0:	81c2      	strh	r2, [r0, #14]
 80078c2:	6183      	str	r3, [r0, #24]
 80078c4:	4619      	mov	r1, r3
 80078c6:	2208      	movs	r2, #8
 80078c8:	305c      	adds	r0, #92	; 0x5c
 80078ca:	f7fd fd29 	bl	8005320 <memset>
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <std+0x38>)
 80078d0:	6224      	str	r4, [r4, #32]
 80078d2:	6263      	str	r3, [r4, #36]	; 0x24
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <std+0x3c>)
 80078d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <std+0x40>)
 80078da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078dc:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <std+0x44>)
 80078de:	6323      	str	r3, [r4, #48]	; 0x30
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	bf00      	nop
 80078e4:	08007bf1 	.word	0x08007bf1
 80078e8:	08007c13 	.word	0x08007c13
 80078ec:	08007c4b 	.word	0x08007c4b
 80078f0:	08007c6f 	.word	0x08007c6f

080078f4 <_cleanup_r>:
 80078f4:	4901      	ldr	r1, [pc, #4]	; (80078fc <_cleanup_r+0x8>)
 80078f6:	f000 b8af 	b.w	8007a58 <_fwalk_reent>
 80078fa:	bf00      	nop
 80078fc:	08007835 	.word	0x08007835

08007900 <__sfmoreglue>:
 8007900:	2268      	movs	r2, #104	; 0x68
 8007902:	b570      	push	{r4, r5, r6, lr}
 8007904:	1e4d      	subs	r5, r1, #1
 8007906:	4355      	muls	r5, r2
 8007908:	460e      	mov	r6, r1
 800790a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800790e:	f7ff fc0f 	bl	8007130 <_malloc_r>
 8007912:	4604      	mov	r4, r0
 8007914:	b140      	cbz	r0, 8007928 <__sfmoreglue+0x28>
 8007916:	2100      	movs	r1, #0
 8007918:	e9c0 1600 	strd	r1, r6, [r0]
 800791c:	300c      	adds	r0, #12
 800791e:	60a0      	str	r0, [r4, #8]
 8007920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007924:	f7fd fcfc 	bl	8005320 <memset>
 8007928:	4620      	mov	r0, r4
 800792a:	bd70      	pop	{r4, r5, r6, pc}

0800792c <__sfp_lock_acquire>:
 800792c:	4801      	ldr	r0, [pc, #4]	; (8007934 <__sfp_lock_acquire+0x8>)
 800792e:	f000 b8b3 	b.w	8007a98 <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	200003d5 	.word	0x200003d5

08007938 <__sfp_lock_release>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__sfp_lock_release+0x8>)
 800793a:	f000 b8ae 	b.w	8007a9a <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	200003d5 	.word	0x200003d5

08007944 <__sinit_lock_acquire>:
 8007944:	4801      	ldr	r0, [pc, #4]	; (800794c <__sinit_lock_acquire+0x8>)
 8007946:	f000 b8a7 	b.w	8007a98 <__retarget_lock_acquire_recursive>
 800794a:	bf00      	nop
 800794c:	200003d6 	.word	0x200003d6

08007950 <__sinit_lock_release>:
 8007950:	4801      	ldr	r0, [pc, #4]	; (8007958 <__sinit_lock_release+0x8>)
 8007952:	f000 b8a2 	b.w	8007a9a <__retarget_lock_release_recursive>
 8007956:	bf00      	nop
 8007958:	200003d6 	.word	0x200003d6

0800795c <__sinit>:
 800795c:	b510      	push	{r4, lr}
 800795e:	4604      	mov	r4, r0
 8007960:	f7ff fff0 	bl	8007944 <__sinit_lock_acquire>
 8007964:	69a3      	ldr	r3, [r4, #24]
 8007966:	b11b      	cbz	r3, 8007970 <__sinit+0x14>
 8007968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796c:	f7ff bff0 	b.w	8007950 <__sinit_lock_release>
 8007970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007974:	6523      	str	r3, [r4, #80]	; 0x50
 8007976:	4b13      	ldr	r3, [pc, #76]	; (80079c4 <__sinit+0x68>)
 8007978:	4a13      	ldr	r2, [pc, #76]	; (80079c8 <__sinit+0x6c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	62a2      	str	r2, [r4, #40]	; 0x28
 800797e:	42a3      	cmp	r3, r4
 8007980:	bf08      	it	eq
 8007982:	2301      	moveq	r3, #1
 8007984:	4620      	mov	r0, r4
 8007986:	bf08      	it	eq
 8007988:	61a3      	streq	r3, [r4, #24]
 800798a:	f000 f81f 	bl	80079cc <__sfp>
 800798e:	6060      	str	r0, [r4, #4]
 8007990:	4620      	mov	r0, r4
 8007992:	f000 f81b 	bl	80079cc <__sfp>
 8007996:	60a0      	str	r0, [r4, #8]
 8007998:	4620      	mov	r0, r4
 800799a:	f000 f817 	bl	80079cc <__sfp>
 800799e:	2200      	movs	r2, #0
 80079a0:	2104      	movs	r1, #4
 80079a2:	60e0      	str	r0, [r4, #12]
 80079a4:	6860      	ldr	r0, [r4, #4]
 80079a6:	f7ff ff81 	bl	80078ac <std>
 80079aa:	2201      	movs	r2, #1
 80079ac:	2109      	movs	r1, #9
 80079ae:	68a0      	ldr	r0, [r4, #8]
 80079b0:	f7ff ff7c 	bl	80078ac <std>
 80079b4:	2202      	movs	r2, #2
 80079b6:	2112      	movs	r1, #18
 80079b8:	68e0      	ldr	r0, [r4, #12]
 80079ba:	f7ff ff77 	bl	80078ac <std>
 80079be:	2301      	movs	r3, #1
 80079c0:	61a3      	str	r3, [r4, #24]
 80079c2:	e7d1      	b.n	8007968 <__sinit+0xc>
 80079c4:	08008398 	.word	0x08008398
 80079c8:	080078f5 	.word	0x080078f5

080079cc <__sfp>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	4607      	mov	r7, r0
 80079d0:	f7ff ffac 	bl	800792c <__sfp_lock_acquire>
 80079d4:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <__sfp+0x84>)
 80079d6:	681e      	ldr	r6, [r3, #0]
 80079d8:	69b3      	ldr	r3, [r6, #24]
 80079da:	b913      	cbnz	r3, 80079e2 <__sfp+0x16>
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff ffbd 	bl	800795c <__sinit>
 80079e2:	3648      	adds	r6, #72	; 0x48
 80079e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	d503      	bpl.n	80079f4 <__sfp+0x28>
 80079ec:	6833      	ldr	r3, [r6, #0]
 80079ee:	b30b      	cbz	r3, 8007a34 <__sfp+0x68>
 80079f0:	6836      	ldr	r6, [r6, #0]
 80079f2:	e7f7      	b.n	80079e4 <__sfp+0x18>
 80079f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079f8:	b9d5      	cbnz	r5, 8007a30 <__sfp+0x64>
 80079fa:	4b16      	ldr	r3, [pc, #88]	; (8007a54 <__sfp+0x88>)
 80079fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a00:	60e3      	str	r3, [r4, #12]
 8007a02:	6665      	str	r5, [r4, #100]	; 0x64
 8007a04:	f000 f847 	bl	8007a96 <__retarget_lock_init_recursive>
 8007a08:	f7ff ff96 	bl	8007938 <__sfp_lock_release>
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	4629      	mov	r1, r5
 8007a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a18:	6025      	str	r5, [r4, #0]
 8007a1a:	61a5      	str	r5, [r4, #24]
 8007a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a20:	f7fd fc7e 	bl	8005320 <memset>
 8007a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a30:	3468      	adds	r4, #104	; 0x68
 8007a32:	e7d9      	b.n	80079e8 <__sfp+0x1c>
 8007a34:	2104      	movs	r1, #4
 8007a36:	4638      	mov	r0, r7
 8007a38:	f7ff ff62 	bl	8007900 <__sfmoreglue>
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	6030      	str	r0, [r6, #0]
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d1d5      	bne.n	80079f0 <__sfp+0x24>
 8007a44:	f7ff ff78 	bl	8007938 <__sfp_lock_release>
 8007a48:	230c      	movs	r3, #12
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	e7ee      	b.n	8007a2c <__sfp+0x60>
 8007a4e:	bf00      	nop
 8007a50:	08008398 	.word	0x08008398
 8007a54:	ffff0001 	.word	0xffff0001

08007a58 <_fwalk_reent>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	4688      	mov	r8, r1
 8007a60:	2700      	movs	r7, #0
 8007a62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a6e:	d505      	bpl.n	8007a7c <_fwalk_reent+0x24>
 8007a70:	6824      	ldr	r4, [r4, #0]
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	d1f7      	bne.n	8007a66 <_fwalk_reent+0xe>
 8007a76:	4638      	mov	r0, r7
 8007a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7c:	89ab      	ldrh	r3, [r5, #12]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d907      	bls.n	8007a92 <_fwalk_reent+0x3a>
 8007a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a86:	3301      	adds	r3, #1
 8007a88:	d003      	beq.n	8007a92 <_fwalk_reent+0x3a>
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	47c0      	blx	r8
 8007a90:	4307      	orrs	r7, r0
 8007a92:	3568      	adds	r5, #104	; 0x68
 8007a94:	e7e9      	b.n	8007a6a <_fwalk_reent+0x12>

08007a96 <__retarget_lock_init_recursive>:
 8007a96:	4770      	bx	lr

08007a98 <__retarget_lock_acquire_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <__retarget_lock_release_recursive>:
 8007a9a:	4770      	bx	lr

08007a9c <__swhatbuf_r>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	460e      	mov	r6, r1
 8007aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	2900      	cmp	r1, #0
 8007aa8:	461d      	mov	r5, r3
 8007aaa:	b096      	sub	sp, #88	; 0x58
 8007aac:	da08      	bge.n	8007ac0 <__swhatbuf_r+0x24>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ab4:	602a      	str	r2, [r5, #0]
 8007ab6:	061a      	lsls	r2, r3, #24
 8007ab8:	d410      	bmi.n	8007adc <__swhatbuf_r+0x40>
 8007aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007abe:	e00e      	b.n	8007ade <__swhatbuf_r+0x42>
 8007ac0:	466a      	mov	r2, sp
 8007ac2:	f000 f8fb 	bl	8007cbc <_fstat_r>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	dbf1      	blt.n	8007aae <__swhatbuf_r+0x12>
 8007aca:	9a01      	ldr	r2, [sp, #4]
 8007acc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ad0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ad4:	425a      	negs	r2, r3
 8007ad6:	415a      	adcs	r2, r3
 8007ad8:	602a      	str	r2, [r5, #0]
 8007ada:	e7ee      	b.n	8007aba <__swhatbuf_r+0x1e>
 8007adc:	2340      	movs	r3, #64	; 0x40
 8007ade:	2000      	movs	r0, #0
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	b016      	add	sp, #88	; 0x58
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ae8 <__smakebuf_r>:
 8007ae8:	898b      	ldrh	r3, [r1, #12]
 8007aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aec:	079d      	lsls	r5, r3, #30
 8007aee:	4606      	mov	r6, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	d507      	bpl.n	8007b04 <__smakebuf_r+0x1c>
 8007af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	6123      	str	r3, [r4, #16]
 8007afc:	2301      	movs	r3, #1
 8007afe:	6163      	str	r3, [r4, #20]
 8007b00:	b002      	add	sp, #8
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	466a      	mov	r2, sp
 8007b06:	ab01      	add	r3, sp, #4
 8007b08:	f7ff ffc8 	bl	8007a9c <__swhatbuf_r>
 8007b0c:	9900      	ldr	r1, [sp, #0]
 8007b0e:	4605      	mov	r5, r0
 8007b10:	4630      	mov	r0, r6
 8007b12:	f7ff fb0d 	bl	8007130 <_malloc_r>
 8007b16:	b948      	cbnz	r0, 8007b2c <__smakebuf_r+0x44>
 8007b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1c:	059a      	lsls	r2, r3, #22
 8007b1e:	d4ef      	bmi.n	8007b00 <__smakebuf_r+0x18>
 8007b20:	f023 0303 	bic.w	r3, r3, #3
 8007b24:	f043 0302 	orr.w	r3, r3, #2
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	e7e3      	b.n	8007af4 <__smakebuf_r+0xc>
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	; (8007b64 <__smakebuf_r+0x7c>)
 8007b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	6020      	str	r0, [r4, #0]
 8007b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	9b00      	ldr	r3, [sp, #0]
 8007b3c:	6120      	str	r0, [r4, #16]
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	9b01      	ldr	r3, [sp, #4]
 8007b42:	b15b      	cbz	r3, 8007b5c <__smakebuf_r+0x74>
 8007b44:	4630      	mov	r0, r6
 8007b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b4a:	f000 f8c9 	bl	8007ce0 <_isatty_r>
 8007b4e:	b128      	cbz	r0, 8007b5c <__smakebuf_r+0x74>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	89a0      	ldrh	r0, [r4, #12]
 8007b5e:	4305      	orrs	r5, r0
 8007b60:	81a5      	strh	r5, [r4, #12]
 8007b62:	e7cd      	b.n	8007b00 <__smakebuf_r+0x18>
 8007b64:	080078f5 	.word	0x080078f5

08007b68 <_raise_r>:
 8007b68:	291f      	cmp	r1, #31
 8007b6a:	b538      	push	{r3, r4, r5, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	d904      	bls.n	8007b7c <_raise_r+0x14>
 8007b72:	2316      	movs	r3, #22
 8007b74:	6003      	str	r3, [r0, #0]
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b7e:	b112      	cbz	r2, 8007b86 <_raise_r+0x1e>
 8007b80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b84:	b94b      	cbnz	r3, 8007b9a <_raise_r+0x32>
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 f830 	bl	8007bec <_getpid_r>
 8007b8c:	462a      	mov	r2, r5
 8007b8e:	4601      	mov	r1, r0
 8007b90:	4620      	mov	r0, r4
 8007b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b96:	f000 b817 	b.w	8007bc8 <_kill_r>
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d00a      	beq.n	8007bb4 <_raise_r+0x4c>
 8007b9e:	1c59      	adds	r1, r3, #1
 8007ba0:	d103      	bne.n	8007baa <_raise_r+0x42>
 8007ba2:	2316      	movs	r3, #22
 8007ba4:	6003      	str	r3, [r0, #0]
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e7e7      	b.n	8007b7a <_raise_r+0x12>
 8007baa:	2400      	movs	r4, #0
 8007bac:	4628      	mov	r0, r5
 8007bae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bb2:	4798      	blx	r3
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e7e0      	b.n	8007b7a <_raise_r+0x12>

08007bb8 <raise>:
 8007bb8:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <raise+0xc>)
 8007bba:	4601      	mov	r1, r0
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	f7ff bfd3 	b.w	8007b68 <_raise_r>
 8007bc2:	bf00      	nop
 8007bc4:	20000010 	.word	0x20000010

08007bc8 <_kill_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4d06      	ldr	r5, [pc, #24]	; (8007be8 <_kill_r+0x20>)
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	602b      	str	r3, [r5, #0]
 8007bd6:	f7fa fd80 	bl	80026da <_kill>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d102      	bne.n	8007be4 <_kill_r+0x1c>
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	b103      	cbz	r3, 8007be4 <_kill_r+0x1c>
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	bd38      	pop	{r3, r4, r5, pc}
 8007be6:	bf00      	nop
 8007be8:	200003d0 	.word	0x200003d0

08007bec <_getpid_r>:
 8007bec:	f7fa bd6e 	b.w	80026cc <_getpid>

08007bf0 <__sread>:
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf8:	f000 f894 	bl	8007d24 <_read_r>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	bfab      	itete	ge
 8007c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c02:	89a3      	ldrhlt	r3, [r4, #12]
 8007c04:	181b      	addge	r3, r3, r0
 8007c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c0a:	bfac      	ite	ge
 8007c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c0e:	81a3      	strhlt	r3, [r4, #12]
 8007c10:	bd10      	pop	{r4, pc}

08007c12 <__swrite>:
 8007c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c16:	461f      	mov	r7, r3
 8007c18:	898b      	ldrh	r3, [r1, #12]
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	05db      	lsls	r3, r3, #23
 8007c1e:	460c      	mov	r4, r1
 8007c20:	4616      	mov	r6, r2
 8007c22:	d505      	bpl.n	8007c30 <__swrite+0x1e>
 8007c24:	2302      	movs	r3, #2
 8007c26:	2200      	movs	r2, #0
 8007c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2c:	f000 f868 	bl	8007d00 <_lseek_r>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	4632      	mov	r2, r6
 8007c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c46:	f000 b817 	b.w	8007c78 <_write_r>

08007c4a <__sseek>:
 8007c4a:	b510      	push	{r4, lr}
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c52:	f000 f855 	bl	8007d00 <_lseek_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	bf15      	itete	ne
 8007c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c66:	81a3      	strheq	r3, [r4, #12]
 8007c68:	bf18      	it	ne
 8007c6a:	81a3      	strhne	r3, [r4, #12]
 8007c6c:	bd10      	pop	{r4, pc}

08007c6e <__sclose>:
 8007c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c72:	f000 b813 	b.w	8007c9c <_close_r>
	...

08007c78 <_write_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	4611      	mov	r1, r2
 8007c80:	2200      	movs	r2, #0
 8007c82:	4d05      	ldr	r5, [pc, #20]	; (8007c98 <_write_r+0x20>)
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7fa fd5e 	bl	8002748 <_write>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_write_r+0x1e>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_write_r+0x1e>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	200003d0 	.word	0x200003d0

08007c9c <_close_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4d05      	ldr	r5, [pc, #20]	; (8007cb8 <_close_r+0x1c>)
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	f7fa fd6a 	bl	8002780 <_close>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_close_r+0x1a>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_close_r+0x1a>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	200003d0 	.word	0x200003d0

08007cbc <_fstat_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4d06      	ldr	r5, [pc, #24]	; (8007cdc <_fstat_r+0x20>)
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	f7fa fd64 	bl	8002796 <_fstat>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	d102      	bne.n	8007cd8 <_fstat_r+0x1c>
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	b103      	cbz	r3, 8007cd8 <_fstat_r+0x1c>
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	bd38      	pop	{r3, r4, r5, pc}
 8007cda:	bf00      	nop
 8007cdc:	200003d0 	.word	0x200003d0

08007ce0 <_isatty_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4d05      	ldr	r5, [pc, #20]	; (8007cfc <_isatty_r+0x1c>)
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	f7fa fd62 	bl	80027b4 <_isatty>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_isatty_r+0x1a>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_isatty_r+0x1a>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	200003d0 	.word	0x200003d0

08007d00 <_lseek_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4d05      	ldr	r5, [pc, #20]	; (8007d20 <_lseek_r+0x20>)
 8007d0c:	602a      	str	r2, [r5, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f7fa fd5a 	bl	80027c8 <_lseek>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_lseek_r+0x1e>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_lseek_r+0x1e>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	200003d0 	.word	0x200003d0

08007d24 <_read_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4d05      	ldr	r5, [pc, #20]	; (8007d44 <_read_r+0x20>)
 8007d30:	602a      	str	r2, [r5, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f7fa fceb 	bl	800270e <_read>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_read_r+0x1e>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_read_r+0x1e>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	200003d0 	.word	0x200003d0

08007d48 <asin>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	f000 f823 	bl	8007d98 <__ieee754_asin>
 8007d52:	4622      	mov	r2, r4
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	462b      	mov	r3, r5
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	f7f8 fe55 	bl	8000a0c <__aeabi_dcmpun>
 8007d62:	b988      	cbnz	r0, 8007d88 <asin+0x40>
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f000 fac2 	bl	80082f0 <fabs>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	4b08      	ldr	r3, [pc, #32]	; (8007d90 <asin+0x48>)
 8007d70:	f7f8 fe42 	bl	80009f8 <__aeabi_dcmpgt>
 8007d74:	b140      	cbz	r0, 8007d88 <asin+0x40>
 8007d76:	f7fd faa9 	bl	80052cc <__errno>
 8007d7a:	2321      	movs	r3, #33	; 0x21
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	4805      	ldr	r0, [pc, #20]	; (8007d94 <asin+0x4c>)
 8007d80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d84:	f000 bab8 	b.w	80082f8 <nan>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	3ff00000 	.word	0x3ff00000
 8007d94:	080085f7 	.word	0x080085f7

08007d98 <__ieee754_asin>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	4bc4      	ldr	r3, [pc, #784]	; (80080b0 <__ieee754_asin+0x318>)
 8007d9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007da2:	b087      	sub	sp, #28
 8007da4:	429e      	cmp	r6, r3
 8007da6:	4602      	mov	r2, r0
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	9105      	str	r1, [sp, #20]
 8007dae:	dd29      	ble.n	8007e04 <__ieee754_asin+0x6c>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8007db6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007dba:	4333      	orrs	r3, r6
 8007dbc:	d114      	bne.n	8007de8 <__ieee754_asin+0x50>
 8007dbe:	a3a2      	add	r3, pc, #648	; (adr r3, 8008048 <__ieee754_asin+0x2b0>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fb88 	bl	80004d8 <__aeabi_dmul>
 8007dc8:	a3a1      	add	r3, pc, #644	; (adr r3, 8008050 <__ieee754_asin+0x2b8>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460f      	mov	r7, r1
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	f7f8 fb7f 	bl	80004d8 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4630      	mov	r0, r6
 8007de0:	4639      	mov	r1, r7
 8007de2:	f7f8 f9c3 	bl	800016c <__adddf3>
 8007de6:	e006      	b.n	8007df6 <__ieee754_asin+0x5e>
 8007de8:	460b      	mov	r3, r1
 8007dea:	f7f8 f9bd 	bl	8000168 <__aeabi_dsub>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	f7f8 fc9b 	bl	800072c <__aeabi_ddiv>
 8007df6:	4604      	mov	r4, r0
 8007df8:	460d      	mov	r5, r1
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	b007      	add	sp, #28
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	4bab      	ldr	r3, [pc, #684]	; (80080b4 <__ieee754_asin+0x31c>)
 8007e06:	429e      	cmp	r6, r3
 8007e08:	dc0e      	bgt.n	8007e28 <__ieee754_asin+0x90>
 8007e0a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007e0e:	f280 80ab 	bge.w	8007f68 <__ieee754_asin+0x1d0>
 8007e12:	a391      	add	r3, pc, #580	; (adr r3, 8008058 <__ieee754_asin+0x2c0>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 f9a8 	bl	800016c <__adddf3>
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4ba6      	ldr	r3, [pc, #664]	; (80080b8 <__ieee754_asin+0x320>)
 8007e20:	f7f8 fdea 	bl	80009f8 <__aeabi_dcmpgt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d1e8      	bne.n	8007dfa <__ieee754_asin+0x62>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	f000 fa60 	bl	80082f0 <fabs>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	2000      	movs	r0, #0
 8007e36:	49a0      	ldr	r1, [pc, #640]	; (80080b8 <__ieee754_asin+0x320>)
 8007e38:	f7f8 f996 	bl	8000168 <__aeabi_dsub>
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4b9f      	ldr	r3, [pc, #636]	; (80080bc <__ieee754_asin+0x324>)
 8007e40:	f7f8 fb4a 	bl	80004d8 <__aeabi_dmul>
 8007e44:	a386      	add	r3, pc, #536	; (adr r3, 8008060 <__ieee754_asin+0x2c8>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	f7f8 fb43 	bl	80004d8 <__aeabi_dmul>
 8007e52:	a385      	add	r3, pc, #532	; (adr r3, 8008068 <__ieee754_asin+0x2d0>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 f988 	bl	800016c <__adddf3>
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	462b      	mov	r3, r5
 8007e60:	f7f8 fb3a 	bl	80004d8 <__aeabi_dmul>
 8007e64:	a382      	add	r3, pc, #520	; (adr r3, 8008070 <__ieee754_asin+0x2d8>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 f97d 	bl	8000168 <__aeabi_dsub>
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	f7f8 fb31 	bl	80004d8 <__aeabi_dmul>
 8007e76:	a380      	add	r3, pc, #512	; (adr r3, 8008078 <__ieee754_asin+0x2e0>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f7f8 f976 	bl	800016c <__adddf3>
 8007e80:	4622      	mov	r2, r4
 8007e82:	462b      	mov	r3, r5
 8007e84:	f7f8 fb28 	bl	80004d8 <__aeabi_dmul>
 8007e88:	a37d      	add	r3, pc, #500	; (adr r3, 8008080 <__ieee754_asin+0x2e8>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 f96b 	bl	8000168 <__aeabi_dsub>
 8007e92:	4622      	mov	r2, r4
 8007e94:	462b      	mov	r3, r5
 8007e96:	f7f8 fb1f 	bl	80004d8 <__aeabi_dmul>
 8007e9a:	a37b      	add	r3, pc, #492	; (adr r3, 8008088 <__ieee754_asin+0x2f0>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 f964 	bl	800016c <__adddf3>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	f7f8 fb16 	bl	80004d8 <__aeabi_dmul>
 8007eac:	a378      	add	r3, pc, #480	; (adr r3, 8008090 <__ieee754_asin+0x2f8>)
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	4629      	mov	r1, r5
 8007eba:	f7f8 fb0d 	bl	80004d8 <__aeabi_dmul>
 8007ebe:	a376      	add	r3, pc, #472	; (adr r3, 8008098 <__ieee754_asin+0x300>)
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f7f8 f950 	bl	8000168 <__aeabi_dsub>
 8007ec8:	4622      	mov	r2, r4
 8007eca:	462b      	mov	r3, r5
 8007ecc:	f7f8 fb04 	bl	80004d8 <__aeabi_dmul>
 8007ed0:	a373      	add	r3, pc, #460	; (adr r3, 80080a0 <__ieee754_asin+0x308>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 f949 	bl	800016c <__adddf3>
 8007eda:	4622      	mov	r2, r4
 8007edc:	462b      	mov	r3, r5
 8007ede:	f7f8 fafb 	bl	80004d8 <__aeabi_dmul>
 8007ee2:	a371      	add	r3, pc, #452	; (adr r3, 80080a8 <__ieee754_asin+0x310>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f93e 	bl	8000168 <__aeabi_dsub>
 8007eec:	4622      	mov	r2, r4
 8007eee:	462b      	mov	r3, r5
 8007ef0:	f7f8 faf2 	bl	80004d8 <__aeabi_dmul>
 8007ef4:	4b70      	ldr	r3, [pc, #448]	; (80080b8 <__ieee754_asin+0x320>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f7f8 f938 	bl	800016c <__adddf3>
 8007efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f000 f944 	bl	8008190 <__ieee754_sqrt>
 8007f08:	4b6d      	ldr	r3, [pc, #436]	; (80080c0 <__ieee754_asin+0x328>)
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	429e      	cmp	r6, r3
 8007f0e:	468b      	mov	fp, r1
 8007f10:	f340 80d8 	ble.w	80080c4 <__ieee754_asin+0x32c>
 8007f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f1c:	f7f8 fc06 	bl	800072c <__aeabi_ddiv>
 8007f20:	4652      	mov	r2, sl
 8007f22:	465b      	mov	r3, fp
 8007f24:	f7f8 fad8 	bl	80004d8 <__aeabi_dmul>
 8007f28:	4652      	mov	r2, sl
 8007f2a:	465b      	mov	r3, fp
 8007f2c:	f7f8 f91e 	bl	800016c <__adddf3>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	f7f8 f91a 	bl	800016c <__adddf3>
 8007f38:	a345      	add	r3, pc, #276	; (adr r3, 8008050 <__ieee754_asin+0x2b8>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 f913 	bl	8000168 <__aeabi_dsub>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	a140      	add	r1, pc, #256	; (adr r1, 8008048 <__ieee754_asin+0x2b0>)
 8007f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f4c:	f7f8 f90c 	bl	8000168 <__aeabi_dsub>
 8007f50:	9b05      	ldr	r3, [sp, #20]
 8007f52:	4604      	mov	r4, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bfdc      	itt	le
 8007f58:	4602      	movle	r2, r0
 8007f5a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007f5e:	460d      	mov	r5, r1
 8007f60:	bfdc      	itt	le
 8007f62:	4614      	movle	r4, r2
 8007f64:	461d      	movle	r5, r3
 8007f66:	e748      	b.n	8007dfa <__ieee754_asin+0x62>
 8007f68:	460b      	mov	r3, r1
 8007f6a:	f7f8 fab5 	bl	80004d8 <__aeabi_dmul>
 8007f6e:	a33c      	add	r3, pc, #240	; (adr r3, 8008060 <__ieee754_asin+0x2c8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	f7f8 faae 	bl	80004d8 <__aeabi_dmul>
 8007f7c:	a33a      	add	r3, pc, #232	; (adr r3, 8008068 <__ieee754_asin+0x2d0>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f8f3 	bl	800016c <__adddf3>
 8007f86:	4632      	mov	r2, r6
 8007f88:	463b      	mov	r3, r7
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	a338      	add	r3, pc, #224	; (adr r3, 8008070 <__ieee754_asin+0x2d8>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f8e8 	bl	8000168 <__aeabi_dsub>
 8007f98:	4632      	mov	r2, r6
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	f7f8 fa9c 	bl	80004d8 <__aeabi_dmul>
 8007fa0:	a335      	add	r3, pc, #212	; (adr r3, 8008078 <__ieee754_asin+0x2e0>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f8e1 	bl	800016c <__adddf3>
 8007faa:	4632      	mov	r2, r6
 8007fac:	463b      	mov	r3, r7
 8007fae:	f7f8 fa93 	bl	80004d8 <__aeabi_dmul>
 8007fb2:	a333      	add	r3, pc, #204	; (adr r3, 8008080 <__ieee754_asin+0x2e8>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 f8d6 	bl	8000168 <__aeabi_dsub>
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	f7f8 fa8a 	bl	80004d8 <__aeabi_dmul>
 8007fc4:	a330      	add	r3, pc, #192	; (adr r3, 8008088 <__ieee754_asin+0x2f0>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f7f8 f8cf 	bl	800016c <__adddf3>
 8007fce:	4632      	mov	r2, r6
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	f7f8 fa81 	bl	80004d8 <__aeabi_dmul>
 8007fd6:	a32e      	add	r3, pc, #184	; (adr r3, 8008090 <__ieee754_asin+0x2f8>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	4680      	mov	r8, r0
 8007fde:	4689      	mov	r9, r1
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	f7f8 fa78 	bl	80004d8 <__aeabi_dmul>
 8007fe8:	a32b      	add	r3, pc, #172	; (adr r3, 8008098 <__ieee754_asin+0x300>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 f8bb 	bl	8000168 <__aeabi_dsub>
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	f7f8 fa6f 	bl	80004d8 <__aeabi_dmul>
 8007ffa:	a329      	add	r3, pc, #164	; (adr r3, 80080a0 <__ieee754_asin+0x308>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 f8b4 	bl	800016c <__adddf3>
 8008004:	4632      	mov	r2, r6
 8008006:	463b      	mov	r3, r7
 8008008:	f7f8 fa66 	bl	80004d8 <__aeabi_dmul>
 800800c:	a326      	add	r3, pc, #152	; (adr r3, 80080a8 <__ieee754_asin+0x310>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f7f8 f8a9 	bl	8000168 <__aeabi_dsub>
 8008016:	4632      	mov	r2, r6
 8008018:	463b      	mov	r3, r7
 800801a:	f7f8 fa5d 	bl	80004d8 <__aeabi_dmul>
 800801e:	2200      	movs	r2, #0
 8008020:	4b25      	ldr	r3, [pc, #148]	; (80080b8 <__ieee754_asin+0x320>)
 8008022:	f7f8 f8a3 	bl	800016c <__adddf3>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4640      	mov	r0, r8
 800802c:	4649      	mov	r1, r9
 800802e:	f7f8 fb7d 	bl	800072c <__aeabi_ddiv>
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	f7f8 fa4f 	bl	80004d8 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4620      	mov	r0, r4
 8008040:	4629      	mov	r1, r5
 8008042:	e6ce      	b.n	8007de2 <__ieee754_asin+0x4a>
 8008044:	f3af 8000 	nop.w
 8008048:	54442d18 	.word	0x54442d18
 800804c:	3ff921fb 	.word	0x3ff921fb
 8008050:	33145c07 	.word	0x33145c07
 8008054:	3c91a626 	.word	0x3c91a626
 8008058:	8800759c 	.word	0x8800759c
 800805c:	7e37e43c 	.word	0x7e37e43c
 8008060:	0dfdf709 	.word	0x0dfdf709
 8008064:	3f023de1 	.word	0x3f023de1
 8008068:	7501b288 	.word	0x7501b288
 800806c:	3f49efe0 	.word	0x3f49efe0
 8008070:	b5688f3b 	.word	0xb5688f3b
 8008074:	3fa48228 	.word	0x3fa48228
 8008078:	0e884455 	.word	0x0e884455
 800807c:	3fc9c155 	.word	0x3fc9c155
 8008080:	03eb6f7d 	.word	0x03eb6f7d
 8008084:	3fd4d612 	.word	0x3fd4d612
 8008088:	55555555 	.word	0x55555555
 800808c:	3fc55555 	.word	0x3fc55555
 8008090:	b12e9282 	.word	0xb12e9282
 8008094:	3fb3b8c5 	.word	0x3fb3b8c5
 8008098:	1b8d0159 	.word	0x1b8d0159
 800809c:	3fe6066c 	.word	0x3fe6066c
 80080a0:	9c598ac8 	.word	0x9c598ac8
 80080a4:	40002ae5 	.word	0x40002ae5
 80080a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80080ac:	40033a27 	.word	0x40033a27
 80080b0:	3fefffff 	.word	0x3fefffff
 80080b4:	3fdfffff 	.word	0x3fdfffff
 80080b8:	3ff00000 	.word	0x3ff00000
 80080bc:	3fe00000 	.word	0x3fe00000
 80080c0:	3fef3332 	.word	0x3fef3332
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	f7f8 f850 	bl	800016c <__adddf3>
 80080cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080d0:	4606      	mov	r6, r0
 80080d2:	460f      	mov	r7, r1
 80080d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080d8:	f7f8 fb28 	bl	800072c <__aeabi_ddiv>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 f9f8 	bl	80004d8 <__aeabi_dmul>
 80080e8:	f04f 0800 	mov.w	r8, #0
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	4642      	mov	r2, r8
 80080f2:	465b      	mov	r3, fp
 80080f4:	4640      	mov	r0, r8
 80080f6:	4659      	mov	r1, fp
 80080f8:	f7f8 f9ee 	bl	80004d8 <__aeabi_dmul>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4620      	mov	r0, r4
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 f830 	bl	8000168 <__aeabi_dsub>
 8008108:	4642      	mov	r2, r8
 800810a:	4604      	mov	r4, r0
 800810c:	460d      	mov	r5, r1
 800810e:	465b      	mov	r3, fp
 8008110:	4650      	mov	r0, sl
 8008112:	4659      	mov	r1, fp
 8008114:	f7f8 f82a 	bl	800016c <__adddf3>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 fb04 	bl	800072c <__aeabi_ddiv>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	f7f8 f820 	bl	800016c <__adddf3>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	a113      	add	r1, pc, #76	; (adr r1, 8008180 <__ieee754_asin+0x3e8>)
 8008132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008136:	f7f8 f817 	bl	8000168 <__aeabi_dsub>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4630      	mov	r0, r6
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 f811 	bl	8000168 <__aeabi_dsub>
 8008146:	4642      	mov	r2, r8
 8008148:	4604      	mov	r4, r0
 800814a:	460d      	mov	r5, r1
 800814c:	465b      	mov	r3, fp
 800814e:	4640      	mov	r0, r8
 8008150:	4659      	mov	r1, fp
 8008152:	f7f8 f80b 	bl	800016c <__adddf3>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	a10b      	add	r1, pc, #44	; (adr r1, 8008188 <__ieee754_asin+0x3f0>)
 800815c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008160:	f7f8 f802 	bl	8000168 <__aeabi_dsub>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4620      	mov	r0, r4
 800816a:	4629      	mov	r1, r5
 800816c:	f7f7 fffc 	bl	8000168 <__aeabi_dsub>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	a104      	add	r1, pc, #16	; (adr r1, 8008188 <__ieee754_asin+0x3f0>)
 8008176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817a:	e6e7      	b.n	8007f4c <__ieee754_asin+0x1b4>
 800817c:	f3af 8000 	nop.w
 8008180:	33145c07 	.word	0x33145c07
 8008184:	3c91a626 	.word	0x3c91a626
 8008188:	54442d18 	.word	0x54442d18
 800818c:	3fe921fb 	.word	0x3fe921fb

08008190 <__ieee754_sqrt>:
 8008190:	f8df c158 	ldr.w	ip, [pc, #344]	; 80082ec <__ieee754_sqrt+0x15c>
 8008194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008198:	ea3c 0c01 	bics.w	ip, ip, r1
 800819c:	4606      	mov	r6, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	460c      	mov	r4, r1
 80081a2:	460a      	mov	r2, r1
 80081a4:	4607      	mov	r7, r0
 80081a6:	4603      	mov	r3, r0
 80081a8:	d10f      	bne.n	80081ca <__ieee754_sqrt+0x3a>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	f7f8 f993 	bl	80004d8 <__aeabi_dmul>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4630      	mov	r0, r6
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f7 ffd7 	bl	800016c <__adddf3>
 80081be:	4606      	mov	r6, r0
 80081c0:	460d      	mov	r5, r1
 80081c2:	4630      	mov	r0, r6
 80081c4:	4629      	mov	r1, r5
 80081c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ca:	2900      	cmp	r1, #0
 80081cc:	dc0e      	bgt.n	80081ec <__ieee754_sqrt+0x5c>
 80081ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80081d2:	ea5c 0707 	orrs.w	r7, ip, r7
 80081d6:	d0f4      	beq.n	80081c2 <__ieee754_sqrt+0x32>
 80081d8:	b141      	cbz	r1, 80081ec <__ieee754_sqrt+0x5c>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	f7f7 ffc3 	bl	8000168 <__aeabi_dsub>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	f7f8 faa1 	bl	800072c <__aeabi_ddiv>
 80081ea:	e7e8      	b.n	80081be <__ieee754_sqrt+0x2e>
 80081ec:	1521      	asrs	r1, r4, #20
 80081ee:	d075      	beq.n	80082dc <__ieee754_sqrt+0x14c>
 80081f0:	07cc      	lsls	r4, r1, #31
 80081f2:	f04f 0400 	mov.w	r4, #0
 80081f6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80081fa:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80081fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008202:	bf5e      	ittt	pl
 8008204:	0fd9      	lsrpl	r1, r3, #31
 8008206:	005b      	lslpl	r3, r3, #1
 8008208:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800820c:	0fd9      	lsrs	r1, r3, #31
 800820e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008212:	2516      	movs	r5, #22
 8008214:	4620      	mov	r0, r4
 8008216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800821a:	107f      	asrs	r7, r7, #1
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	1846      	adds	r6, r0, r1
 8008220:	4296      	cmp	r6, r2
 8008222:	bfde      	ittt	le
 8008224:	1b92      	suble	r2, r2, r6
 8008226:	1870      	addle	r0, r6, r1
 8008228:	1864      	addle	r4, r4, r1
 800822a:	0052      	lsls	r2, r2, #1
 800822c:	3d01      	subs	r5, #1
 800822e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008232:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008236:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800823a:	d1f0      	bne.n	800821e <__ieee754_sqrt+0x8e>
 800823c:	4629      	mov	r1, r5
 800823e:	f04f 0e20 	mov.w	lr, #32
 8008242:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008246:	4282      	cmp	r2, r0
 8008248:	eb06 0c05 	add.w	ip, r6, r5
 800824c:	dc02      	bgt.n	8008254 <__ieee754_sqrt+0xc4>
 800824e:	d113      	bne.n	8008278 <__ieee754_sqrt+0xe8>
 8008250:	459c      	cmp	ip, r3
 8008252:	d811      	bhi.n	8008278 <__ieee754_sqrt+0xe8>
 8008254:	f1bc 0f00 	cmp.w	ip, #0
 8008258:	eb0c 0506 	add.w	r5, ip, r6
 800825c:	da43      	bge.n	80082e6 <__ieee754_sqrt+0x156>
 800825e:	2d00      	cmp	r5, #0
 8008260:	db41      	blt.n	80082e6 <__ieee754_sqrt+0x156>
 8008262:	f100 0801 	add.w	r8, r0, #1
 8008266:	1a12      	subs	r2, r2, r0
 8008268:	4640      	mov	r0, r8
 800826a:	459c      	cmp	ip, r3
 800826c:	bf88      	it	hi
 800826e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008272:	eba3 030c 	sub.w	r3, r3, ip
 8008276:	4431      	add	r1, r6
 8008278:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800827c:	f1be 0e01 	subs.w	lr, lr, #1
 8008280:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008284:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008288:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800828c:	d1db      	bne.n	8008246 <__ieee754_sqrt+0xb6>
 800828e:	4313      	orrs	r3, r2
 8008290:	d006      	beq.n	80082a0 <__ieee754_sqrt+0x110>
 8008292:	1c48      	adds	r0, r1, #1
 8008294:	bf0b      	itete	eq
 8008296:	4671      	moveq	r1, lr
 8008298:	3101      	addne	r1, #1
 800829a:	3401      	addeq	r4, #1
 800829c:	f021 0101 	bicne.w	r1, r1, #1
 80082a0:	1063      	asrs	r3, r4, #1
 80082a2:	0849      	lsrs	r1, r1, #1
 80082a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80082a8:	07e2      	lsls	r2, r4, #31
 80082aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80082ae:	bf48      	it	mi
 80082b0:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80082b4:	460e      	mov	r6, r1
 80082b6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80082ba:	e782      	b.n	80081c2 <__ieee754_sqrt+0x32>
 80082bc:	0ada      	lsrs	r2, r3, #11
 80082be:	3815      	subs	r0, #21
 80082c0:	055b      	lsls	r3, r3, #21
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	d0fa      	beq.n	80082bc <__ieee754_sqrt+0x12c>
 80082c6:	02d5      	lsls	r5, r2, #11
 80082c8:	d50a      	bpl.n	80082e0 <__ieee754_sqrt+0x150>
 80082ca:	f1c1 0420 	rsb	r4, r1, #32
 80082ce:	fa23 f404 	lsr.w	r4, r3, r4
 80082d2:	1e4d      	subs	r5, r1, #1
 80082d4:	408b      	lsls	r3, r1
 80082d6:	4322      	orrs	r2, r4
 80082d8:	1b41      	subs	r1, r0, r5
 80082da:	e789      	b.n	80081f0 <__ieee754_sqrt+0x60>
 80082dc:	4608      	mov	r0, r1
 80082de:	e7f0      	b.n	80082c2 <__ieee754_sqrt+0x132>
 80082e0:	0052      	lsls	r2, r2, #1
 80082e2:	3101      	adds	r1, #1
 80082e4:	e7ef      	b.n	80082c6 <__ieee754_sqrt+0x136>
 80082e6:	4680      	mov	r8, r0
 80082e8:	e7bd      	b.n	8008266 <__ieee754_sqrt+0xd6>
 80082ea:	bf00      	nop
 80082ec:	7ff00000 	.word	0x7ff00000

080082f0 <fabs>:
 80082f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80082f4:	4770      	bx	lr
	...

080082f8 <nan>:
 80082f8:	2000      	movs	r0, #0
 80082fa:	4901      	ldr	r1, [pc, #4]	; (8008300 <nan+0x8>)
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	7ff80000 	.word	0x7ff80000

08008304 <_init>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr

08008310 <_fini>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr
